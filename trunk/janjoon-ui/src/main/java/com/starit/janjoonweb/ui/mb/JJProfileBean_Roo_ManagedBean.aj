// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import com.starit.janjoonweb.domain.JJProfile;
import com.starit.janjoonweb.domain.JJProfileService;
import com.starit.janjoonweb.domain.JJRight;
import com.starit.janjoonweb.ui.mb.JJProfileBean;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJProfileBean_Roo_ManagedBean {
    
    declare @type: JJProfileBean: @ManagedBean(name = "jJProfileBean");
    
    declare @type: JJProfileBean: @SessionScoped;
    
    @Autowired
    JJProfileService JJProfileBean.jJProfileService;
    
    private String JJProfileBean.name = "JJProfiles";
    
    private JJProfile JJProfileBean.JJProfile_;
    
    private List<JJProfile> JJProfileBean.allJJProfiles;
    
    private boolean JJProfileBean.dataVisible = false;
    
    private List<String> JJProfileBean.columns;
    
    private HtmlPanelGrid JJProfileBean.createPanelGrid;
    
    private HtmlPanelGrid JJProfileBean.editPanelGrid;
    
    private HtmlPanelGrid JJProfileBean.viewPanelGrid;
    
    private boolean JJProfileBean.createDialogVisible = false;
    
    private List<JJRight> JJProfileBean.selectedRights;
    
    @PostConstruct
    public void JJProfileBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
    }
    
    public String JJProfileBean.getName() {
        return name;
    }
    
    public List<String> JJProfileBean.getColumns() {
        return columns;
    }
    
    public List<JJProfile> JJProfileBean.getAllJJProfiles() {
        return allJJProfiles;
    }
    
    public void JJProfileBean.setAllJJProfiles(List<JJProfile> allJJProfiles) {
        this.allJJProfiles = allJJProfiles;
    }
    
    public String JJProfileBean.findAllJJProfiles() {
        allJJProfiles = jJProfileService.findAllJJProfiles();
        dataVisible = !allJJProfiles.isEmpty();
        return null;
    }
    
    public boolean JJProfileBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJProfileBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJProfileBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJProfileBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJProfileBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJProfileBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJProfileBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJProfileBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJProfileBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJProfileBean.JJProfile_.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMaximum(25);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel enabledCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledCreateOutput.setFor("enabledCreateInput");
        enabledCreateOutput.setId("enabledCreateOutput");
        enabledCreateOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledCreateOutput);
        
        SelectBooleanCheckbox enabledCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledCreateInput.setId("enabledCreateInput");
        enabledCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJProfileBean.JJProfile_.enabled}", Boolean.class));
        enabledCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledCreateInput);
        
        Message enabledCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledCreateInputMessage.setId("enabledCreateInputMessage");
        enabledCreateInputMessage.setFor("enabledCreateInput");
        enabledCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledCreateInputMessage);
        
        HtmlOutputText rightsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rightsCreateOutput.setId("rightsCreateOutput");
        rightsCreateOutput.setValue("Rights:");
        htmlPanelGrid.getChildren().add(rightsCreateOutput);
        
        HtmlOutputText rightsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rightsCreateInput.setId("rightsCreateInput");
        rightsCreateInput.setValue("This relationship is managed from the JJRight side");
        htmlPanelGrid.getChildren().add(rightsCreateInput);
        
        Message rightsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        rightsCreateInputMessage.setId("rightsCreateInputMessage");
        rightsCreateInputMessage.setFor("rightsCreateInput");
        rightsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(rightsCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJProfileBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJProfileBean.JJProfile_.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMaximum(25);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel enabledEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledEditOutput.setFor("enabledEditInput");
        enabledEditOutput.setId("enabledEditOutput");
        enabledEditOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledEditOutput);
        
        SelectBooleanCheckbox enabledEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledEditInput.setId("enabledEditInput");
        enabledEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJProfileBean.JJProfile_.enabled}", Boolean.class));
        enabledEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledEditInput);
        
        Message enabledEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledEditInputMessage.setId("enabledEditInputMessage");
        enabledEditInputMessage.setFor("enabledEditInput");
        enabledEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledEditInputMessage);
        
        HtmlOutputText rightsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rightsEditOutput.setId("rightsEditOutput");
        rightsEditOutput.setValue("Rights:");
        htmlPanelGrid.getChildren().add(rightsEditOutput);
        
        HtmlOutputText rightsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rightsEditInput.setId("rightsEditInput");
        rightsEditInput.setValue("This relationship is managed from the JJRight side");
        htmlPanelGrid.getChildren().add(rightsEditInput);
        
        Message rightsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        rightsEditInputMessage.setId("rightsEditInputMessage");
        rightsEditInputMessage.setFor("rightsEditInput");
        rightsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(rightsEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJProfileBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJProfileBean.JJProfile_.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText enabledLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledLabel.setId("enabledLabel");
        enabledLabel.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledLabel);
        
        HtmlOutputText enabledValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJProfileBean.JJProfile_.enabled}", String.class));
        htmlPanelGrid.getChildren().add(enabledValue);
        
        HtmlOutputText rightsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rightsLabel.setId("rightsLabel");
        rightsLabel.setValue("Rights:");
        htmlPanelGrid.getChildren().add(rightsLabel);
        
        HtmlOutputText rightsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rightsValue.setId("rightsValue");
        rightsValue.setValue("This relationship is managed from the JJRight side");
        htmlPanelGrid.getChildren().add(rightsValue);
        
        return htmlPanelGrid;
    }
    
    public JJProfile JJProfileBean.getJJProfile_() {
        if (JJProfile_ == null) {
            JJProfile_ = new JJProfile();
        }
        return JJProfile_;
    }
    
    public void JJProfileBean.setJJProfile_(JJProfile JJProfile_) {
        this.JJProfile_ = JJProfile_;
    }
    
    public List<JJRight> JJProfileBean.getSelectedRights() {
        return selectedRights;
    }
    
    public void JJProfileBean.setSelectedRights(List<JJRight> selectedRights) {
        if (selectedRights != null) {
            JJProfile_.setRights(new HashSet<JJRight>(selectedRights));
        }
        this.selectedRights = selectedRights;
    }
    
    public String JJProfileBean.onEdit() {
        if (JJProfile_ != null && JJProfile_.getRights() != null) {
            selectedRights = new ArrayList<JJRight>(JJProfile_.getRights());
        }
        return null;
    }
    
    public boolean JJProfileBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJProfileBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJProfileBean.displayList() {
        createDialogVisible = false;
        findAllJJProfiles();
        return "JJProfile_";
    }
    
    public String JJProfileBean.displayCreateDialog() {
        JJProfile_ = new JJProfile();
        createDialogVisible = true;
        return "JJProfile_";
    }
    
    public String JJProfileBean.persist() {
        String message = "";
        if (JJProfile_.getId() != null) {
            jJProfileService.updateJJProfile(JJProfile_);
            message = "message_successfully_updated";
        } else {
            jJProfileService.saveJJProfile(JJProfile_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJProfile");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJProfiles();
    }
    
    public String JJProfileBean.delete() {
        jJProfileService.deleteJJProfile(JJProfile_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJProfile");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJProfiles();
    }
    
    public void JJProfileBean.reset() {
        JJProfile_ = null;
        selectedRights = null;
        createDialogVisible = false;
    }
    
    public void JJProfileBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

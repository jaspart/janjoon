// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import com.starit.janjoonweb.domain.JJCompany;
import com.starit.janjoonweb.domain.JJCompanyService;
import com.starit.janjoonweb.domain.JJContact;
import com.starit.janjoonweb.domain.JJContactService;
import com.starit.janjoonweb.ui.mb.JJCompanyBean;
import com.starit.janjoonweb.ui.mb.converter.JJContactConverter;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJCompanyBean_Roo_ManagedBean {
    
    declare @type: JJCompanyBean: @ManagedBean(name = "jJCompanyBean");
    
    declare @type: JJCompanyBean: @SessionScoped;
    
    @Autowired
    JJCompanyService JJCompanyBean.jJCompanyService;
    
    @Autowired
    JJContactService JJCompanyBean.jJContactService;
    
    private String JJCompanyBean.name = "JJCompanys";
    
    private JJCompany JJCompanyBean.JJCompany_;
    
    private List<JJCompany> JJCompanyBean.allJJCompanys;
    
    private boolean JJCompanyBean.dataVisible = false;
    
    private List<String> JJCompanyBean.columns;
    
    private HtmlPanelGrid JJCompanyBean.createPanelGrid;
    
    private HtmlPanelGrid JJCompanyBean.editPanelGrid;
    
    private HtmlPanelGrid JJCompanyBean.viewPanelGrid;
    
    private boolean JJCompanyBean.createDialogVisible = false;
    
    private List<JJContact> JJCompanyBean.selectedContacts;
    
    @PostConstruct
    public void JJCompanyBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
        columns.add("banner");
    }
    
    public String JJCompanyBean.getName() {
        return name;
    }
    
    public List<String> JJCompanyBean.getColumns() {
        return columns;
    }
    
    public List<JJCompany> JJCompanyBean.getAllJJCompanys() {
        return allJJCompanys;
    }
    
    public void JJCompanyBean.setAllJJCompanys(List<JJCompany> allJJCompanys) {
        this.allJJCompanys = allJJCompanys;
    }
    
    public String JJCompanyBean.findAllJJCompanys() {
        allJJCompanys = jJCompanyService.findAllJJCompanys();
        dataVisible = !allJJCompanys.isEmpty();
        return null;
    }
    
    public boolean JJCompanyBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJCompanyBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJCompanyBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJCompanyBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJCompanyBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJCompanyBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJCompanyBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJCompanyBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJCompanyBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputTextarea nameCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMaximum(100);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel descriptionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionCreateOutput.setFor("descriptionCreateInput");
        descriptionCreateOutput.setId("descriptionCreateOutput");
        descriptionCreateOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionCreateOutput);
        
        InputTextarea descriptionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionCreateInput.setId("descriptionCreateInput");
        descriptionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.description}", String.class));
        descriptionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionCreateInput);
        
        Message descriptionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionCreateInputMessage.setId("descriptionCreateInputMessage");
        descriptionCreateInputMessage.setFor("descriptionCreateInput");
        descriptionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionCreateInputMessage);
        
        OutputLabel creationDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateCreateOutput.setFor("creationDateCreateInput");
        creationDateCreateOutput.setId("creationDateCreateOutput");
        creationDateCreateOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateCreateOutput);
        
        Calendar creationDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateCreateInput.setId("creationDateCreateInput");
        creationDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.creationDate}", Date.class));
        creationDateCreateInput.setNavigator(true);
        creationDateCreateInput.setEffect("slideDown");
        creationDateCreateInput.setPattern("dd/MM/yyyy");
        creationDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateCreateInput);
        
        Message creationDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateCreateInputMessage.setId("creationDateCreateInputMessage");
        creationDateCreateInputMessage.setFor("creationDateCreateInput");
        creationDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateCreateInputMessage);
        
        OutputLabel createdByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByCreateOutput.setFor("createdByCreateInput");
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.createdBy}", JJContact.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJCompanyBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByCreateInput.setConverter(new JJContactConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        OutputLabel updatedDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateCreateOutput.setFor("updatedDateCreateInput");
        updatedDateCreateOutput.setId("updatedDateCreateOutput");
        updatedDateCreateOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateCreateOutput);
        
        Calendar updatedDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateCreateInput.setId("updatedDateCreateInput");
        updatedDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.updatedDate}", Date.class));
        updatedDateCreateInput.setNavigator(true);
        updatedDateCreateInput.setEffect("slideDown");
        updatedDateCreateInput.setPattern("dd/MM/yyyy");
        updatedDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateCreateInput);
        
        Message updatedDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateCreateInputMessage.setId("updatedDateCreateInputMessage");
        updatedDateCreateInputMessage.setFor("updatedDateCreateInput");
        updatedDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateCreateInputMessage);
        
        OutputLabel updatedByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByCreateOutput.setFor("updatedByCreateInput");
        updatedByCreateOutput.setId("updatedByCreateOutput");
        updatedByCreateOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByCreateOutput);
        
        AutoComplete updatedByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByCreateInput.setId("updatedByCreateInput");
        updatedByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.updatedBy}", JJContact.class));
        updatedByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJCompanyBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByCreateInput.setDropdown(true);
        updatedByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByCreateInput.setConverter(new JJContactConverter());
        updatedByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByCreateInput);
        
        Message updatedByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByCreateInputMessage.setId("updatedByCreateInputMessage");
        updatedByCreateInputMessage.setFor("updatedByCreateInput");
        updatedByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByCreateInputMessage);
        
        OutputLabel enabledCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledCreateOutput.setFor("enabledCreateInput");
        enabledCreateOutput.setId("enabledCreateOutput");
        enabledCreateOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledCreateOutput);
        
        SelectBooleanCheckbox enabledCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledCreateInput.setId("enabledCreateInput");
        enabledCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.enabled}", Boolean.class));
        enabledCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledCreateInput);
        
        Message enabledCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledCreateInputMessage.setId("enabledCreateInputMessage");
        enabledCreateInputMessage.setFor("enabledCreateInput");
        enabledCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledCreateInputMessage);
        
        OutputLabel logoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        logoCreateOutput.setFor("logoCreateInput");
        logoCreateOutput.setId("logoCreateOutput");
        logoCreateOutput.setValue("Logo:");
        htmlPanelGrid.getChildren().add(logoCreateOutput);
        
        InputText logoCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        logoCreateInput.setId("logoCreateInput");
        logoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.logo}", Byte.class));
        logoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(logoCreateInput);
        
        Message logoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        logoCreateInputMessage.setId("logoCreateInputMessage");
        logoCreateInputMessage.setFor("logoCreateInput");
        logoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(logoCreateInputMessage);
        
        OutputLabel bannerCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        bannerCreateOutput.setFor("bannerCreateInput");
        bannerCreateOutput.setId("bannerCreateOutput");
        bannerCreateOutput.setValue("Banner:");
        htmlPanelGrid.getChildren().add(bannerCreateOutput);
        
        InputTextarea bannerCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        bannerCreateInput.setId("bannerCreateInput");
        bannerCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.banner}", String.class));
        LengthValidator bannerCreateInputValidator = new LengthValidator();
        bannerCreateInputValidator.setMaximum(200);
        bannerCreateInput.addValidator(bannerCreateInputValidator);
        bannerCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(bannerCreateInput);
        
        Message bannerCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bannerCreateInputMessage.setId("bannerCreateInputMessage");
        bannerCreateInputMessage.setFor("bannerCreateInput");
        bannerCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bannerCreateInputMessage);
        
        OutputLabel calendarCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        calendarCreateOutput.setFor("calendarCreateInput");
        calendarCreateOutput.setId("calendarCreateOutput");
        calendarCreateOutput.setValue("Calendar:");
        htmlPanelGrid.getChildren().add(calendarCreateOutput);
        
        InputTextarea calendarCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        calendarCreateInput.setId("calendarCreateInput");
        calendarCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.calendar}", String.class));
        calendarCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(calendarCreateInput);
        
        Message calendarCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        calendarCreateInputMessage.setId("calendarCreateInputMessage");
        calendarCreateInputMessage.setFor("calendarCreateInput");
        calendarCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(calendarCreateInputMessage);
        
        OutputLabel preferenceCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        preferenceCreateOutput.setFor("preferenceCreateInput");
        preferenceCreateOutput.setId("preferenceCreateOutput");
        preferenceCreateOutput.setValue("Preference:");
        htmlPanelGrid.getChildren().add(preferenceCreateOutput);
        
        InputTextarea preferenceCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        preferenceCreateInput.setId("preferenceCreateInput");
        preferenceCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.preference}", String.class));
        preferenceCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(preferenceCreateInput);
        
        Message preferenceCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        preferenceCreateInputMessage.setId("preferenceCreateInputMessage");
        preferenceCreateInputMessage.setFor("preferenceCreateInput");
        preferenceCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(preferenceCreateInputMessage);
        
        OutputLabel priceloadCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        priceloadCreateOutput.setFor("priceloadCreateInput");
        priceloadCreateOutput.setId("priceloadCreateOutput");
        priceloadCreateOutput.setValue("Priceload:");
        htmlPanelGrid.getChildren().add(priceloadCreateOutput);
        
        Spinner priceloadCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        priceloadCreateInput.setId("priceloadCreateInput");
        priceloadCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.priceload}", Integer.class));
        priceloadCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(priceloadCreateInput);
        
        Message priceloadCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        priceloadCreateInputMessage.setId("priceloadCreateInputMessage");
        priceloadCreateInputMessage.setFor("priceloadCreateInput");
        priceloadCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(priceloadCreateInputMessage);
        
        OutputLabel pricepointCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pricepointCreateOutput.setFor("pricepointCreateInput");
        pricepointCreateOutput.setId("pricepointCreateOutput");
        pricepointCreateOutput.setValue("Pricepoint:");
        htmlPanelGrid.getChildren().add(pricepointCreateOutput);
        
        Spinner pricepointCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        pricepointCreateInput.setId("pricepointCreateInput");
        pricepointCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.pricepoint}", Integer.class));
        pricepointCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(pricepointCreateInput);
        
        Message pricepointCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pricepointCreateInputMessage.setId("pricepointCreateInputMessage");
        pricepointCreateInputMessage.setFor("pricepointCreateInput");
        pricepointCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pricepointCreateInputMessage);
        
        OutputLabel currencyCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        currencyCreateOutput.setFor("currencyCreateInput");
        currencyCreateOutput.setId("currencyCreateOutput");
        currencyCreateOutput.setValue("Currency:");
        htmlPanelGrid.getChildren().add(currencyCreateOutput);
        
        InputText currencyCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        currencyCreateInput.setId("currencyCreateInput");
        currencyCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.currency}", String.class));
        LengthValidator currencyCreateInputValidator = new LengthValidator();
        currencyCreateInputValidator.setMaximum(3);
        currencyCreateInput.addValidator(currencyCreateInputValidator);
        currencyCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(currencyCreateInput);
        
        Message currencyCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        currencyCreateInputMessage.setId("currencyCreateInputMessage");
        currencyCreateInputMessage.setFor("currencyCreateInput");
        currencyCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(currencyCreateInputMessage);
        
        HtmlOutputText contactsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contactsCreateOutput.setId("contactsCreateOutput");
        contactsCreateOutput.setValue("Contacts:");
        htmlPanelGrid.getChildren().add(contactsCreateOutput);
        
        HtmlOutputText contactsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contactsCreateInput.setId("contactsCreateInput");
        contactsCreateInput.setValue("This relationship is managed from the JJContact side");
        htmlPanelGrid.getChildren().add(contactsCreateInput);
        
        Message contactsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        contactsCreateInputMessage.setId("contactsCreateInputMessage");
        contactsCreateInputMessage.setFor("contactsCreateInput");
        contactsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(contactsCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJCompanyBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputTextarea nameEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMaximum(100);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel descriptionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionEditOutput.setFor("descriptionEditInput");
        descriptionEditOutput.setId("descriptionEditOutput");
        descriptionEditOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionEditOutput);
        
        InputTextarea descriptionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionEditInput.setId("descriptionEditInput");
        descriptionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.description}", String.class));
        descriptionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionEditInput);
        
        Message descriptionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionEditInputMessage.setId("descriptionEditInputMessage");
        descriptionEditInputMessage.setFor("descriptionEditInput");
        descriptionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionEditInputMessage);
        
        OutputLabel creationDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateEditOutput.setFor("creationDateEditInput");
        creationDateEditOutput.setId("creationDateEditOutput");
        creationDateEditOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateEditOutput);
        
        Calendar creationDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateEditInput.setId("creationDateEditInput");
        creationDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.creationDate}", Date.class));
        creationDateEditInput.setNavigator(true);
        creationDateEditInput.setEffect("slideDown");
        creationDateEditInput.setPattern("dd/MM/yyyy");
        creationDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateEditInput);
        
        Message creationDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateEditInputMessage.setId("creationDateEditInputMessage");
        creationDateEditInputMessage.setFor("creationDateEditInput");
        creationDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateEditInputMessage);
        
        OutputLabel createdByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByEditOutput.setFor("createdByEditInput");
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.createdBy}", JJContact.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJCompanyBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByEditInput.setConverter(new JJContactConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        OutputLabel updatedDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateEditOutput.setFor("updatedDateEditInput");
        updatedDateEditOutput.setId("updatedDateEditOutput");
        updatedDateEditOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateEditOutput);
        
        Calendar updatedDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateEditInput.setId("updatedDateEditInput");
        updatedDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.updatedDate}", Date.class));
        updatedDateEditInput.setNavigator(true);
        updatedDateEditInput.setEffect("slideDown");
        updatedDateEditInput.setPattern("dd/MM/yyyy");
        updatedDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateEditInput);
        
        Message updatedDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateEditInputMessage.setId("updatedDateEditInputMessage");
        updatedDateEditInputMessage.setFor("updatedDateEditInput");
        updatedDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateEditInputMessage);
        
        OutputLabel updatedByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByEditOutput.setFor("updatedByEditInput");
        updatedByEditOutput.setId("updatedByEditOutput");
        updatedByEditOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByEditOutput);
        
        AutoComplete updatedByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByEditInput.setId("updatedByEditInput");
        updatedByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.updatedBy}", JJContact.class));
        updatedByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJCompanyBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByEditInput.setDropdown(true);
        updatedByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByEditInput.setConverter(new JJContactConverter());
        updatedByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByEditInput);
        
        Message updatedByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByEditInputMessage.setId("updatedByEditInputMessage");
        updatedByEditInputMessage.setFor("updatedByEditInput");
        updatedByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByEditInputMessage);
        
        OutputLabel enabledEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledEditOutput.setFor("enabledEditInput");
        enabledEditOutput.setId("enabledEditOutput");
        enabledEditOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledEditOutput);
        
        SelectBooleanCheckbox enabledEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledEditInput.setId("enabledEditInput");
        enabledEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.enabled}", Boolean.class));
        enabledEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledEditInput);
        
        Message enabledEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledEditInputMessage.setId("enabledEditInputMessage");
        enabledEditInputMessage.setFor("enabledEditInput");
        enabledEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledEditInputMessage);
        
        OutputLabel logoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        logoEditOutput.setFor("logoEditInput");
        logoEditOutput.setId("logoEditOutput");
        logoEditOutput.setValue("Logo:");
        htmlPanelGrid.getChildren().add(logoEditOutput);
        
        InputText logoEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        logoEditInput.setId("logoEditInput");
        logoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.logo}", Byte.class));
        logoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(logoEditInput);
        
        Message logoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        logoEditInputMessage.setId("logoEditInputMessage");
        logoEditInputMessage.setFor("logoEditInput");
        logoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(logoEditInputMessage);
        
        OutputLabel bannerEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        bannerEditOutput.setFor("bannerEditInput");
        bannerEditOutput.setId("bannerEditOutput");
        bannerEditOutput.setValue("Banner:");
        htmlPanelGrid.getChildren().add(bannerEditOutput);
        
        InputTextarea bannerEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        bannerEditInput.setId("bannerEditInput");
        bannerEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.banner}", String.class));
        LengthValidator bannerEditInputValidator = new LengthValidator();
        bannerEditInputValidator.setMaximum(200);
        bannerEditInput.addValidator(bannerEditInputValidator);
        bannerEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(bannerEditInput);
        
        Message bannerEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bannerEditInputMessage.setId("bannerEditInputMessage");
        bannerEditInputMessage.setFor("bannerEditInput");
        bannerEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bannerEditInputMessage);
        
        OutputLabel calendarEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        calendarEditOutput.setFor("calendarEditInput");
        calendarEditOutput.setId("calendarEditOutput");
        calendarEditOutput.setValue("Calendar:");
        htmlPanelGrid.getChildren().add(calendarEditOutput);
        
        InputTextarea calendarEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        calendarEditInput.setId("calendarEditInput");
        calendarEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.calendar}", String.class));
        calendarEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(calendarEditInput);
        
        Message calendarEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        calendarEditInputMessage.setId("calendarEditInputMessage");
        calendarEditInputMessage.setFor("calendarEditInput");
        calendarEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(calendarEditInputMessage);
        
        OutputLabel preferenceEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        preferenceEditOutput.setFor("preferenceEditInput");
        preferenceEditOutput.setId("preferenceEditOutput");
        preferenceEditOutput.setValue("Preference:");
        htmlPanelGrid.getChildren().add(preferenceEditOutput);
        
        InputTextarea preferenceEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        preferenceEditInput.setId("preferenceEditInput");
        preferenceEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.preference}", String.class));
        preferenceEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(preferenceEditInput);
        
        Message preferenceEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        preferenceEditInputMessage.setId("preferenceEditInputMessage");
        preferenceEditInputMessage.setFor("preferenceEditInput");
        preferenceEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(preferenceEditInputMessage);
        
        OutputLabel priceloadEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        priceloadEditOutput.setFor("priceloadEditInput");
        priceloadEditOutput.setId("priceloadEditOutput");
        priceloadEditOutput.setValue("Priceload:");
        htmlPanelGrid.getChildren().add(priceloadEditOutput);
        
        Spinner priceloadEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        priceloadEditInput.setId("priceloadEditInput");
        priceloadEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.priceload}", Integer.class));
        priceloadEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(priceloadEditInput);
        
        Message priceloadEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        priceloadEditInputMessage.setId("priceloadEditInputMessage");
        priceloadEditInputMessage.setFor("priceloadEditInput");
        priceloadEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(priceloadEditInputMessage);
        
        OutputLabel pricepointEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pricepointEditOutput.setFor("pricepointEditInput");
        pricepointEditOutput.setId("pricepointEditOutput");
        pricepointEditOutput.setValue("Pricepoint:");
        htmlPanelGrid.getChildren().add(pricepointEditOutput);
        
        Spinner pricepointEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        pricepointEditInput.setId("pricepointEditInput");
        pricepointEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.pricepoint}", Integer.class));
        pricepointEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(pricepointEditInput);
        
        Message pricepointEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pricepointEditInputMessage.setId("pricepointEditInputMessage");
        pricepointEditInputMessage.setFor("pricepointEditInput");
        pricepointEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pricepointEditInputMessage);
        
        OutputLabel currencyEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        currencyEditOutput.setFor("currencyEditInput");
        currencyEditOutput.setId("currencyEditOutput");
        currencyEditOutput.setValue("Currency:");
        htmlPanelGrid.getChildren().add(currencyEditOutput);
        
        InputText currencyEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        currencyEditInput.setId("currencyEditInput");
        currencyEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.currency}", String.class));
        LengthValidator currencyEditInputValidator = new LengthValidator();
        currencyEditInputValidator.setMaximum(3);
        currencyEditInput.addValidator(currencyEditInputValidator);
        currencyEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(currencyEditInput);
        
        Message currencyEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        currencyEditInputMessage.setId("currencyEditInputMessage");
        currencyEditInputMessage.setFor("currencyEditInput");
        currencyEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(currencyEditInputMessage);
        
        HtmlOutputText contactsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contactsEditOutput.setId("contactsEditOutput");
        contactsEditOutput.setValue("Contacts:");
        htmlPanelGrid.getChildren().add(contactsEditOutput);
        
        HtmlOutputText contactsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contactsEditInput.setId("contactsEditInput");
        contactsEditInput.setValue("This relationship is managed from the JJContact side");
        htmlPanelGrid.getChildren().add(contactsEditInput);
        
        Message contactsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        contactsEditInputMessage.setId("contactsEditInputMessage");
        contactsEditInputMessage.setFor("contactsEditInput");
        contactsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(contactsEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJCompanyBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        InputTextarea nameValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.name}", String.class));
        nameValue.setReadonly(true);
        nameValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText descriptionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionLabel.setId("descriptionLabel");
        descriptionLabel.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionLabel);
        
        InputTextarea descriptionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionValue.setId("descriptionValue");
        descriptionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.description}", String.class));
        descriptionValue.setReadonly(true);
        descriptionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descriptionValue);
        
        HtmlOutputText creationDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateLabel.setId("creationDateLabel");
        creationDateLabel.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateLabel);
        
        HtmlOutputText creationDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.creationDate}", Date.class));
        DateTimeConverter creationDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationDateValueConverter.setPattern("dd/MM/yyyy");
        creationDateValue.setConverter(creationDateValueConverter);
        htmlPanelGrid.getChildren().add(creationDateValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.createdBy}", JJContact.class));
        createdByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        HtmlOutputText updatedDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateLabel.setId("updatedDateLabel");
        updatedDateLabel.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateLabel);
        
        HtmlOutputText updatedDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.updatedDate}", Date.class));
        DateTimeConverter updatedDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updatedDateValueConverter.setPattern("dd/MM/yyyy");
        updatedDateValue.setConverter(updatedDateValueConverter);
        htmlPanelGrid.getChildren().add(updatedDateValue);
        
        HtmlOutputText updatedByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByLabel.setId("updatedByLabel");
        updatedByLabel.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByLabel);
        
        HtmlOutputText updatedByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.updatedBy}", JJContact.class));
        updatedByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(updatedByValue);
        
        HtmlOutputText enabledLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledLabel.setId("enabledLabel");
        enabledLabel.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledLabel);
        
        HtmlOutputText enabledValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.enabled}", String.class));
        htmlPanelGrid.getChildren().add(enabledValue);
        
        HtmlOutputText logoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        logoLabel.setId("logoLabel");
        logoLabel.setValue("Logo:");
        htmlPanelGrid.getChildren().add(logoLabel);
        
        HtmlOutputText logoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        logoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.logo}", String.class));
        htmlPanelGrid.getChildren().add(logoValue);
        
        HtmlOutputText bannerLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bannerLabel.setId("bannerLabel");
        bannerLabel.setValue("Banner:");
        htmlPanelGrid.getChildren().add(bannerLabel);
        
        InputTextarea bannerValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        bannerValue.setId("bannerValue");
        bannerValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.banner}", String.class));
        bannerValue.setReadonly(true);
        bannerValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(bannerValue);
        
        HtmlOutputText calendarLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        calendarLabel.setId("calendarLabel");
        calendarLabel.setValue("Calendar:");
        htmlPanelGrid.getChildren().add(calendarLabel);
        
        InputTextarea calendarValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        calendarValue.setId("calendarValue");
        calendarValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.calendar}", String.class));
        calendarValue.setReadonly(true);
        calendarValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(calendarValue);
        
        HtmlOutputText preferenceLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        preferenceLabel.setId("preferenceLabel");
        preferenceLabel.setValue("Preference:");
        htmlPanelGrid.getChildren().add(preferenceLabel);
        
        InputTextarea preferenceValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        preferenceValue.setId("preferenceValue");
        preferenceValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.preference}", String.class));
        preferenceValue.setReadonly(true);
        preferenceValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(preferenceValue);
        
        HtmlOutputText priceloadLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        priceloadLabel.setId("priceloadLabel");
        priceloadLabel.setValue("Priceload:");
        htmlPanelGrid.getChildren().add(priceloadLabel);
        
        HtmlOutputText priceloadValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        priceloadValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.priceload}", String.class));
        htmlPanelGrid.getChildren().add(priceloadValue);
        
        HtmlOutputText pricepointLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pricepointLabel.setId("pricepointLabel");
        pricepointLabel.setValue("Pricepoint:");
        htmlPanelGrid.getChildren().add(pricepointLabel);
        
        HtmlOutputText pricepointValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pricepointValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.pricepoint}", String.class));
        htmlPanelGrid.getChildren().add(pricepointValue);
        
        HtmlOutputText currencyLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        currencyLabel.setId("currencyLabel");
        currencyLabel.setValue("Currency:");
        htmlPanelGrid.getChildren().add(currencyLabel);
        
        HtmlOutputText currencyValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        currencyValue.setId("currencyValue");
        currencyValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJCompanyBean.JJCompany_.currency}", String.class));
        htmlPanelGrid.getChildren().add(currencyValue);
        
        HtmlOutputText contactsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contactsLabel.setId("contactsLabel");
        contactsLabel.setValue("Contacts:");
        htmlPanelGrid.getChildren().add(contactsLabel);
        
        HtmlOutputText contactsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contactsValue.setId("contactsValue");
        contactsValue.setValue("This relationship is managed from the JJContact side");
        htmlPanelGrid.getChildren().add(contactsValue);
        
        return htmlPanelGrid;
    }
    
    public JJCompany JJCompanyBean.getJJCompany_() {
        if (JJCompany_ == null) {
            JJCompany_ = new JJCompany();
        }
        return JJCompany_;
    }
    
    public void JJCompanyBean.setJJCompany_(JJCompany JJCompany_) {
        this.JJCompany_ = JJCompany_;
    }
    
    public List<JJContact> JJCompanyBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJCompanyBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJCompanyBean.getSelectedContacts() {
        return selectedContacts;
    }
    
    public void JJCompanyBean.setSelectedContacts(List<JJContact> selectedContacts) {
        if (selectedContacts != null) {
            JJCompany_.setContacts(new HashSet<JJContact>(selectedContacts));
        }
        this.selectedContacts = selectedContacts;
    }
    
    public String JJCompanyBean.onEdit() {
        if (JJCompany_ != null && JJCompany_.getContacts() != null) {
            selectedContacts = new ArrayList<JJContact>(JJCompany_.getContacts());
        }
        return null;
    }
    
    public boolean JJCompanyBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJCompanyBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJCompanyBean.displayList() {
        createDialogVisible = false;
        findAllJJCompanys();
        return "JJCompany_";
    }
    
    public String JJCompanyBean.displayCreateDialog() {
        JJCompany_ = new JJCompany();
        createDialogVisible = true;
        return "JJCompany_";
    }
    
    public String JJCompanyBean.persist() {
        String message = "";
        if (JJCompany_.getId() != null) {
            jJCompanyService.updateJJCompany(JJCompany_);
            message = "message_successfully_updated";
        } else {
            jJCompanyService.saveJJCompany(JJCompany_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJCompany");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJCompanys();
    }
    
    public String JJCompanyBean.delete() {
        jJCompanyService.deleteJJCompany(JJCompany_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJCompany");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJCompanys();
    }
    
    public void JJCompanyBean.reset() {
        JJCompany_ = null;
        selectedContacts = null;
        createDialogVisible = false;
    }
    
    public void JJCompanyBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

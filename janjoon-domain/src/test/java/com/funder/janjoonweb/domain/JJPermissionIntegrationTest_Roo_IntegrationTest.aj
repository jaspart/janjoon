// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.funder.janjoonweb.domain;

import com.funder.janjoonweb.domain.JJPermissionDataOnDemand;
import com.funder.janjoonweb.domain.JJPermissionIntegrationTest;
import com.funder.janjoonweb.domain.JJPermissionRepository;
import com.funder.janjoonweb.domain.JJPermissionService;
import java.util.Iterator;
import java.util.List;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect JJPermissionIntegrationTest_Roo_IntegrationTest {
    
    declare @type: JJPermissionIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: JJPermissionIntegrationTest: @ContextConfiguration(locations = "classpath*:/META-INF/spring/applicationContext*.xml");
    
    declare @type: JJPermissionIntegrationTest: @Transactional;
    
    @Autowired
    JJPermissionDataOnDemand JJPermissionIntegrationTest.dod;
    
    @Autowired
    JJPermissionService JJPermissionIntegrationTest.jJPermissionService;
    
    @Autowired
    JJPermissionRepository JJPermissionIntegrationTest.jJPermissionRepository;
    
    @Test
    public void JJPermissionIntegrationTest.testCountAllJJPermissions() {
        Assert.assertNotNull("Data on demand for 'JJPermission' failed to initialize correctly", dod.getRandomJJPermission());
        long count = jJPermissionService.countAllJJPermissions();
        Assert.assertTrue("Counter for 'JJPermission' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void JJPermissionIntegrationTest.testFindJJPermission() {
        JJPermission obj = dod.getRandomJJPermission();
        Assert.assertNotNull("Data on demand for 'JJPermission' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'JJPermission' failed to provide an identifier", id);
        obj = jJPermissionService.findJJPermission(id);
        Assert.assertNotNull("Find method for 'JJPermission' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'JJPermission' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void JJPermissionIntegrationTest.testFindAllJJPermissions() {
        Assert.assertNotNull("Data on demand for 'JJPermission' failed to initialize correctly", dod.getRandomJJPermission());
        long count = jJPermissionService.countAllJJPermissions();
        Assert.assertTrue("Too expensive to perform a find all test for 'JJPermission', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<JJPermission> result = jJPermissionService.findAllJJPermissions();
        Assert.assertNotNull("Find all method for 'JJPermission' illegally returned null", result);
        Assert.assertTrue("Find all method for 'JJPermission' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void JJPermissionIntegrationTest.testFindJJPermissionEntries() {
        Assert.assertNotNull("Data on demand for 'JJPermission' failed to initialize correctly", dod.getRandomJJPermission());
        long count = jJPermissionService.countAllJJPermissions();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<JJPermission> result = jJPermissionService.findJJPermissionEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'JJPermission' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'JJPermission' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void JJPermissionIntegrationTest.testFlush() {
        JJPermission obj = dod.getRandomJJPermission();
        Assert.assertNotNull("Data on demand for 'JJPermission' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'JJPermission' failed to provide an identifier", id);
        obj = jJPermissionService.findJJPermission(id);
        Assert.assertNotNull("Find method for 'JJPermission' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyJJPermission(obj);
        Integer currentVersion = obj.getVersion();
        jJPermissionRepository.flush();
        Assert.assertTrue("Version for 'JJPermission' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void JJPermissionIntegrationTest.testUpdateJJPermissionUpdate() {
        JJPermission obj = dod.getRandomJJPermission();
        Assert.assertNotNull("Data on demand for 'JJPermission' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'JJPermission' failed to provide an identifier", id);
        obj = jJPermissionService.findJJPermission(id);
        boolean modified =  dod.modifyJJPermission(obj);
        Integer currentVersion = obj.getVersion();
        JJPermission merged = jJPermissionService.updateJJPermission(obj);
        jJPermissionRepository.flush();
        Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getId(), id);
        Assert.assertTrue("Version for 'JJPermission' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void JJPermissionIntegrationTest.testSaveJJPermission() {
        Assert.assertNotNull("Data on demand for 'JJPermission' failed to initialize correctly", dod.getRandomJJPermission());
        JJPermission obj = dod.getNewTransientJJPermission(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'JJPermission' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'JJPermission' identifier to be null", obj.getId());
        try {
            jJPermissionService.saveJJPermission(obj);
        } catch (final ConstraintViolationException e) {
            final StringBuilder msg = new StringBuilder();
            for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                final ConstraintViolation<?> cv = iter.next();
                msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
            }
            throw new IllegalStateException(msg.toString(), e);
        }
        jJPermissionRepository.flush();
        Assert.assertNotNull("Expected 'JJPermission' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void JJPermissionIntegrationTest.testDeleteJJPermission() {
        JJPermission obj = dod.getRandomJJPermission();
        Assert.assertNotNull("Data on demand for 'JJPermission' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'JJPermission' failed to provide an identifier", id);
        obj = jJPermissionService.findJJPermission(id);
        jJPermissionService.deleteJJPermission(obj);
        jJPermissionRepository.flush();
        Assert.assertNull("Failed to remove 'JJPermission' with identifier '" + id + "'", jJPermissionService.findJJPermission(id));
    }
    
}

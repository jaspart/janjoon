// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.funder.janjoonweb.domain;

import com.funder.janjoonweb.domain.JJStatusDataOnDemand;
import com.funder.janjoonweb.domain.JJStatusIntegrationTest;
import com.funder.janjoonweb.domain.JJStatusRepository;
import com.funder.janjoonweb.domain.JJStatusService;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect JJStatusIntegrationTest_Roo_IntegrationTest {
    
    declare @type: JJStatusIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: JJStatusIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: JJStatusIntegrationTest: @Transactional;
    
    @Autowired
    JJStatusDataOnDemand JJStatusIntegrationTest.dod;
    
    @Autowired
    JJStatusService JJStatusIntegrationTest.jJStatusService;
    
    @Autowired
    JJStatusRepository JJStatusIntegrationTest.jJStatusRepository;
    
    @Test
    public void JJStatusIntegrationTest.testCountAllJJStatuses() {
        Assert.assertNotNull("Data on demand for 'JJStatus' failed to initialize correctly", dod.getRandomJJStatus());
        long count = jJStatusService.countAllJJStatuses();
        Assert.assertTrue("Counter for 'JJStatus' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void JJStatusIntegrationTest.testFindJJStatus() {
        JJStatus obj = dod.getRandomJJStatus();
        Assert.assertNotNull("Data on demand for 'JJStatus' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'JJStatus' failed to provide an identifier", id);
        obj = jJStatusService.findJJStatus(id);
        Assert.assertNotNull("Find method for 'JJStatus' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'JJStatus' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void JJStatusIntegrationTest.testFindAllJJStatuses() {
        Assert.assertNotNull("Data on demand for 'JJStatus' failed to initialize correctly", dod.getRandomJJStatus());
        long count = jJStatusService.countAllJJStatuses();
        Assert.assertTrue("Too expensive to perform a find all test for 'JJStatus', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<JJStatus> result = jJStatusService.findAllJJStatuses();
        Assert.assertNotNull("Find all method for 'JJStatus' illegally returned null", result);
        Assert.assertTrue("Find all method for 'JJStatus' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void JJStatusIntegrationTest.testFindJJStatusEntries() {
        Assert.assertNotNull("Data on demand for 'JJStatus' failed to initialize correctly", dod.getRandomJJStatus());
        long count = jJStatusService.countAllJJStatuses();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<JJStatus> result = jJStatusService.findJJStatusEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'JJStatus' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'JJStatus' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void JJStatusIntegrationTest.testFlush() {
        JJStatus obj = dod.getRandomJJStatus();
        Assert.assertNotNull("Data on demand for 'JJStatus' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'JJStatus' failed to provide an identifier", id);
        obj = jJStatusService.findJJStatus(id);
        Assert.assertNotNull("Find method for 'JJStatus' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyJJStatus(obj);
        Integer currentVersion = obj.getVersion();
        jJStatusRepository.flush();
        Assert.assertTrue("Version for 'JJStatus' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void JJStatusIntegrationTest.testUpdateJJStatusUpdate() {
        JJStatus obj = dod.getRandomJJStatus();
        Assert.assertNotNull("Data on demand for 'JJStatus' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'JJStatus' failed to provide an identifier", id);
        obj = jJStatusService.findJJStatus(id);
        boolean modified =  dod.modifyJJStatus(obj);
        Integer currentVersion = obj.getVersion();
        JJStatus merged = (JJStatus)jJStatusService.updateJJStatus(obj);
        jJStatusRepository.flush();
        Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getId(), id);
        Assert.assertTrue("Version for 'JJStatus' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void JJStatusIntegrationTest.testSaveJJStatus() {
        Assert.assertNotNull("Data on demand for 'JJStatus' failed to initialize correctly", dod.getRandomJJStatus());
        JJStatus obj = dod.getNewTransientJJStatus(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'JJStatus' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'JJStatus' identifier to be null", obj.getId());
        jJStatusService.saveJJStatus(obj);
        jJStatusRepository.flush();
        Assert.assertNotNull("Expected 'JJStatus' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void JJStatusIntegrationTest.testDeleteJJStatus() {
        JJStatus obj = dod.getRandomJJStatus();
        Assert.assertNotNull("Data on demand for 'JJStatus' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'JJStatus' failed to provide an identifier", id);
        obj = jJStatusService.findJJStatus(id);
        jJStatusService.deleteJJStatus(obj);
        jJStatusRepository.flush();
        Assert.assertNull("Failed to remove 'JJStatus' with identifier '" + id + "'", jJStatusService.findJJStatus(id));
    }
    
}

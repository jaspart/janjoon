// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.funder.janjoonweb.domain;

import com.funder.janjoonweb.domain.JJBuildDataOnDemand;
import com.funder.janjoonweb.domain.JJContactDataOnDemand;
import com.funder.janjoonweb.domain.JJProjectDataOnDemand;
import com.funder.janjoonweb.domain.JJTestplan;
import com.funder.janjoonweb.domain.JJTestplanDataOnDemand;
import com.funder.janjoonweb.domain.JJTestplanRepository;
import com.funder.janjoonweb.domain.JJTestplanService;
import com.funder.janjoonweb.domain.JJVersionDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect JJTestplanDataOnDemand_Roo_DataOnDemand {
    
    declare @type: JJTestplanDataOnDemand: @Component;
    
    private Random JJTestplanDataOnDemand.rnd = new SecureRandom();
    
    private List<JJTestplan> JJTestplanDataOnDemand.data;
    
    @Autowired
    JJBuildDataOnDemand JJTestplanDataOnDemand.jJBuildDataOnDemand;
    
    @Autowired
    JJContactDataOnDemand JJTestplanDataOnDemand.jJContactDataOnDemand;
    
    @Autowired
    JJVersionDataOnDemand JJTestplanDataOnDemand.jJVersionDataOnDemand;
    
    @Autowired
    JJProjectDataOnDemand JJTestplanDataOnDemand.jJProjectDataOnDemand;
    
    @Autowired
    JJTestplanService JJTestplanDataOnDemand.jJTestplanService;
    
    @Autowired
    JJTestplanRepository JJTestplanDataOnDemand.jJTestplanRepository;
    
    public JJTestplan JJTestplanDataOnDemand.getNewTransientJJTestplan(int index) {
        JJTestplan obj = new JJTestplan();
        setCreationDate(obj, index);
        setDescription(obj, index);
        setEnabled(obj, index);
        setName(obj, index);
        setUpdatedDate(obj, index);
        return obj;
    }
    
    public void JJTestplanDataOnDemand.setCreationDate(JJTestplan obj, int index) {
        Date creationDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreationDate(creationDate);
    }
    
    public void JJTestplanDataOnDemand.setDescription(JJTestplan obj, int index) {
        String description = "description_" + index;
        if (description.length() > 250) {
            description = description.substring(0, 250);
        }
        obj.setDescription(description);
    }
    
    public void JJTestplanDataOnDemand.setEnabled(JJTestplan obj, int index) {
        Boolean enabled = Boolean.TRUE;
        obj.setEnabled(enabled);
    }
    
    public void JJTestplanDataOnDemand.setName(JJTestplan obj, int index) {
        String name = "name_" + index;
        if (name.length() > 25) {
            name = name.substring(0, 25);
        }
        obj.setName(name);
    }
    
    public void JJTestplanDataOnDemand.setUpdatedDate(JJTestplan obj, int index) {
        Date updatedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdatedDate(updatedDate);
    }
    
    public JJTestplan JJTestplanDataOnDemand.getSpecificJJTestplan(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        JJTestplan obj = data.get(index);
        Long id = obj.getId();
        return jJTestplanService.findJJTestplan(id);
    }
    
    public JJTestplan JJTestplanDataOnDemand.getRandomJJTestplan() {
        init();
        JJTestplan obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return jJTestplanService.findJJTestplan(id);
    }
    
    public boolean JJTestplanDataOnDemand.modifyJJTestplan(JJTestplan obj) {
        return false;
    }
    
    public void JJTestplanDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = jJTestplanService.findJJTestplanEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'JJTestplan' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<JJTestplan>();
        for (int i = 0; i < 10; i++) {
            JJTestplan obj = getNewTransientJJTestplan(i);
            try {
                jJTestplanService.saveJJTestplan(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            jJTestplanRepository.flush();
            data.add(obj);
        }
    }
    
}

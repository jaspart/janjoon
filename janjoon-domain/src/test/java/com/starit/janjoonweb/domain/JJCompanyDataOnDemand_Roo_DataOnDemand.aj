// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.domain;

import com.starit.janjoonweb.domain.JJCompany;
import com.starit.janjoonweb.domain.JJCompanyDataOnDemand;
import com.starit.janjoonweb.domain.JJCompanyRepository;
import com.starit.janjoonweb.domain.JJCompanyService;
import com.starit.janjoonweb.domain.JJContactDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect JJCompanyDataOnDemand_Roo_DataOnDemand {
    
    declare @type: JJCompanyDataOnDemand: @Component;
    
    private Random JJCompanyDataOnDemand.rnd = new SecureRandom();
    
    private List<JJCompany> JJCompanyDataOnDemand.data;
    
    @Autowired
    JJContactDataOnDemand JJCompanyDataOnDemand.jJContactDataOnDemand;
    
    @Autowired
    JJCompanyService JJCompanyDataOnDemand.jJCompanyService;
    
    @Autowired
    JJCompanyRepository JJCompanyDataOnDemand.jJCompanyRepository;
    
    public JJCompany JJCompanyDataOnDemand.getNewTransientJJCompany(int index) {
        JJCompany obj = new JJCompany();
        setBanner(obj, index);
        setCalendar(obj, index);
        setCreationDate(obj, index);
        setCurrency(obj, index);
        setDescription(obj, index);
        setEnabled(obj, index);
        setLogo(obj, index);
        setName(obj, index);
        setPreference(obj, index);
        setPriceload(obj, index);
        setPricepoint(obj, index);
        setUpdatedDate(obj, index);
        return obj;
    }
    
    public void JJCompanyDataOnDemand.setBanner(JJCompany obj, int index) {
        String banner = "banner_" + index;
        if (banner.length() > 200) {
            banner = banner.substring(0, 200);
        }
        obj.setBanner(banner);
    }
    
    public void JJCompanyDataOnDemand.setCalendar(JJCompany obj, int index) {
        String calendar = "calendar_" + index;
        obj.setCalendar(calendar);
    }
    
    public void JJCompanyDataOnDemand.setCreationDate(JJCompany obj, int index) {
        Date creationDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreationDate(creationDate);
    }
    
    public void JJCompanyDataOnDemand.setCurrency(JJCompany obj, int index) {
        String currency = "c_" + index;
        if (currency.length() > 3) {
            currency = currency.substring(0, 3);
        }
        obj.setCurrency(currency);
    }
    
    public void JJCompanyDataOnDemand.setDescription(JJCompany obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void JJCompanyDataOnDemand.setEnabled(JJCompany obj, int index) {
        Boolean enabled = Boolean.TRUE;
        obj.setEnabled(enabled);
    }
    
    public void JJCompanyDataOnDemand.setLogo(JJCompany obj, int index) {
        String logo = "logo_" + index;
        if (logo.length() > 200) {
            logo = logo.substring(0, 200);
        }
        obj.setLogo(logo);
    }
    
    public void JJCompanyDataOnDemand.setName(JJCompany obj, int index) {
        String name = "name_" + index;
        if (name.length() > 100) {
            name = name.substring(0, 100);
        }
        obj.setName(name);
    }
    
    public void JJCompanyDataOnDemand.setPreference(JJCompany obj, int index) {
        String preference = "preference_" + index;
        obj.setPreference(preference);
    }
    
    public void JJCompanyDataOnDemand.setPriceload(JJCompany obj, int index) {
        Integer priceload = new Integer(index);
        obj.setPriceload(priceload);
    }
    
    public void JJCompanyDataOnDemand.setPricepoint(JJCompany obj, int index) {
        Integer pricepoint = new Integer(index);
        obj.setPricepoint(pricepoint);
    }
    
    public void JJCompanyDataOnDemand.setUpdatedDate(JJCompany obj, int index) {
        Date updatedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdatedDate(updatedDate);
    }
    
    public JJCompany JJCompanyDataOnDemand.getSpecificJJCompany(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        JJCompany obj = data.get(index);
        Long id = obj.getId();
        return jJCompanyService.findJJCompany(id);
    }
    
    public JJCompany JJCompanyDataOnDemand.getRandomJJCompany() {
        init();
        JJCompany obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return jJCompanyService.findJJCompany(id);
    }
    
    public boolean JJCompanyDataOnDemand.modifyJJCompany(JJCompany obj) {
        return false;
    }
    
    public void JJCompanyDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = jJCompanyService.findJJCompanyEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'JJCompany' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<JJCompany>();
        for (int i = 0; i < 10; i++) {
            JJCompany obj = getNewTransientJJCompany(i);
            try {
                jJCompanyService.saveJJCompany(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            jJCompanyRepository.flush();
            data.add(obj);
        }
    }
    
}

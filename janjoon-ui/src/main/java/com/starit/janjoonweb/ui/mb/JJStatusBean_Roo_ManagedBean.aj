// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import com.starit.janjoonweb.domain.JJContact;
import com.starit.janjoonweb.domain.JJContactService;
import com.starit.janjoonweb.domain.JJMessage;
import com.starit.janjoonweb.domain.JJStatus;
import com.starit.janjoonweb.domain.JJStatusService;
import com.starit.janjoonweb.ui.mb.JJStatusBean;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJStatusBean_Roo_ManagedBean {
    
    declare @type: JJStatusBean: @ManagedBean(name = "jJStatusBean");
    
    declare @type: JJStatusBean: @SessionScoped;
    
    @Autowired
    JJStatusService JJStatusBean.jJStatusService;
    
    @Autowired
    JJContactService JJStatusBean.jJContactService;
    
    private String JJStatusBean.name = "JJStatuses";
    
    private JJStatus JJStatusBean.JJStatus_;
    
    private List<JJStatus> JJStatusBean.allJJStatuses;
    
    private boolean JJStatusBean.dataVisible = false;
    
    private List<String> JJStatusBean.columns;
    
    private HtmlPanelGrid JJStatusBean.createPanelGrid;
    
    private HtmlPanelGrid JJStatusBean.editPanelGrid;
    
    private HtmlPanelGrid JJStatusBean.viewPanelGrid;
    
    private boolean JJStatusBean.createDialogVisible = false;
    
    private List<JJMessage> JJStatusBean.selectedMessages;
    
    @PostConstruct
    public void JJStatusBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
        columns.add("objet");
    }
    
    public String JJStatusBean.getName() {
        return name;
    }
    
    public List<String> JJStatusBean.getColumns() {
        return columns;
    }
    
    public List<JJStatus> JJStatusBean.getAllJJStatuses() {
        return allJJStatuses;
    }
    
    public void JJStatusBean.setAllJJStatuses(List<JJStatus> allJJStatuses) {
        this.allJJStatuses = allJJStatuses;
    }
    
    public String JJStatusBean.findAllJJStatuses() {
        allJJStatuses = jJStatusService.findAllJJStatuses();
        dataVisible = !allJJStatuses.isEmpty();
        return null;
    }
    
    public boolean JJStatusBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJStatusBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJStatusBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJStatusBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJStatusBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJStatusBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJStatusBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJStatusBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public JJStatus JJStatusBean.getJJStatus_() {
        if (JJStatus_ == null) {
            JJStatus_ = new JJStatus();
        }
        return JJStatus_;
    }
    
    public void JJStatusBean.setJJStatus_(JJStatus JJStatus_) {
        this.JJStatus_ = JJStatus_;
    }
    
    public List<JJContact> JJStatusBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJStatusBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJMessage> JJStatusBean.getSelectedMessages() {
        return selectedMessages;
    }
    
    public void JJStatusBean.setSelectedMessages(List<JJMessage> selectedMessages) {
        if (selectedMessages != null) {
            JJStatus_.setMessages(new HashSet<JJMessage>(selectedMessages));
        }
        this.selectedMessages = selectedMessages;
    }   

    
    public boolean JJStatusBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJStatusBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJStatusBean.displayList() {
        createDialogVisible = false;
        findAllJJStatuses();
        return "JJStatus_";
    }
    
    public String JJStatusBean.displayCreateDialog() {
        JJStatus_ = new JJStatus();
        createDialogVisible = true;
        return "JJStatus_";
    }
    
    public String JJStatusBean.persist() {
        String message = "";
        if (JJStatus_.getId() != null) {
            jJStatusService.updateJJStatus(JJStatus_);
            message = "message_successfully_updated";
        } else {
            jJStatusService.saveJJStatus(JJStatus_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJStatus");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJStatuses();
    }
    
    public String JJStatusBean.delete() {
        jJStatusService.deleteJJStatus(JJStatus_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJStatus");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJStatuses();
    }
    
    public void JJStatusBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

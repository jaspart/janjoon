// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import com.starit.janjoonweb.domain.JJCompany;
import com.starit.janjoonweb.domain.JJCompanyService;
import com.starit.janjoonweb.domain.JJContact;
import com.starit.janjoonweb.domain.JJContactService;
import com.starit.janjoonweb.domain.JJJob;
import com.starit.janjoonweb.domain.JJJobService;
import com.starit.janjoonweb.domain.JJMessage;
import com.starit.janjoonweb.domain.JJPermission;
import com.starit.janjoonweb.domain.JJProduct;
import com.starit.janjoonweb.domain.JJProductService;
import com.starit.janjoonweb.domain.JJProject;
import com.starit.janjoonweb.domain.JJProjectService;
import com.starit.janjoonweb.domain.JJSprint;
import com.starit.janjoonweb.domain.JJVersion;
import com.starit.janjoonweb.domain.JJVersionService;
import com.starit.janjoonweb.ui.mb.JJContactBean;
import com.starit.janjoonweb.ui.mb.converter.JJCompanyConverter;
import com.starit.janjoonweb.ui.mb.converter.JJContactConverter;
import com.starit.janjoonweb.ui.mb.converter.JJJobConverter;
import com.starit.janjoonweb.ui.mb.converter.JJProductConverter;
import com.starit.janjoonweb.ui.mb.converter.JJProjectConverter;
import com.starit.janjoonweb.ui.mb.converter.JJVersionConverter;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import javax.faces.validator.RegexValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJContactBean_Roo_ManagedBean {
    
    declare @type: JJContactBean: @ManagedBean(name = "jJContactBean");
    
    declare @type: JJContactBean: @SessionScoped;
    
    @Autowired
    JJContactService JJContactBean.jJContactService;
    
    @Autowired
    JJJobService JJContactBean.jJJobService;
    
    @Autowired
    JJProjectService JJContactBean.jJProjectService;
    
    @Autowired
    JJProductService JJContactBean.jJProductService;
    
    @Autowired
    JJVersionService JJContactBean.jJVersionService;
    
    @Autowired
    JJCompanyService JJContactBean.jJCompanyService;
    
    private String JJContactBean.name = "JJContacts";
    
    private JJContact JJContactBean.JJContact_;
    
    private List<JJContact> JJContactBean.allJJContacts;
    
    private boolean JJContactBean.dataVisible = false;
    
    private List<String> JJContactBean.columns;
    
    private HtmlPanelGrid JJContactBean.createPanelGrid;
    
    private HtmlPanelGrid JJContactBean.editPanelGrid;
    
    private HtmlPanelGrid JJContactBean.viewPanelGrid;
    
    private boolean JJContactBean.createDialogVisible = false;
    
    private List<JJSprint> JJContactBean.selectedSprints;
    
    private List<JJPermission> JJContactBean.selectedPermissions;
    
    private List<JJMessage> JJContactBean.selectedMessages;
    
    @PostConstruct
    public void JJContactBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
        columns.add("password");
    }
    
    public String JJContactBean.getName() {
        return name;
    }
    
    public List<String> JJContactBean.getColumns() {
        return columns;
    }
    
    public List<JJContact> JJContactBean.getAllJJContacts() {
        return allJJContacts;
    }
    
    public void JJContactBean.setAllJJContacts(List<JJContact> allJJContacts) {
        this.allJJContacts = allJJContacts;
    }
    
    public String JJContactBean.findAllJJContacts() {
        allJJContacts = jJContactService.findAllJJContacts();
        dataVisible = !allJJContacts.isEmpty();
        return null;
    }
    
    public boolean JJContactBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJContactBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJContactBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJContactBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJContactBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJContactBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJContactBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJContactBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJContactBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputTextarea nameCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMaximum(100);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel descriptionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionCreateOutput.setFor("descriptionCreateInput");
        descriptionCreateOutput.setId("descriptionCreateOutput");
        descriptionCreateOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionCreateOutput);
        
        InputTextarea descriptionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionCreateInput.setId("descriptionCreateInput");
        descriptionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.description}", String.class));
        descriptionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionCreateInput);
        
        Message descriptionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionCreateInputMessage.setId("descriptionCreateInputMessage");
        descriptionCreateInputMessage.setFor("descriptionCreateInput");
        descriptionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionCreateInputMessage);
        
        OutputLabel creationDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateCreateOutput.setFor("creationDateCreateInput");
        creationDateCreateOutput.setId("creationDateCreateOutput");
        creationDateCreateOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateCreateOutput);
        
        Calendar creationDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateCreateInput.setId("creationDateCreateInput");
        creationDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.creationDate}", Date.class));
        creationDateCreateInput.setNavigator(true);
        creationDateCreateInput.setEffect("slideDown");
        creationDateCreateInput.setPattern("dd/MM/yyyy");
        creationDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateCreateInput);
        
        Message creationDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateCreateInputMessage.setId("creationDateCreateInputMessage");
        creationDateCreateInputMessage.setFor("creationDateCreateInput");
        creationDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateCreateInputMessage);
        
        OutputLabel createdByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByCreateOutput.setFor("createdByCreateInput");
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.createdBy}", JJContact.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByCreateInput.setConverter(new JJContactConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        OutputLabel updatedDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateCreateOutput.setFor("updatedDateCreateInput");
        updatedDateCreateOutput.setId("updatedDateCreateOutput");
        updatedDateCreateOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateCreateOutput);
        
        Calendar updatedDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateCreateInput.setId("updatedDateCreateInput");
        updatedDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.updatedDate}", Date.class));
        updatedDateCreateInput.setNavigator(true);
        updatedDateCreateInput.setEffect("slideDown");
        updatedDateCreateInput.setPattern("dd/MM/yyyy");
        updatedDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateCreateInput);
        
        Message updatedDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateCreateInputMessage.setId("updatedDateCreateInputMessage");
        updatedDateCreateInputMessage.setFor("updatedDateCreateInput");
        updatedDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateCreateInputMessage);
        
        OutputLabel updatedByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByCreateOutput.setFor("updatedByCreateInput");
        updatedByCreateOutput.setId("updatedByCreateOutput");
        updatedByCreateOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByCreateOutput);
        
        AutoComplete updatedByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByCreateInput.setId("updatedByCreateInput");
        updatedByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.updatedBy}", JJContact.class));
        updatedByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByCreateInput.setDropdown(true);
        updatedByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByCreateInput.setConverter(new JJContactConverter());
        updatedByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByCreateInput);
        
        Message updatedByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByCreateInputMessage.setId("updatedByCreateInputMessage");
        updatedByCreateInputMessage.setFor("updatedByCreateInput");
        updatedByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByCreateInputMessage);
        
        OutputLabel enabledCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledCreateOutput.setFor("enabledCreateInput");
        enabledCreateOutput.setId("enabledCreateOutput");
        enabledCreateOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledCreateOutput);
        
        SelectBooleanCheckbox enabledCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledCreateInput.setId("enabledCreateInput");
        enabledCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.enabled}", Boolean.class));
        enabledCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledCreateInput);
        
        Message enabledCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledCreateInputMessage.setId("enabledCreateInputMessage");
        enabledCreateInputMessage.setFor("enabledCreateInput");
        enabledCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledCreateInputMessage);
        
        OutputLabel passwordCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        passwordCreateOutput.setFor("passwordCreateInput");
        passwordCreateOutput.setId("passwordCreateOutput");
        passwordCreateOutput.setValue("Password:");
        htmlPanelGrid.getChildren().add(passwordCreateOutput);
        
        InputTextarea passwordCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        passwordCreateInput.setId("passwordCreateInput");
        passwordCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.password}", String.class));
        LengthValidator passwordCreateInputValidator = new LengthValidator();
        passwordCreateInputValidator.setMaximum(35);
        passwordCreateInput.addValidator(passwordCreateInputValidator);
        passwordCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(passwordCreateInput);
        
        Message passwordCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        passwordCreateInputMessage.setId("passwordCreateInputMessage");
        passwordCreateInputMessage.setFor("passwordCreateInput");
        passwordCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(passwordCreateInputMessage);
        
        OutputLabel emailCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        emailCreateOutput.setFor("emailCreateInput");
        emailCreateOutput.setId("emailCreateOutput");
        emailCreateOutput.setValue("Email:");
        htmlPanelGrid.getChildren().add(emailCreateOutput);
        
        InputText emailCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        emailCreateInput.setId("emailCreateInput");
        emailCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.email}", String.class));
        RegexValidator emailCreateInputRegexValidator = new RegexValidator();
        emailCreateInputRegexValidator.setPattern("[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,4})");
        emailCreateInput.addValidator(emailCreateInputRegexValidator);
        emailCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(emailCreateInput);
        
        Message emailCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailCreateInputMessage.setId("emailCreateInputMessage");
        emailCreateInputMessage.setFor("emailCreateInput");
        emailCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailCreateInputMessage);
        
        OutputLabel ldapCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        ldapCreateOutput.setFor("ldapCreateInput");
        ldapCreateOutput.setId("ldapCreateOutput");
        ldapCreateOutput.setValue("Ldap:");
        htmlPanelGrid.getChildren().add(ldapCreateOutput);
        
        Spinner ldapCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        ldapCreateInput.setId("ldapCreateInput");
        ldapCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.ldap}", Integer.class));
        ldapCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(ldapCreateInput);
        
        Message ldapCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        ldapCreateInputMessage.setId("ldapCreateInputMessage");
        ldapCreateInputMessage.setFor("ldapCreateInput");
        ldapCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(ldapCreateInputMessage);
        
        OutputLabel firstnameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        firstnameCreateOutput.setFor("firstnameCreateInput");
        firstnameCreateOutput.setId("firstnameCreateOutput");
        firstnameCreateOutput.setValue("Firstname:");
        htmlPanelGrid.getChildren().add(firstnameCreateOutput);
        
        InputTextarea firstnameCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        firstnameCreateInput.setId("firstnameCreateInput");
        firstnameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.firstname}", String.class));
        LengthValidator firstnameCreateInputValidator = new LengthValidator();
        firstnameCreateInputValidator.setMaximum(100);
        firstnameCreateInput.addValidator(firstnameCreateInputValidator);
        firstnameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(firstnameCreateInput);
        
        Message firstnameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        firstnameCreateInputMessage.setId("firstnameCreateInputMessage");
        firstnameCreateInputMessage.setFor("firstnameCreateInput");
        firstnameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(firstnameCreateInputMessage);
        
        OutputLabel dateofbirthCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        dateofbirthCreateOutput.setFor("dateofbirthCreateInput");
        dateofbirthCreateOutput.setId("dateofbirthCreateOutput");
        dateofbirthCreateOutput.setValue("Dateofbirth:");
        htmlPanelGrid.getChildren().add(dateofbirthCreateOutput);
        
        Calendar dateofbirthCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        dateofbirthCreateInput.setId("dateofbirthCreateInput");
        dateofbirthCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.dateofbirth}", Date.class));
        dateofbirthCreateInput.setNavigator(true);
        dateofbirthCreateInput.setEffect("slideDown");
        dateofbirthCreateInput.setPattern("dd/MM/yyyy");
        dateofbirthCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dateofbirthCreateInput);
        
        Message dateofbirthCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dateofbirthCreateInputMessage.setId("dateofbirthCreateInputMessage");
        dateofbirthCreateInputMessage.setFor("dateofbirthCreateInput");
        dateofbirthCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dateofbirthCreateInputMessage);
        
        OutputLabel pictureCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pictureCreateOutput.setFor("pictureCreateInput");
        pictureCreateOutput.setId("pictureCreateOutput");
        pictureCreateOutput.setValue("Picture:");
        htmlPanelGrid.getChildren().add(pictureCreateOutput);
        
        InputText pictureCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        pictureCreateInput.setId("pictureCreateInput");
        pictureCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.picture}", String.class));
        LengthValidator pictureCreateInputValidator = new LengthValidator();
        pictureCreateInputValidator.setMaximum(25);
        pictureCreateInput.addValidator(pictureCreateInputValidator);
        pictureCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(pictureCreateInput);
        
        Message pictureCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pictureCreateInputMessage.setId("pictureCreateInputMessage");
        pictureCreateInputMessage.setFor("pictureCreateInput");
        pictureCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pictureCreateInputMessage);
        
        OutputLabel jobCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        jobCreateOutput.setFor("jobCreateInput");
        jobCreateOutput.setId("jobCreateOutput");
        jobCreateOutput.setValue("Job:");
        htmlPanelGrid.getChildren().add(jobCreateOutput);
        
        AutoComplete jobCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        jobCreateInput.setId("jobCreateInput");
        jobCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.job}", JJJob.class));
        jobCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeJob}", List.class, new Class[] { String.class }));
        jobCreateInput.setDropdown(true);
        jobCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "job", String.class));
        jobCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{job.name} #{job.description} #{job.creationDate} #{job.updatedDate}", String.class));
        jobCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{job}", JJJob.class));
        jobCreateInput.setConverter(new JJJobConverter());
        jobCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(jobCreateInput);
        
        Message jobCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        jobCreateInputMessage.setId("jobCreateInputMessage");
        jobCreateInputMessage.setFor("jobCreateInput");
        jobCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(jobCreateInputMessage);
        
        OutputLabel accountNonExpiredCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        accountNonExpiredCreateOutput.setFor("accountNonExpiredCreateInput");
        accountNonExpiredCreateOutput.setId("accountNonExpiredCreateOutput");
        accountNonExpiredCreateOutput.setValue("Account Non Expired:");
        htmlPanelGrid.getChildren().add(accountNonExpiredCreateOutput);
        
        SelectBooleanCheckbox accountNonExpiredCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        accountNonExpiredCreateInput.setId("accountNonExpiredCreateInput");
        accountNonExpiredCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.accountNonExpired}", Boolean.class));
        accountNonExpiredCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(accountNonExpiredCreateInput);
        
        Message accountNonExpiredCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        accountNonExpiredCreateInputMessage.setId("accountNonExpiredCreateInputMessage");
        accountNonExpiredCreateInputMessage.setFor("accountNonExpiredCreateInput");
        accountNonExpiredCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(accountNonExpiredCreateInputMessage);
        
        OutputLabel credentialsNonExpiredCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        credentialsNonExpiredCreateOutput.setFor("credentialsNonExpiredCreateInput");
        credentialsNonExpiredCreateOutput.setId("credentialsNonExpiredCreateOutput");
        credentialsNonExpiredCreateOutput.setValue("Credentials Non Expired:");
        htmlPanelGrid.getChildren().add(credentialsNonExpiredCreateOutput);
        
        SelectBooleanCheckbox credentialsNonExpiredCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        credentialsNonExpiredCreateInput.setId("credentialsNonExpiredCreateInput");
        credentialsNonExpiredCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.credentialsNonExpired}", Boolean.class));
        credentialsNonExpiredCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(credentialsNonExpiredCreateInput);
        
        Message credentialsNonExpiredCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        credentialsNonExpiredCreateInputMessage.setId("credentialsNonExpiredCreateInputMessage");
        credentialsNonExpiredCreateInputMessage.setFor("credentialsNonExpiredCreateInput");
        credentialsNonExpiredCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(credentialsNonExpiredCreateInputMessage);
        
        OutputLabel accountNonLockedCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        accountNonLockedCreateOutput.setFor("accountNonLockedCreateInput");
        accountNonLockedCreateOutput.setId("accountNonLockedCreateOutput");
        accountNonLockedCreateOutput.setValue("Account Non Locked:");
        htmlPanelGrid.getChildren().add(accountNonLockedCreateOutput);
        
        SelectBooleanCheckbox accountNonLockedCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        accountNonLockedCreateInput.setId("accountNonLockedCreateInput");
        accountNonLockedCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.accountNonLocked}", Boolean.class));
        accountNonLockedCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(accountNonLockedCreateInput);
        
        Message accountNonLockedCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        accountNonLockedCreateInputMessage.setId("accountNonLockedCreateInputMessage");
        accountNonLockedCreateInputMessage.setFor("accountNonLockedCreateInput");
        accountNonLockedCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(accountNonLockedCreateInputMessage);
        
        OutputLabel lastProjectCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        lastProjectCreateOutput.setFor("lastProjectCreateInput");
        lastProjectCreateOutput.setId("lastProjectCreateOutput");
        lastProjectCreateOutput.setValue("Last Project:");
        htmlPanelGrid.getChildren().add(lastProjectCreateOutput);
        
        AutoComplete lastProjectCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        lastProjectCreateInput.setId("lastProjectCreateInput");
        lastProjectCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.lastProject}", JJProject.class));
        lastProjectCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeLastProject}", List.class, new Class[] { String.class }));
        lastProjectCreateInput.setDropdown(true);
        lastProjectCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "lastProject", String.class));
        lastProjectCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{lastProject.name} #{lastProject.description} #{lastProject.creationDate} #{lastProject.updatedDate}", String.class));
        lastProjectCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{lastProject}", JJProject.class));
        lastProjectCreateInput.setConverter(new JJProjectConverter());
        lastProjectCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(lastProjectCreateInput);
        
        Message lastProjectCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastProjectCreateInputMessage.setId("lastProjectCreateInputMessage");
        lastProjectCreateInputMessage.setFor("lastProjectCreateInput");
        lastProjectCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastProjectCreateInputMessage);
        
        OutputLabel lastProductCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        lastProductCreateOutput.setFor("lastProductCreateInput");
        lastProductCreateOutput.setId("lastProductCreateOutput");
        lastProductCreateOutput.setValue("Last Product:");
        htmlPanelGrid.getChildren().add(lastProductCreateOutput);
        
        AutoComplete lastProductCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        lastProductCreateInput.setId("lastProductCreateInput");
        lastProductCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.lastProduct}", JJProduct.class));
        lastProductCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeLastProduct}", List.class, new Class[] { String.class }));
        lastProductCreateInput.setDropdown(true);
        lastProductCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "lastProduct", String.class));
        lastProductCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{lastProduct.name} #{lastProduct.description} #{lastProduct.creationDate} #{lastProduct.updatedDate}", String.class));
        lastProductCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{lastProduct}", JJProduct.class));
        lastProductCreateInput.setConverter(new JJProductConverter());
        lastProductCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(lastProductCreateInput);
        
        Message lastProductCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastProductCreateInputMessage.setId("lastProductCreateInputMessage");
        lastProductCreateInputMessage.setFor("lastProductCreateInput");
        lastProductCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastProductCreateInputMessage);
        
        OutputLabel lastVersionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        lastVersionCreateOutput.setFor("lastVersionCreateInput");
        lastVersionCreateOutput.setId("lastVersionCreateOutput");
        lastVersionCreateOutput.setValue("Last Version:");
        htmlPanelGrid.getChildren().add(lastVersionCreateOutput);
        
        AutoComplete lastVersionCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        lastVersionCreateInput.setId("lastVersionCreateInput");
        lastVersionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.lastVersion}", JJVersion.class));
        lastVersionCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeLastVersion}", List.class, new Class[] { String.class }));
        lastVersionCreateInput.setDropdown(true);
        lastVersionCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "lastVersion", String.class));
        lastVersionCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{lastVersion.name} #{lastVersion.description} #{lastVersion.creationDate} #{lastVersion.updatedDate}", String.class));
        lastVersionCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{lastVersion}", JJVersion.class));
        lastVersionCreateInput.setConverter(new JJVersionConverter());
        lastVersionCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(lastVersionCreateInput);
        
        Message lastVersionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastVersionCreateInputMessage.setId("lastVersionCreateInputMessage");
        lastVersionCreateInputMessage.setFor("lastVersionCreateInput");
        lastVersionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastVersionCreateInputMessage);
        
        OutputLabel managerCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        managerCreateOutput.setFor("managerCreateInput");
        managerCreateOutput.setId("managerCreateOutput");
        managerCreateOutput.setValue("Manager:");
        htmlPanelGrid.getChildren().add(managerCreateOutput);
        
        AutoComplete managerCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        managerCreateInput.setId("managerCreateInput");
        managerCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.manager}", JJContact.class));
        managerCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeManager}", List.class, new Class[] { String.class }));
        managerCreateInput.setDropdown(true);
        managerCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "manager", String.class));
        managerCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{manager.name} #{manager.description} #{manager.creationDate} #{manager.updatedDate}", String.class));
        managerCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{manager}", JJContact.class));
        managerCreateInput.setConverter(new JJContactConverter());
        managerCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(managerCreateInput);
        
        Message managerCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        managerCreateInputMessage.setId("managerCreateInputMessage");
        managerCreateInputMessage.setFor("managerCreateInput");
        managerCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(managerCreateInputMessage);
        
        OutputLabel companyCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        companyCreateOutput.setFor("companyCreateInput");
        companyCreateOutput.setId("companyCreateOutput");
        companyCreateOutput.setValue("Company:");
        htmlPanelGrid.getChildren().add(companyCreateOutput);
        
        AutoComplete companyCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        companyCreateInput.setId("companyCreateInput");
        companyCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.company}", JJCompany.class));
        companyCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeCompany}", List.class, new Class[] { String.class }));
        companyCreateInput.setDropdown(true);
        companyCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "company", String.class));
        companyCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{company.name} #{company.description} #{company.creationDate} #{company.updatedDate}", String.class));
        companyCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{company}", JJCompany.class));
        companyCreateInput.setConverter(new JJCompanyConverter());
        companyCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(companyCreateInput);
        
        Message companyCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        companyCreateInputMessage.setId("companyCreateInputMessage");
        companyCreateInputMessage.setFor("companyCreateInput");
        companyCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(companyCreateInputMessage);
        
        OutputLabel calendarCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        calendarCreateOutput.setFor("calendarCreateInput");
        calendarCreateOutput.setId("calendarCreateOutput");
        calendarCreateOutput.setValue("Calendar:");
        htmlPanelGrid.getChildren().add(calendarCreateOutput);
        
        InputTextarea calendarCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        calendarCreateInput.setId("calendarCreateInput");
        calendarCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.calendar}", String.class));
        calendarCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(calendarCreateInput);
        
        Message calendarCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        calendarCreateInputMessage.setId("calendarCreateInputMessage");
        calendarCreateInputMessage.setFor("calendarCreateInput");
        calendarCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(calendarCreateInputMessage);
        
        OutputLabel preferenceCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        preferenceCreateOutput.setFor("preferenceCreateInput");
        preferenceCreateOutput.setId("preferenceCreateOutput");
        preferenceCreateOutput.setValue("Preference:");
        htmlPanelGrid.getChildren().add(preferenceCreateOutput);
        
        InputTextarea preferenceCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        preferenceCreateInput.setId("preferenceCreateInput");
        preferenceCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.preference}", String.class));
        preferenceCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(preferenceCreateInput);
        
        Message preferenceCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        preferenceCreateInputMessage.setId("preferenceCreateInputMessage");
        preferenceCreateInputMessage.setFor("preferenceCreateInput");
        preferenceCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(preferenceCreateInputMessage);
        
        HtmlOutputText sprintsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sprintsCreateOutput.setId("sprintsCreateOutput");
        sprintsCreateOutput.setValue("Sprints:");
        htmlPanelGrid.getChildren().add(sprintsCreateOutput);
        
        HtmlOutputText sprintsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sprintsCreateInput.setId("sprintsCreateInput");
        sprintsCreateInput.setValue("This relationship is managed from the JJSprint side");
        htmlPanelGrid.getChildren().add(sprintsCreateInput);
        
        Message sprintsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        sprintsCreateInputMessage.setId("sprintsCreateInputMessage");
        sprintsCreateInputMessage.setFor("sprintsCreateInput");
        sprintsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(sprintsCreateInputMessage);
        
        HtmlOutputText permissionsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        permissionsCreateOutput.setId("permissionsCreateOutput");
        permissionsCreateOutput.setValue("Permissions:");
        htmlPanelGrid.getChildren().add(permissionsCreateOutput);
        
        HtmlOutputText permissionsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        permissionsCreateInput.setId("permissionsCreateInput");
        permissionsCreateInput.setValue("This relationship is managed from the JJPermission side");
        htmlPanelGrid.getChildren().add(permissionsCreateInput);
        
        Message permissionsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        permissionsCreateInputMessage.setId("permissionsCreateInputMessage");
        permissionsCreateInputMessage.setFor("permissionsCreateInput");
        permissionsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(permissionsCreateInputMessage);
        
        HtmlOutputText messagesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesCreateOutput.setId("messagesCreateOutput");
        messagesCreateOutput.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesCreateOutput);
        
        HtmlOutputText messagesCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesCreateInput.setId("messagesCreateInput");
        messagesCreateInput.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesCreateInput);
        
        Message messagesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messagesCreateInputMessage.setId("messagesCreateInputMessage");
        messagesCreateInputMessage.setFor("messagesCreateInput");
        messagesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messagesCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJContactBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputTextarea nameEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMaximum(100);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel descriptionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionEditOutput.setFor("descriptionEditInput");
        descriptionEditOutput.setId("descriptionEditOutput");
        descriptionEditOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionEditOutput);
        
        InputTextarea descriptionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionEditInput.setId("descriptionEditInput");
        descriptionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.description}", String.class));
        descriptionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionEditInput);
        
        Message descriptionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionEditInputMessage.setId("descriptionEditInputMessage");
        descriptionEditInputMessage.setFor("descriptionEditInput");
        descriptionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionEditInputMessage);
        
        OutputLabel creationDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateEditOutput.setFor("creationDateEditInput");
        creationDateEditOutput.setId("creationDateEditOutput");
        creationDateEditOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateEditOutput);
        
        Calendar creationDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateEditInput.setId("creationDateEditInput");
        creationDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.creationDate}", Date.class));
        creationDateEditInput.setNavigator(true);
        creationDateEditInput.setEffect("slideDown");
        creationDateEditInput.setPattern("dd/MM/yyyy");
        creationDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateEditInput);
        
        Message creationDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateEditInputMessage.setId("creationDateEditInputMessage");
        creationDateEditInputMessage.setFor("creationDateEditInput");
        creationDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateEditInputMessage);
        
        OutputLabel createdByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByEditOutput.setFor("createdByEditInput");
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.createdBy}", JJContact.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByEditInput.setConverter(new JJContactConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        OutputLabel updatedDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateEditOutput.setFor("updatedDateEditInput");
        updatedDateEditOutput.setId("updatedDateEditOutput");
        updatedDateEditOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateEditOutput);
        
        Calendar updatedDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateEditInput.setId("updatedDateEditInput");
        updatedDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.updatedDate}", Date.class));
        updatedDateEditInput.setNavigator(true);
        updatedDateEditInput.setEffect("slideDown");
        updatedDateEditInput.setPattern("dd/MM/yyyy");
        updatedDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateEditInput);
        
        Message updatedDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateEditInputMessage.setId("updatedDateEditInputMessage");
        updatedDateEditInputMessage.setFor("updatedDateEditInput");
        updatedDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateEditInputMessage);
        
        OutputLabel updatedByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByEditOutput.setFor("updatedByEditInput");
        updatedByEditOutput.setId("updatedByEditOutput");
        updatedByEditOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByEditOutput);
        
        AutoComplete updatedByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByEditInput.setId("updatedByEditInput");
        updatedByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.updatedBy}", JJContact.class));
        updatedByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByEditInput.setDropdown(true);
        updatedByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByEditInput.setConverter(new JJContactConverter());
        updatedByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByEditInput);
        
        Message updatedByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByEditInputMessage.setId("updatedByEditInputMessage");
        updatedByEditInputMessage.setFor("updatedByEditInput");
        updatedByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByEditInputMessage);
        
        OutputLabel enabledEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledEditOutput.setFor("enabledEditInput");
        enabledEditOutput.setId("enabledEditOutput");
        enabledEditOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledEditOutput);
        
        SelectBooleanCheckbox enabledEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledEditInput.setId("enabledEditInput");
        enabledEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.enabled}", Boolean.class));
        enabledEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledEditInput);
        
        Message enabledEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledEditInputMessage.setId("enabledEditInputMessage");
        enabledEditInputMessage.setFor("enabledEditInput");
        enabledEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledEditInputMessage);
        
        OutputLabel passwordEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        passwordEditOutput.setFor("passwordEditInput");
        passwordEditOutput.setId("passwordEditOutput");
        passwordEditOutput.setValue("Password:");
        htmlPanelGrid.getChildren().add(passwordEditOutput);
        
        InputTextarea passwordEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        passwordEditInput.setId("passwordEditInput");
        passwordEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.password}", String.class));
        LengthValidator passwordEditInputValidator = new LengthValidator();
        passwordEditInputValidator.setMaximum(35);
        passwordEditInput.addValidator(passwordEditInputValidator);
        passwordEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(passwordEditInput);
        
        Message passwordEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        passwordEditInputMessage.setId("passwordEditInputMessage");
        passwordEditInputMessage.setFor("passwordEditInput");
        passwordEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(passwordEditInputMessage);
        
        OutputLabel emailEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        emailEditOutput.setFor("emailEditInput");
        emailEditOutput.setId("emailEditOutput");
        emailEditOutput.setValue("Email:");
        htmlPanelGrid.getChildren().add(emailEditOutput);
        
        InputText emailEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        emailEditInput.setId("emailEditInput");
        emailEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.email}", String.class));
        RegexValidator emailEditInputRegexValidator = new RegexValidator();
        emailEditInputRegexValidator.setPattern("[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,4})");
        emailEditInput.addValidator(emailEditInputRegexValidator);
        emailEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(emailEditInput);
        
        Message emailEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailEditInputMessage.setId("emailEditInputMessage");
        emailEditInputMessage.setFor("emailEditInput");
        emailEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailEditInputMessage);
        
        OutputLabel ldapEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        ldapEditOutput.setFor("ldapEditInput");
        ldapEditOutput.setId("ldapEditOutput");
        ldapEditOutput.setValue("Ldap:");
        htmlPanelGrid.getChildren().add(ldapEditOutput);
        
        Spinner ldapEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        ldapEditInput.setId("ldapEditInput");
        ldapEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.ldap}", Integer.class));
        ldapEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(ldapEditInput);
        
        Message ldapEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        ldapEditInputMessage.setId("ldapEditInputMessage");
        ldapEditInputMessage.setFor("ldapEditInput");
        ldapEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(ldapEditInputMessage);
        
        OutputLabel firstnameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        firstnameEditOutput.setFor("firstnameEditInput");
        firstnameEditOutput.setId("firstnameEditOutput");
        firstnameEditOutput.setValue("Firstname:");
        htmlPanelGrid.getChildren().add(firstnameEditOutput);
        
        InputTextarea firstnameEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        firstnameEditInput.setId("firstnameEditInput");
        firstnameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.firstname}", String.class));
        LengthValidator firstnameEditInputValidator = new LengthValidator();
        firstnameEditInputValidator.setMaximum(100);
        firstnameEditInput.addValidator(firstnameEditInputValidator);
        firstnameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(firstnameEditInput);
        
        Message firstnameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        firstnameEditInputMessage.setId("firstnameEditInputMessage");
        firstnameEditInputMessage.setFor("firstnameEditInput");
        firstnameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(firstnameEditInputMessage);
        
        OutputLabel dateofbirthEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        dateofbirthEditOutput.setFor("dateofbirthEditInput");
        dateofbirthEditOutput.setId("dateofbirthEditOutput");
        dateofbirthEditOutput.setValue("Dateofbirth:");
        htmlPanelGrid.getChildren().add(dateofbirthEditOutput);
        
        Calendar dateofbirthEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        dateofbirthEditInput.setId("dateofbirthEditInput");
        dateofbirthEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.dateofbirth}", Date.class));
        dateofbirthEditInput.setNavigator(true);
        dateofbirthEditInput.setEffect("slideDown");
        dateofbirthEditInput.setPattern("dd/MM/yyyy");
        dateofbirthEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dateofbirthEditInput);
        
        Message dateofbirthEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dateofbirthEditInputMessage.setId("dateofbirthEditInputMessage");
        dateofbirthEditInputMessage.setFor("dateofbirthEditInput");
        dateofbirthEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dateofbirthEditInputMessage);
        
        OutputLabel pictureEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pictureEditOutput.setFor("pictureEditInput");
        pictureEditOutput.setId("pictureEditOutput");
        pictureEditOutput.setValue("Picture:");
        htmlPanelGrid.getChildren().add(pictureEditOutput);
        
        InputText pictureEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        pictureEditInput.setId("pictureEditInput");
        pictureEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.picture}", String.class));
        LengthValidator pictureEditInputValidator = new LengthValidator();
        pictureEditInputValidator.setMaximum(25);
        pictureEditInput.addValidator(pictureEditInputValidator);
        pictureEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(pictureEditInput);
        
        Message pictureEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pictureEditInputMessage.setId("pictureEditInputMessage");
        pictureEditInputMessage.setFor("pictureEditInput");
        pictureEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pictureEditInputMessage);
        
        OutputLabel jobEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        jobEditOutput.setFor("jobEditInput");
        jobEditOutput.setId("jobEditOutput");
        jobEditOutput.setValue("Job:");
        htmlPanelGrid.getChildren().add(jobEditOutput);
        
        AutoComplete jobEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        jobEditInput.setId("jobEditInput");
        jobEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.job}", JJJob.class));
        jobEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeJob}", List.class, new Class[] { String.class }));
        jobEditInput.setDropdown(true);
        jobEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "job", String.class));
        jobEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{job.name} #{job.description} #{job.creationDate} #{job.updatedDate}", String.class));
        jobEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{job}", JJJob.class));
        jobEditInput.setConverter(new JJJobConverter());
        jobEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(jobEditInput);
        
        Message jobEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        jobEditInputMessage.setId("jobEditInputMessage");
        jobEditInputMessage.setFor("jobEditInput");
        jobEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(jobEditInputMessage);
        
        OutputLabel accountNonExpiredEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        accountNonExpiredEditOutput.setFor("accountNonExpiredEditInput");
        accountNonExpiredEditOutput.setId("accountNonExpiredEditOutput");
        accountNonExpiredEditOutput.setValue("Account Non Expired:");
        htmlPanelGrid.getChildren().add(accountNonExpiredEditOutput);
        
        SelectBooleanCheckbox accountNonExpiredEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        accountNonExpiredEditInput.setId("accountNonExpiredEditInput");
        accountNonExpiredEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.accountNonExpired}", Boolean.class));
        accountNonExpiredEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(accountNonExpiredEditInput);
        
        Message accountNonExpiredEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        accountNonExpiredEditInputMessage.setId("accountNonExpiredEditInputMessage");
        accountNonExpiredEditInputMessage.setFor("accountNonExpiredEditInput");
        accountNonExpiredEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(accountNonExpiredEditInputMessage);
        
        OutputLabel credentialsNonExpiredEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        credentialsNonExpiredEditOutput.setFor("credentialsNonExpiredEditInput");
        credentialsNonExpiredEditOutput.setId("credentialsNonExpiredEditOutput");
        credentialsNonExpiredEditOutput.setValue("Credentials Non Expired:");
        htmlPanelGrid.getChildren().add(credentialsNonExpiredEditOutput);
        
        SelectBooleanCheckbox credentialsNonExpiredEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        credentialsNonExpiredEditInput.setId("credentialsNonExpiredEditInput");
        credentialsNonExpiredEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.credentialsNonExpired}", Boolean.class));
        credentialsNonExpiredEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(credentialsNonExpiredEditInput);
        
        Message credentialsNonExpiredEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        credentialsNonExpiredEditInputMessage.setId("credentialsNonExpiredEditInputMessage");
        credentialsNonExpiredEditInputMessage.setFor("credentialsNonExpiredEditInput");
        credentialsNonExpiredEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(credentialsNonExpiredEditInputMessage);
        
        OutputLabel accountNonLockedEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        accountNonLockedEditOutput.setFor("accountNonLockedEditInput");
        accountNonLockedEditOutput.setId("accountNonLockedEditOutput");
        accountNonLockedEditOutput.setValue("Account Non Locked:");
        htmlPanelGrid.getChildren().add(accountNonLockedEditOutput);
        
        SelectBooleanCheckbox accountNonLockedEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        accountNonLockedEditInput.setId("accountNonLockedEditInput");
        accountNonLockedEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.accountNonLocked}", Boolean.class));
        accountNonLockedEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(accountNonLockedEditInput);
        
        Message accountNonLockedEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        accountNonLockedEditInputMessage.setId("accountNonLockedEditInputMessage");
        accountNonLockedEditInputMessage.setFor("accountNonLockedEditInput");
        accountNonLockedEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(accountNonLockedEditInputMessage);
        
        OutputLabel lastProjectEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        lastProjectEditOutput.setFor("lastProjectEditInput");
        lastProjectEditOutput.setId("lastProjectEditOutput");
        lastProjectEditOutput.setValue("Last Project:");
        htmlPanelGrid.getChildren().add(lastProjectEditOutput);
        
        AutoComplete lastProjectEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        lastProjectEditInput.setId("lastProjectEditInput");
        lastProjectEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.lastProject}", JJProject.class));
        lastProjectEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeLastProject}", List.class, new Class[] { String.class }));
        lastProjectEditInput.setDropdown(true);
        lastProjectEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "lastProject", String.class));
        lastProjectEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{lastProject.name} #{lastProject.description} #{lastProject.creationDate} #{lastProject.updatedDate}", String.class));
        lastProjectEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{lastProject}", JJProject.class));
        lastProjectEditInput.setConverter(new JJProjectConverter());
        lastProjectEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(lastProjectEditInput);
        
        Message lastProjectEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastProjectEditInputMessage.setId("lastProjectEditInputMessage");
        lastProjectEditInputMessage.setFor("lastProjectEditInput");
        lastProjectEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastProjectEditInputMessage);
        
        OutputLabel lastProductEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        lastProductEditOutput.setFor("lastProductEditInput");
        lastProductEditOutput.setId("lastProductEditOutput");
        lastProductEditOutput.setValue("Last Product:");
        htmlPanelGrid.getChildren().add(lastProductEditOutput);
        
        AutoComplete lastProductEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        lastProductEditInput.setId("lastProductEditInput");
        lastProductEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.lastProduct}", JJProduct.class));
        lastProductEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeLastProduct}", List.class, new Class[] { String.class }));
        lastProductEditInput.setDropdown(true);
        lastProductEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "lastProduct", String.class));
        lastProductEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{lastProduct.name} #{lastProduct.description} #{lastProduct.creationDate} #{lastProduct.updatedDate}", String.class));
        lastProductEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{lastProduct}", JJProduct.class));
        lastProductEditInput.setConverter(new JJProductConverter());
        lastProductEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(lastProductEditInput);
        
        Message lastProductEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastProductEditInputMessage.setId("lastProductEditInputMessage");
        lastProductEditInputMessage.setFor("lastProductEditInput");
        lastProductEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastProductEditInputMessage);
        
        OutputLabel lastVersionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        lastVersionEditOutput.setFor("lastVersionEditInput");
        lastVersionEditOutput.setId("lastVersionEditOutput");
        lastVersionEditOutput.setValue("Last Version:");
        htmlPanelGrid.getChildren().add(lastVersionEditOutput);
        
        AutoComplete lastVersionEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        lastVersionEditInput.setId("lastVersionEditInput");
        lastVersionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.lastVersion}", JJVersion.class));
        lastVersionEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeLastVersion}", List.class, new Class[] { String.class }));
        lastVersionEditInput.setDropdown(true);
        lastVersionEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "lastVersion", String.class));
        lastVersionEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{lastVersion.name} #{lastVersion.description} #{lastVersion.creationDate} #{lastVersion.updatedDate}", String.class));
        lastVersionEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{lastVersion}", JJVersion.class));
        lastVersionEditInput.setConverter(new JJVersionConverter());
        lastVersionEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(lastVersionEditInput);
        
        Message lastVersionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastVersionEditInputMessage.setId("lastVersionEditInputMessage");
        lastVersionEditInputMessage.setFor("lastVersionEditInput");
        lastVersionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastVersionEditInputMessage);
        
        OutputLabel managerEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        managerEditOutput.setFor("managerEditInput");
        managerEditOutput.setId("managerEditOutput");
        managerEditOutput.setValue("Manager:");
        htmlPanelGrid.getChildren().add(managerEditOutput);
        
        AutoComplete managerEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        managerEditInput.setId("managerEditInput");
        managerEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.manager}", JJContact.class));
        managerEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeManager}", List.class, new Class[] { String.class }));
        managerEditInput.setDropdown(true);
        managerEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "manager", String.class));
        managerEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{manager.name} #{manager.description} #{manager.creationDate} #{manager.updatedDate}", String.class));
        managerEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{manager}", JJContact.class));
        managerEditInput.setConverter(new JJContactConverter());
        managerEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(managerEditInput);
        
        Message managerEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        managerEditInputMessage.setId("managerEditInputMessage");
        managerEditInputMessage.setFor("managerEditInput");
        managerEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(managerEditInputMessage);
        
        OutputLabel companyEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        companyEditOutput.setFor("companyEditInput");
        companyEditOutput.setId("companyEditOutput");
        companyEditOutput.setValue("Company:");
        htmlPanelGrid.getChildren().add(companyEditOutput);
        
        AutoComplete companyEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        companyEditInput.setId("companyEditInput");
        companyEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.company}", JJCompany.class));
        companyEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeCompany}", List.class, new Class[] { String.class }));
        companyEditInput.setDropdown(true);
        companyEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "company", String.class));
        companyEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{company.name} #{company.description} #{company.creationDate} #{company.updatedDate}", String.class));
        companyEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{company}", JJCompany.class));
        companyEditInput.setConverter(new JJCompanyConverter());
        companyEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(companyEditInput);
        
        Message companyEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        companyEditInputMessage.setId("companyEditInputMessage");
        companyEditInputMessage.setFor("companyEditInput");
        companyEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(companyEditInputMessage);
        
        OutputLabel calendarEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        calendarEditOutput.setFor("calendarEditInput");
        calendarEditOutput.setId("calendarEditOutput");
        calendarEditOutput.setValue("Calendar:");
        htmlPanelGrid.getChildren().add(calendarEditOutput);
        
        InputTextarea calendarEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        calendarEditInput.setId("calendarEditInput");
        calendarEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.calendar}", String.class));
        calendarEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(calendarEditInput);
        
        Message calendarEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        calendarEditInputMessage.setId("calendarEditInputMessage");
        calendarEditInputMessage.setFor("calendarEditInput");
        calendarEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(calendarEditInputMessage);
        
        OutputLabel preferenceEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        preferenceEditOutput.setFor("preferenceEditInput");
        preferenceEditOutput.setId("preferenceEditOutput");
        preferenceEditOutput.setValue("Preference:");
        htmlPanelGrid.getChildren().add(preferenceEditOutput);
        
        InputTextarea preferenceEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        preferenceEditInput.setId("preferenceEditInput");
        preferenceEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.preference}", String.class));
        preferenceEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(preferenceEditInput);
        
        Message preferenceEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        preferenceEditInputMessage.setId("preferenceEditInputMessage");
        preferenceEditInputMessage.setFor("preferenceEditInput");
        preferenceEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(preferenceEditInputMessage);
        
        HtmlOutputText sprintsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sprintsEditOutput.setId("sprintsEditOutput");
        sprintsEditOutput.setValue("Sprints:");
        htmlPanelGrid.getChildren().add(sprintsEditOutput);
        
        HtmlOutputText sprintsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sprintsEditInput.setId("sprintsEditInput");
        sprintsEditInput.setValue("This relationship is managed from the JJSprint side");
        htmlPanelGrid.getChildren().add(sprintsEditInput);
        
        Message sprintsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        sprintsEditInputMessage.setId("sprintsEditInputMessage");
        sprintsEditInputMessage.setFor("sprintsEditInput");
        sprintsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(sprintsEditInputMessage);
        
        HtmlOutputText permissionsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        permissionsEditOutput.setId("permissionsEditOutput");
        permissionsEditOutput.setValue("Permissions:");
        htmlPanelGrid.getChildren().add(permissionsEditOutput);
        
        HtmlOutputText permissionsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        permissionsEditInput.setId("permissionsEditInput");
        permissionsEditInput.setValue("This relationship is managed from the JJPermission side");
        htmlPanelGrid.getChildren().add(permissionsEditInput);
        
        Message permissionsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        permissionsEditInputMessage.setId("permissionsEditInputMessage");
        permissionsEditInputMessage.setFor("permissionsEditInput");
        permissionsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(permissionsEditInputMessage);
        
        HtmlOutputText messagesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesEditOutput.setId("messagesEditOutput");
        messagesEditOutput.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesEditOutput);
        
        HtmlOutputText messagesEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesEditInput.setId("messagesEditInput");
        messagesEditInput.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesEditInput);
        
        Message messagesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messagesEditInputMessage.setId("messagesEditInputMessage");
        messagesEditInputMessage.setFor("messagesEditInput");
        messagesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messagesEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJContactBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        InputTextarea nameValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.name}", String.class));
        nameValue.setReadonly(true);
        nameValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText descriptionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionLabel.setId("descriptionLabel");
        descriptionLabel.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionLabel);
        
        InputTextarea descriptionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionValue.setId("descriptionValue");
        descriptionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.description}", String.class));
        descriptionValue.setReadonly(true);
        descriptionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descriptionValue);
        
        HtmlOutputText creationDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateLabel.setId("creationDateLabel");
        creationDateLabel.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateLabel);
        
        HtmlOutputText creationDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.creationDate}", Date.class));
        DateTimeConverter creationDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationDateValueConverter.setPattern("dd/MM/yyyy");
        creationDateValue.setConverter(creationDateValueConverter);
        htmlPanelGrid.getChildren().add(creationDateValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.createdBy}", JJContact.class));
        createdByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        HtmlOutputText updatedDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateLabel.setId("updatedDateLabel");
        updatedDateLabel.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateLabel);
        
        HtmlOutputText updatedDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.updatedDate}", Date.class));
        DateTimeConverter updatedDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updatedDateValueConverter.setPattern("dd/MM/yyyy");
        updatedDateValue.setConverter(updatedDateValueConverter);
        htmlPanelGrid.getChildren().add(updatedDateValue);
        
        HtmlOutputText updatedByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByLabel.setId("updatedByLabel");
        updatedByLabel.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByLabel);
        
        HtmlOutputText updatedByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.updatedBy}", JJContact.class));
        updatedByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(updatedByValue);
        
        HtmlOutputText enabledLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledLabel.setId("enabledLabel");
        enabledLabel.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledLabel);
        
        HtmlOutputText enabledValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.enabled}", String.class));
        htmlPanelGrid.getChildren().add(enabledValue);
        
        HtmlOutputText passwordLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordLabel.setId("passwordLabel");
        passwordLabel.setValue("Password:");
        htmlPanelGrid.getChildren().add(passwordLabel);
        
        InputTextarea passwordValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        passwordValue.setId("passwordValue");
        passwordValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.password}", String.class));
        passwordValue.setReadonly(true);
        passwordValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(passwordValue);
        
        HtmlOutputText emailLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailLabel.setId("emailLabel");
        emailLabel.setValue("Email:");
        htmlPanelGrid.getChildren().add(emailLabel);
        
        HtmlOutputText emailValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailValue.setId("emailValue");
        emailValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.email}", String.class));
        htmlPanelGrid.getChildren().add(emailValue);
        
        HtmlOutputText ldapLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ldapLabel.setId("ldapLabel");
        ldapLabel.setValue("Ldap:");
        htmlPanelGrid.getChildren().add(ldapLabel);
        
        HtmlOutputText ldapValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ldapValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.ldap}", String.class));
        htmlPanelGrid.getChildren().add(ldapValue);
        
        HtmlOutputText firstnameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        firstnameLabel.setId("firstnameLabel");
        firstnameLabel.setValue("Firstname:");
        htmlPanelGrid.getChildren().add(firstnameLabel);
        
        InputTextarea firstnameValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        firstnameValue.setId("firstnameValue");
        firstnameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.firstname}", String.class));
        firstnameValue.setReadonly(true);
        firstnameValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(firstnameValue);
        
        HtmlOutputText dateofbirthLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dateofbirthLabel.setId("dateofbirthLabel");
        dateofbirthLabel.setValue("Dateofbirth:");
        htmlPanelGrid.getChildren().add(dateofbirthLabel);
        
        HtmlOutputText dateofbirthValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dateofbirthValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.dateofbirth}", Date.class));
        DateTimeConverter dateofbirthValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        dateofbirthValueConverter.setPattern("dd/MM/yyyy");
        dateofbirthValue.setConverter(dateofbirthValueConverter);
        htmlPanelGrid.getChildren().add(dateofbirthValue);
        
        HtmlOutputText pictureLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pictureLabel.setId("pictureLabel");
        pictureLabel.setValue("Picture:");
        htmlPanelGrid.getChildren().add(pictureLabel);
        
        HtmlOutputText pictureValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pictureValue.setId("pictureValue");
        pictureValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.picture}", String.class));
        htmlPanelGrid.getChildren().add(pictureValue);
        
        HtmlOutputText jobLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        jobLabel.setId("jobLabel");
        jobLabel.setValue("Job:");
        htmlPanelGrid.getChildren().add(jobLabel);
        
        HtmlOutputText jobValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        jobValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.job}", JJJob.class));
        jobValue.setConverter(new JJJobConverter());
        htmlPanelGrid.getChildren().add(jobValue);
        
        HtmlOutputText accountNonExpiredLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        accountNonExpiredLabel.setId("accountNonExpiredLabel");
        accountNonExpiredLabel.setValue("Account Non Expired:");
        htmlPanelGrid.getChildren().add(accountNonExpiredLabel);
        
        HtmlOutputText accountNonExpiredValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        accountNonExpiredValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.accountNonExpired}", String.class));
        htmlPanelGrid.getChildren().add(accountNonExpiredValue);
        
        HtmlOutputText credentialsNonExpiredLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        credentialsNonExpiredLabel.setId("credentialsNonExpiredLabel");
        credentialsNonExpiredLabel.setValue("Credentials Non Expired:");
        htmlPanelGrid.getChildren().add(credentialsNonExpiredLabel);
        
        HtmlOutputText credentialsNonExpiredValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        credentialsNonExpiredValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.credentialsNonExpired}", String.class));
        htmlPanelGrid.getChildren().add(credentialsNonExpiredValue);
        
        HtmlOutputText accountNonLockedLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        accountNonLockedLabel.setId("accountNonLockedLabel");
        accountNonLockedLabel.setValue("Account Non Locked:");
        htmlPanelGrid.getChildren().add(accountNonLockedLabel);
        
        HtmlOutputText accountNonLockedValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        accountNonLockedValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.accountNonLocked}", String.class));
        htmlPanelGrid.getChildren().add(accountNonLockedValue);
        
        HtmlOutputText lastProjectLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastProjectLabel.setId("lastProjectLabel");
        lastProjectLabel.setValue("Last Project:");
        htmlPanelGrid.getChildren().add(lastProjectLabel);
        
        HtmlOutputText lastProjectValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastProjectValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.lastProject}", JJProject.class));
        lastProjectValue.setConverter(new JJProjectConverter());
        htmlPanelGrid.getChildren().add(lastProjectValue);
        
        HtmlOutputText lastProductLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastProductLabel.setId("lastProductLabel");
        lastProductLabel.setValue("Last Product:");
        htmlPanelGrid.getChildren().add(lastProductLabel);
        
        HtmlOutputText lastProductValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastProductValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.lastProduct}", JJProduct.class));
        lastProductValue.setConverter(new JJProductConverter());
        htmlPanelGrid.getChildren().add(lastProductValue);
        
        HtmlOutputText lastVersionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastVersionLabel.setId("lastVersionLabel");
        lastVersionLabel.setValue("Last Version:");
        htmlPanelGrid.getChildren().add(lastVersionLabel);
        
        HtmlOutputText lastVersionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastVersionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.lastVersion}", JJVersion.class));
        lastVersionValue.setConverter(new JJVersionConverter());
        htmlPanelGrid.getChildren().add(lastVersionValue);
        
        HtmlOutputText managerLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        managerLabel.setId("managerLabel");
        managerLabel.setValue("Manager:");
        htmlPanelGrid.getChildren().add(managerLabel);
        
        HtmlOutputText managerValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        managerValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.manager}", JJContact.class));
        managerValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(managerValue);
        
        HtmlOutputText companyLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        companyLabel.setId("companyLabel");
        companyLabel.setValue("Company:");
        htmlPanelGrid.getChildren().add(companyLabel);
        
        HtmlOutputText companyValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        companyValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.company}", JJCompany.class));
        companyValue.setConverter(new JJCompanyConverter());
        htmlPanelGrid.getChildren().add(companyValue);
        
        HtmlOutputText calendarLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        calendarLabel.setId("calendarLabel");
        calendarLabel.setValue("Calendar:");
        htmlPanelGrid.getChildren().add(calendarLabel);
        
        InputTextarea calendarValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        calendarValue.setId("calendarValue");
        calendarValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.calendar}", String.class));
        calendarValue.setReadonly(true);
        calendarValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(calendarValue);
        
        HtmlOutputText preferenceLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        preferenceLabel.setId("preferenceLabel");
        preferenceLabel.setValue("Preference:");
        htmlPanelGrid.getChildren().add(preferenceLabel);
        
        InputTextarea preferenceValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        preferenceValue.setId("preferenceValue");
        preferenceValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.preference}", String.class));
        preferenceValue.setReadonly(true);
        preferenceValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(preferenceValue);
        
        HtmlOutputText sprintsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sprintsLabel.setId("sprintsLabel");
        sprintsLabel.setValue("Sprints:");
        htmlPanelGrid.getChildren().add(sprintsLabel);
        
        HtmlOutputText sprintsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sprintsValue.setId("sprintsValue");
        sprintsValue.setValue("This relationship is managed from the JJSprint side");
        htmlPanelGrid.getChildren().add(sprintsValue);
        
        HtmlOutputText permissionsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        permissionsLabel.setId("permissionsLabel");
        permissionsLabel.setValue("Permissions:");
        htmlPanelGrid.getChildren().add(permissionsLabel);
        
        HtmlOutputText permissionsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        permissionsValue.setId("permissionsValue");
        permissionsValue.setValue("This relationship is managed from the JJPermission side");
        htmlPanelGrid.getChildren().add(permissionsValue);
        
        HtmlOutputText messagesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesLabel.setId("messagesLabel");
        messagesLabel.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesLabel);
        
        HtmlOutputText messagesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesValue.setId("messagesValue");
        messagesValue.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesValue);
        
        return htmlPanelGrid;
    }
    
    public JJContact JJContactBean.getJJContact_() {
        if (JJContact_ == null) {
            JJContact_ = new JJContact();
        }
        return JJContact_;
    }
    
    public void JJContactBean.setJJContact_(JJContact JJContact_) {
        this.JJContact_ = JJContact_;
    }
    
    public List<JJContact> JJContactBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJContactBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJJob> JJContactBean.completeJob(String query) {
        List<JJJob> suggestions = new ArrayList<JJJob>();
        for (JJJob jJJob : jJJobService.findAllJJJobs()) {
            String jJJobStr = String.valueOf(jJJob.getName() +  " "  + jJJob.getDescription() +  " "  + jJJob.getCreationDate() +  " "  + jJJob.getUpdatedDate());
            if (jJJobStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJJob);
            }
        }
        return suggestions;
    }
    
    public List<JJProject> JJContactBean.completeLastProject(String query) {
        List<JJProject> suggestions = new ArrayList<JJProject>();
        for (JJProject jJProject : jJProjectService.findAllJJProjects()) {
            String jJProjectStr = String.valueOf(jJProject.getName() +  " "  + jJProject.getDescription() +  " "  + jJProject.getCreationDate() +  " "  + jJProject.getUpdatedDate());
            if (jJProjectStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJProject);
            }
        }
        return suggestions;
    }
    
    public List<JJProduct> JJContactBean.completeLastProduct(String query) {
        List<JJProduct> suggestions = new ArrayList<JJProduct>();
        for (JJProduct jJProduct : jJProductService.findAllJJProducts()) {
            String jJProductStr = String.valueOf(jJProduct.getName() +  " "  + jJProduct.getDescription() +  " "  + jJProduct.getCreationDate() +  " "  + jJProduct.getUpdatedDate());
            if (jJProductStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJProduct);
            }
        }
        return suggestions;
    }
    
    public List<JJVersion> JJContactBean.completeLastVersion(String query) {
        List<JJVersion> suggestions = new ArrayList<JJVersion>();
        for (JJVersion jJVersion : jJVersionService.findAllJJVersions()) {
            String jJVersionStr = String.valueOf(jJVersion.getName() +  " "  + jJVersion.getDescription() +  " "  + jJVersion.getCreationDate() +  " "  + jJVersion.getUpdatedDate());
            if (jJVersionStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJVersion);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJContactBean.completeManager(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJCompany> JJContactBean.completeCompany(String query) {
        List<JJCompany> suggestions = new ArrayList<JJCompany>();
        for (JJCompany jJCompany : jJCompanyService.findAllJJCompanys()) {
            String jJCompanyStr = String.valueOf(jJCompany.getName() +  " "  + jJCompany.getDescription() +  " "  + jJCompany.getCreationDate() +  " "  + jJCompany.getUpdatedDate());
            if (jJCompanyStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJCompany);
            }
        }
        return suggestions;
    }
    
    public List<JJSprint> JJContactBean.getSelectedSprints() {
        return selectedSprints;
    }
    
    public void JJContactBean.setSelectedSprints(List<JJSprint> selectedSprints) {
        if (selectedSprints != null) {
            JJContact_.setSprints(new HashSet<JJSprint>(selectedSprints));
        }
        this.selectedSprints = selectedSprints;
    }
    
    public List<JJPermission> JJContactBean.getSelectedPermissions() {
        return selectedPermissions;
    }
    
    public void JJContactBean.setSelectedPermissions(List<JJPermission> selectedPermissions) {
        if (selectedPermissions != null) {
            JJContact_.setPermissions(new HashSet<JJPermission>(selectedPermissions));
        }
        this.selectedPermissions = selectedPermissions;
    }
    
    public List<JJMessage> JJContactBean.getSelectedMessages() {
        return selectedMessages;
    }
    
    public void JJContactBean.setSelectedMessages(List<JJMessage> selectedMessages) {
        if (selectedMessages != null) {
            JJContact_.setMessages(new HashSet<JJMessage>(selectedMessages));
        }
        this.selectedMessages = selectedMessages;
    }
    
    public String JJContactBean.onEdit() {
        if (JJContact_ != null && JJContact_.getSprints() != null) {
            selectedSprints = new ArrayList<JJSprint>(JJContact_.getSprints());
        }
        if (JJContact_ != null && JJContact_.getPermissions() != null) {
            selectedPermissions = new ArrayList<JJPermission>(JJContact_.getPermissions());
        }
        if (JJContact_ != null && JJContact_.getMessages() != null) {
            selectedMessages = new ArrayList<JJMessage>(JJContact_.getMessages());
        }
        return null;
    }
    
    public boolean JJContactBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJContactBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJContactBean.displayList() {
        createDialogVisible = false;
        findAllJJContacts();
        return "JJContact_";
    }
    
    public String JJContactBean.displayCreateDialog() {
        JJContact_ = new JJContact();
        createDialogVisible = true;
        return "JJContact_";
    }
    
    public String JJContactBean.persist() {
        String message = "";
        if (JJContact_.getId() != null) {
            jJContactService.updateJJContact(JJContact_);
            message = "message_successfully_updated";
        } else {
            jJContactService.saveJJContact(JJContact_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJContact");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJContacts();
    }
    
    public String JJContactBean.delete() {
        jJContactService.deleteJJContact(JJContact_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJContact");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJContacts();
    }
    
    public void JJContactBean.reset() {
        JJContact_ = null;
        selectedSprints = null;
        selectedPermissions = null;
        selectedMessages = null;
        createDialogVisible = false;
    }
    
    public void JJContactBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

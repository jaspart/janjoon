// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import com.starit.janjoonweb.domain.JJBuild;
import com.starit.janjoonweb.domain.JJContact;
import com.starit.janjoonweb.domain.JJContactService;
import com.starit.janjoonweb.domain.JJProduct;
import com.starit.janjoonweb.domain.JJProductService;
import com.starit.janjoonweb.domain.JJTask;
import com.starit.janjoonweb.domain.JJVersion;
import com.starit.janjoonweb.domain.JJVersionService;
import com.starit.janjoonweb.ui.mb.JJVersionBean;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJVersionBean_Roo_ManagedBean {
    
    declare @type: JJVersionBean: @ManagedBean(name = "jJVersionBean");
    
    declare @type: JJVersionBean: @SessionScoped;
    
    @Autowired
    JJVersionService JJVersionBean.jJVersionService;
    
    @Autowired
    JJContactService JJVersionBean.jJContactService;
    
    @Autowired
    JJProductService JJVersionBean.jJProductService;
    
    private String JJVersionBean.name = "JJVersions";
    
    private JJVersion JJVersionBean.JJVersion_;
    
    private List<JJVersion> JJVersionBean.allJJVersions;
    
    private boolean JJVersionBean.dataVisible = false;
    
    private List<String> JJVersionBean.columns;
    
    private HtmlPanelGrid JJVersionBean.createPanelGrid;
    
    private HtmlPanelGrid JJVersionBean.editPanelGrid;
    
    private HtmlPanelGrid JJVersionBean.viewPanelGrid;
    
    private boolean JJVersionBean.createDialogVisible = false;
    
    private List<JJTask> JJVersionBean.selectedTasks;
    
    private List<JJBuild> JJVersionBean.selectedBuilds;
    
    @PostConstruct
    public void JJVersionBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
    }
    
    public String JJVersionBean.getName() {
        return name;
    }
    
    public List<String> JJVersionBean.getColumns() {
        return columns;
    }
    
    public List<JJVersion> JJVersionBean.getAllJJVersions() {
        return allJJVersions;
    }
    
    public void JJVersionBean.setAllJJVersions(List<JJVersion> allJJVersions) {
        this.allJJVersions = allJJVersions;
    }
    
    public String JJVersionBean.findAllJJVersions() {
        allJJVersions = jJVersionService.findAllJJVersions();
        dataVisible = !allJJVersions.isEmpty();
        return null;
    }
    
    public boolean JJVersionBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJVersionBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJVersionBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJVersionBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJVersionBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJVersionBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJVersionBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJVersionBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public JJVersion JJVersionBean.getJJVersion_() {
        if (JJVersion_ == null) {
            JJVersion_ = new JJVersion();
        }
        return JJVersion_;
    }
    
    public void JJVersionBean.setJJVersion_(JJVersion JJVersion_) {
        this.JJVersion_ = JJVersion_;
    }
    
    public List<JJContact> JJVersionBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJVersionBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJProduct> JJVersionBean.completeProduct(String query) {
        List<JJProduct> suggestions = new ArrayList<JJProduct>();
        for (JJProduct jJProduct : jJProductService.findAllJJProducts()) {
            String jJProductStr = String.valueOf(jJProduct.getName() +  " "  + jJProduct.getDescription() +  " "  + jJProduct.getCreationDate() +  " "  + jJProduct.getUpdatedDate());
            if (jJProductStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJProduct);
            }
        }
        return suggestions;
    }
    
    public List<JJTask> JJVersionBean.getSelectedTasks() {
        return selectedTasks;
    }
    
    public void JJVersionBean.setSelectedTasks(List<JJTask> selectedTasks) {
        if (selectedTasks != null) {
            JJVersion_.setTasks(new HashSet<JJTask>(selectedTasks));
        }
        this.selectedTasks = selectedTasks;
    }
    
    public List<JJBuild> JJVersionBean.getSelectedBuilds() {
        return selectedBuilds;
    }
    
    public void JJVersionBean.setSelectedBuilds(List<JJBuild> selectedBuilds) {
        if (selectedBuilds != null) {
            JJVersion_.setBuilds(new HashSet<JJBuild>(selectedBuilds));
        }
        this.selectedBuilds = selectedBuilds;
    }
    
    public String JJVersionBean.onEdit() {
        if (JJVersion_ != null && JJVersion_.getTasks() != null) {
            selectedTasks = new ArrayList<JJTask>(JJVersion_.getTasks());
        }
        if (JJVersion_ != null && JJVersion_.getBuilds() != null) {
            selectedBuilds = new ArrayList<JJBuild>(JJVersion_.getBuilds());
        }
        return null;
    }
    
    public boolean JJVersionBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJVersionBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJVersionBean.displayList() {
        createDialogVisible = false;
        findAllJJVersions();
        return "JJVersion_";
    }
    
    public String JJVersionBean.displayCreateDialog() {
        JJVersion_ = new JJVersion();
        createDialogVisible = true;
        return "JJVersion_";
    }
    
    public String JJVersionBean.persist() {
        String message = "";
        if (JJVersion_.getId() != null) {
            jJVersionService.updateJJVersion(JJVersion_);
            message = "message_successfully_updated";
        } else {
            jJVersionService.saveJJVersion(JJVersion_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJVersion");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJVersions();
    }
    
    public String JJVersionBean.delete() {
        jJVersionService.deleteJJVersion(JJVersion_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJVersion");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJVersions();
    }
    
    public void JJVersionBean.reset() {
        JJVersion_ = null;
        selectedTasks = null;
        selectedBuilds = null;
        createDialogVisible = false;
    }
    
    public void JJVersionBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

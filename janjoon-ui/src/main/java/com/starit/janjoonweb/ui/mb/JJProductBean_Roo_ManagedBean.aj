// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import com.starit.janjoonweb.domain.JJContact;
import com.starit.janjoonweb.domain.JJContactService;
import com.starit.janjoonweb.domain.JJProduct;
import com.starit.janjoonweb.domain.JJProductService;
import com.starit.janjoonweb.domain.JJVersion;
import com.starit.janjoonweb.ui.mb.JJProductBean;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJProductBean_Roo_ManagedBean {
    
    declare @type: JJProductBean: @ManagedBean(name = "jJProductBean");
    
    declare @type: JJProductBean: @SessionScoped;
    
    @Autowired
    JJProductService JJProductBean.jJProductService;
    
    @Autowired
    JJContactService JJProductBean.jJContactService;
    
    private String JJProductBean.name = "JJProducts";
    
    private JJProduct JJProductBean.JJProduct_;
    
    private List<JJProduct> JJProductBean.allJJProducts;
    
    private boolean JJProductBean.dataVisible = false;
    
    private List<String> JJProductBean.columns;
    
    private HtmlPanelGrid JJProductBean.createPanelGrid;
    
    private HtmlPanelGrid JJProductBean.editPanelGrid;
    
    private HtmlPanelGrid JJProductBean.viewPanelGrid;
    
    private boolean JJProductBean.createDialogVisible = false;
    
    private List<JJVersion> JJProductBean.selectedVersions;
    
    @PostConstruct
    public void JJProductBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
        columns.add("extname");
    }
    
    public String JJProductBean.getName() {
        return name;
    }
    
    public List<String> JJProductBean.getColumns() {
        return columns;
    }
    
    public List<JJProduct> JJProductBean.getAllJJProducts() {
        return allJJProducts;
    }
    
    public void JJProductBean.setAllJJProducts(List<JJProduct> allJJProducts) {
        this.allJJProducts = allJJProducts;
    }
    
    public String JJProductBean.findAllJJProducts() {
        allJJProducts = jJProductService.findAllJJProducts();
        dataVisible = !allJJProducts.isEmpty();
        return null;
    }
    
    public boolean JJProductBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJProductBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJProductBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJProductBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJProductBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJProductBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJProductBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJProductBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public JJProduct JJProductBean.getJJProduct_() {
        if (JJProduct_ == null) {
            JJProduct_ = new JJProduct();
        }
        return JJProduct_;
    }
    
    public void JJProductBean.setJJProduct_(JJProduct JJProduct_) {
        this.JJProduct_ = JJProduct_;
    }
    
    public List<JJContact> JJProductBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJProductBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJVersion> JJProductBean.getSelectedVersions() {
        return selectedVersions;
    }
    
    public void JJProductBean.setSelectedVersions(List<JJVersion> selectedVersions) {
        if (selectedVersions != null) {
            JJProduct_.setVersions(new HashSet<JJVersion>(selectedVersions));
        }
        this.selectedVersions = selectedVersions;
    }
    
    public List<JJContact> JJProductBean.completeManager(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public String JJProductBean.onEdit() {
        if (JJProduct_ != null && JJProduct_.getVersions() != null) {
            selectedVersions = new ArrayList<JJVersion>(JJProduct_.getVersions());
        }
        return null;
    }
    
    public boolean JJProductBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJProductBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJProductBean.displayList() {
        createDialogVisible = false;
        findAllJJProducts();
        return "JJProduct_";
    }
    
    public String JJProductBean.displayCreateDialog() {
        JJProduct_ = new JJProduct();
        createDialogVisible = true;
        return "JJProduct_";
    }
    
    public String JJProductBean.persist() {
        String message = "";
        if (JJProduct_.getId() != null) {
            jJProductService.updateJJProduct(JJProduct_);
            message = "message_successfully_updated";
        } else {
            jJProductService.saveJJProduct(JJProduct_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJProduct");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJProducts();
    }
    
    public String JJProductBean.delete() {
        jJProductService.deleteJJProduct(JJProduct_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJProduct");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJProducts();
    }
    
    public void JJProductBean.reset() {
        JJProduct_ = null;
        selectedVersions = null;
        createDialogVisible = false;
    }
    
    public void JJProductBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

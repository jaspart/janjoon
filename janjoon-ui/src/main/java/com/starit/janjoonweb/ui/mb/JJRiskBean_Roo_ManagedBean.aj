// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import com.starit.janjoonweb.domain.JJBug;
import com.starit.janjoonweb.domain.JJContact;
import com.starit.janjoonweb.domain.JJContactService;
import com.starit.janjoonweb.domain.JJProduct;
import com.starit.janjoonweb.domain.JJProject;
import com.starit.janjoonweb.domain.JJRequirement;
import com.starit.janjoonweb.domain.JJRisk;
import com.starit.janjoonweb.domain.JJRiskService;
import com.starit.janjoonweb.domain.JJStatus;
import com.starit.janjoonweb.domain.JJTestcase;
import com.starit.janjoonweb.ui.mb.JJRiskBean;
import com.starit.janjoonweb.ui.mb.converter.JJBugConverter;
import com.starit.janjoonweb.ui.mb.converter.JJContactConverter;
import com.starit.janjoonweb.ui.mb.converter.JJProductConverter;
import com.starit.janjoonweb.ui.mb.converter.JJProjectConverter;
import com.starit.janjoonweb.ui.mb.converter.JJRequirementConverter;
import com.starit.janjoonweb.ui.mb.converter.JJStatusConverter;
import com.starit.janjoonweb.ui.mb.converter.JJTestcaseConverter;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import javax.faces.validator.LongRangeValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJRiskBean_Roo_ManagedBean {
    
    declare @type: JJRiskBean: @ManagedBean(name = "jJRiskBean");
    
    declare @type: JJRiskBean: @SessionScoped;
    
    @Autowired
    JJRiskService JJRiskBean.jJRiskService;
    
    @Autowired
    JJContactService JJRiskBean.jJContactService;
    
    private String JJRiskBean.name = "JJRisks";
    
    private List<JJRisk> JJRiskBean.allJJRisks;
    
    private boolean JJRiskBean.dataVisible = false;
    
    private List<String> JJRiskBean.columns;
    
    private HtmlPanelGrid JJRiskBean.createPanelGrid;
    
    private HtmlPanelGrid JJRiskBean.editPanelGrid;
    
    private HtmlPanelGrid JJRiskBean.viewPanelGrid;
    
    private boolean JJRiskBean.createDialogVisible = false;
    
    private List<JJRequirement> JJRiskBean.selectedRequirements;
    
    private List<JJBug> JJRiskBean.selectedBugs;
    
    private List<JJTestcase> JJRiskBean.selectedTestcases;
    
    @PostConstruct
    public void JJRiskBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
        columns.add("probability");
    }
    
    public String JJRiskBean.getName() {
        return name;
    }
    
    public List<String> JJRiskBean.getColumns() {
        return columns;
    }
    
    public List<JJRisk> JJRiskBean.getAllJJRisks() {
        return allJJRisks;
    }
    
    public void JJRiskBean.setAllJJRisks(List<JJRisk> allJJRisks) {
        this.allJJRisks = allJJRisks;
    }
    
    public String JJRiskBean.findAllJJRisks() {
        allJJRisks = jJRiskService.findAllJJRisks();
        dataVisible = !allJJRisks.isEmpty();
        return null;
    }
    
    public boolean JJRiskBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJRiskBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJRiskBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJRiskBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJRiskBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJRiskBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJRiskBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJRiskBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJRiskBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputTextarea nameCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMaximum(100);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel descriptionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionCreateOutput.setFor("descriptionCreateInput");
        descriptionCreateOutput.setId("descriptionCreateOutput");
        descriptionCreateOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionCreateOutput);
        
        InputTextarea descriptionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionCreateInput.setId("descriptionCreateInput");
        descriptionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.description}", String.class));
        descriptionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionCreateInput);
        
        Message descriptionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionCreateInputMessage.setId("descriptionCreateInputMessage");
        descriptionCreateInputMessage.setFor("descriptionCreateInput");
        descriptionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionCreateInputMessage);
        
        OutputLabel creationDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateCreateOutput.setFor("creationDateCreateInput");
        creationDateCreateOutput.setId("creationDateCreateOutput");
        creationDateCreateOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateCreateOutput);
        
        Calendar creationDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateCreateInput.setId("creationDateCreateInput");
        creationDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.creationDate}", Date.class));
        creationDateCreateInput.setNavigator(true);
        creationDateCreateInput.setEffect("slideDown");
        creationDateCreateInput.setPattern("dd/MM/yyyy");
        creationDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateCreateInput);
        
        Message creationDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateCreateInputMessage.setId("creationDateCreateInputMessage");
        creationDateCreateInputMessage.setFor("creationDateCreateInput");
        creationDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateCreateInputMessage);
        
        OutputLabel createdByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByCreateOutput.setFor("createdByCreateInput");
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.createdBy}", JJContact.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRiskBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByCreateInput.setConverter(new JJContactConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        OutputLabel updatedDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateCreateOutput.setFor("updatedDateCreateInput");
        updatedDateCreateOutput.setId("updatedDateCreateOutput");
        updatedDateCreateOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateCreateOutput);
        
        Calendar updatedDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateCreateInput.setId("updatedDateCreateInput");
        updatedDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.updatedDate}", Date.class));
        updatedDateCreateInput.setNavigator(true);
        updatedDateCreateInput.setEffect("slideDown");
        updatedDateCreateInput.setPattern("dd/MM/yyyy");
        updatedDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateCreateInput);
        
        Message updatedDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateCreateInputMessage.setId("updatedDateCreateInputMessage");
        updatedDateCreateInputMessage.setFor("updatedDateCreateInput");
        updatedDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateCreateInputMessage);
        
        OutputLabel updatedByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByCreateOutput.setFor("updatedByCreateInput");
        updatedByCreateOutput.setId("updatedByCreateOutput");
        updatedByCreateOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByCreateOutput);
        
        AutoComplete updatedByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByCreateInput.setId("updatedByCreateInput");
        updatedByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.updatedBy}", JJContact.class));
        updatedByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRiskBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByCreateInput.setDropdown(true);
        updatedByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByCreateInput.setConverter(new JJContactConverter());
        updatedByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByCreateInput);
        
        Message updatedByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByCreateInputMessage.setId("updatedByCreateInputMessage");
        updatedByCreateInputMessage.setFor("updatedByCreateInput");
        updatedByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByCreateInputMessage);
        
        OutputLabel enabledCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledCreateOutput.setFor("enabledCreateInput");
        enabledCreateOutput.setId("enabledCreateOutput");
        enabledCreateOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledCreateOutput);
        
        SelectBooleanCheckbox enabledCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledCreateInput.setId("enabledCreateInput");
        enabledCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.enabled}", Boolean.class));
        enabledCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledCreateInput);
        
        Message enabledCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledCreateInputMessage.setId("enabledCreateInputMessage");
        enabledCreateInputMessage.setFor("enabledCreateInput");
        enabledCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledCreateInputMessage);
        
        OutputLabel projectCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        projectCreateOutput.setFor("projectCreateInput");
        projectCreateOutput.setId("projectCreateOutput");
        projectCreateOutput.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectCreateOutput);
        
        AutoComplete projectCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        projectCreateInput.setId("projectCreateInput");
        projectCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.project}", JJProject.class));
        projectCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRiskBean.completeProject}", List.class, new Class[] { String.class }));
        projectCreateInput.setDropdown(true);
        projectCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "project", String.class));
        projectCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{project.name} #{project.description} #{project.creationDate} #{project.updatedDate}", String.class));
        projectCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{project}", JJProject.class));
        projectCreateInput.setConverter(new JJProjectConverter());
        projectCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(projectCreateInput);
        
        Message projectCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectCreateInputMessage.setId("projectCreateInputMessage");
        projectCreateInputMessage.setFor("projectCreateInput");
        projectCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectCreateInputMessage);
        
        OutputLabel productCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        productCreateOutput.setFor("productCreateInput");
        productCreateOutput.setId("productCreateOutput");
        productCreateOutput.setValue("Product:");
        htmlPanelGrid.getChildren().add(productCreateOutput);
        
        AutoComplete productCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        productCreateInput.setId("productCreateInput");
        productCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.product}", JJProduct.class));
        productCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRiskBean.completeProduct}", List.class, new Class[] { String.class }));
        productCreateInput.setDropdown(true);
        productCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "product", String.class));
        productCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{product.name} #{product.description} #{product.creationDate} #{product.updatedDate}", String.class));
        productCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{product}", JJProduct.class));
        productCreateInput.setConverter(new JJProductConverter());
        productCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(productCreateInput);
        
        Message productCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productCreateInputMessage.setId("productCreateInputMessage");
        productCreateInputMessage.setFor("productCreateInput");
        productCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productCreateInputMessage);
        
        OutputLabel statusCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusCreateOutput.setFor("statusCreateInput");
        statusCreateOutput.setId("statusCreateOutput");
        statusCreateOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusCreateOutput);
        
        AutoComplete statusCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        statusCreateInput.setId("statusCreateInput");
        statusCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.status}", JJStatus.class));
        statusCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRiskBean.completeStatus}", List.class, new Class[] { String.class }));
        statusCreateInput.setDropdown(true);
        statusCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "status", String.class));
        statusCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{status.name} #{status.description} #{status.creationDate} #{status.updatedDate}", String.class));
        statusCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{status}", JJStatus.class));
        statusCreateInput.setConverter(new JJStatusConverter());
        statusCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(statusCreateInput);
        
        Message statusCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusCreateInputMessage.setId("statusCreateInputMessage");
        statusCreateInputMessage.setFor("statusCreateInput");
        statusCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusCreateInputMessage);
        
        OutputLabel probabilityCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        probabilityCreateOutput.setFor("probabilityCreateInput");
        probabilityCreateOutput.setId("probabilityCreateOutput");
        probabilityCreateOutput.setValue("Probability:");
        htmlPanelGrid.getChildren().add(probabilityCreateOutput);
        
        Spinner probabilityCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        probabilityCreateInput.setId("probabilityCreateInput");
        probabilityCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.probability}", Integer.class));
        probabilityCreateInput.setRequired(true);
        probabilityCreateInput.setMin(0.0);
        probabilityCreateInput.setMax(100.0);
        LongRangeValidator probabilityCreateInputValidator = new LongRangeValidator();
        probabilityCreateInputValidator.setMinimum(0);
        probabilityCreateInputValidator.setMaximum(100);
        probabilityCreateInput.addValidator(probabilityCreateInputValidator);
        
        htmlPanelGrid.getChildren().add(probabilityCreateInput);
        
        Message probabilityCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        probabilityCreateInputMessage.setId("probabilityCreateInputMessage");
        probabilityCreateInputMessage.setFor("probabilityCreateInput");
        probabilityCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(probabilityCreateInputMessage);
        
        OutputLabel requirementsCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        requirementsCreateOutput.setFor("requirementsCreateInput");
        requirementsCreateOutput.setId("requirementsCreateOutput");
        requirementsCreateOutput.setValue("Requirements:");
        htmlPanelGrid.getChildren().add(requirementsCreateOutput);
        
        SelectManyMenu requirementsCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        requirementsCreateInput.setId("requirementsCreateInput");
        requirementsCreateInput.setConverter(new JJRequirementConverter());
        requirementsCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.selectedRequirements}", List.class));
        UISelectItems requirementsCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        requirementsCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.allJJRequirements}", List.class));
        requirementsCreateInput.setRequired(false);
        requirementsCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJRequirement", String.class));
        requirementsCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJRequirement}", String.class));
        requirementsCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJRequirement}", JJRequirement.class));
        requirementsCreateInput.getChildren().add(requirementsCreateInputItems);
        htmlPanelGrid.getChildren().add(requirementsCreateInput);
        
        Message requirementsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementsCreateInputMessage.setId("requirementsCreateInputMessage");
        requirementsCreateInputMessage.setFor("requirementsCreateInput");
        requirementsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementsCreateInputMessage);
        
        OutputLabel bugsCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        bugsCreateOutput.setFor("bugsCreateInput");
        bugsCreateOutput.setId("bugsCreateOutput");
        bugsCreateOutput.setValue("Bugs:");
        htmlPanelGrid.getChildren().add(bugsCreateOutput);
        
        SelectManyMenu bugsCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        bugsCreateInput.setId("bugsCreateInput");
        bugsCreateInput.setConverter(new JJBugConverter());
        bugsCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.selectedBugs}", List.class));
        UISelectItems bugsCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        bugsCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.allJJBugs}", List.class));
        bugsCreateInput.setRequired(false);
        bugsCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJBug", String.class));
        bugsCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJBug}", String.class));
        bugsCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJBug}", JJBug.class));
        bugsCreateInput.getChildren().add(bugsCreateInputItems);
        htmlPanelGrid.getChildren().add(bugsCreateInput);
        
        Message bugsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bugsCreateInputMessage.setId("bugsCreateInputMessage");
        bugsCreateInputMessage.setFor("bugsCreateInput");
        bugsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bugsCreateInputMessage);
        
        OutputLabel testcasesCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        testcasesCreateOutput.setFor("testcasesCreateInput");
        testcasesCreateOutput.setId("testcasesCreateOutput");
        testcasesCreateOutput.setValue("Testcases:");
        htmlPanelGrid.getChildren().add(testcasesCreateOutput);
        
        SelectManyMenu testcasesCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        testcasesCreateInput.setId("testcasesCreateInput");
        testcasesCreateInput.setConverter(new JJTestcaseConverter());
        testcasesCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.selectedTestcases}", List.class));
        UISelectItems testcasesCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        testcasesCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.allJJTestcases}", List.class));
        testcasesCreateInput.setRequired(false);
        testcasesCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJTestcase", String.class));
        testcasesCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJTestcase}", String.class));
        testcasesCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJTestcase}", JJTestcase.class));
        testcasesCreateInput.getChildren().add(testcasesCreateInputItems);
        htmlPanelGrid.getChildren().add(testcasesCreateInput);
        
        Message testcasesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        testcasesCreateInputMessage.setId("testcasesCreateInputMessage");
        testcasesCreateInputMessage.setFor("testcasesCreateInput");
        testcasesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(testcasesCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJRiskBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputTextarea nameEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMaximum(100);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel descriptionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionEditOutput.setFor("descriptionEditInput");
        descriptionEditOutput.setId("descriptionEditOutput");
        descriptionEditOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionEditOutput);
        
        InputTextarea descriptionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionEditInput.setId("descriptionEditInput");
        descriptionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.description}", String.class));
        descriptionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionEditInput);
        
        Message descriptionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionEditInputMessage.setId("descriptionEditInputMessage");
        descriptionEditInputMessage.setFor("descriptionEditInput");
        descriptionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionEditInputMessage);
        
        OutputLabel creationDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateEditOutput.setFor("creationDateEditInput");
        creationDateEditOutput.setId("creationDateEditOutput");
        creationDateEditOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateEditOutput);
        
        Calendar creationDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateEditInput.setId("creationDateEditInput");
        creationDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.creationDate}", Date.class));
        creationDateEditInput.setNavigator(true);
        creationDateEditInput.setEffect("slideDown");
        creationDateEditInput.setPattern("dd/MM/yyyy");
        creationDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateEditInput);
        
        Message creationDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateEditInputMessage.setId("creationDateEditInputMessage");
        creationDateEditInputMessage.setFor("creationDateEditInput");
        creationDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateEditInputMessage);
        
        OutputLabel createdByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByEditOutput.setFor("createdByEditInput");
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.createdBy}", JJContact.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRiskBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByEditInput.setConverter(new JJContactConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        OutputLabel updatedDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateEditOutput.setFor("updatedDateEditInput");
        updatedDateEditOutput.setId("updatedDateEditOutput");
        updatedDateEditOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateEditOutput);
        
        Calendar updatedDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateEditInput.setId("updatedDateEditInput");
        updatedDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.updatedDate}", Date.class));
        updatedDateEditInput.setNavigator(true);
        updatedDateEditInput.setEffect("slideDown");
        updatedDateEditInput.setPattern("dd/MM/yyyy");
        updatedDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateEditInput);
        
        Message updatedDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateEditInputMessage.setId("updatedDateEditInputMessage");
        updatedDateEditInputMessage.setFor("updatedDateEditInput");
        updatedDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateEditInputMessage);
        
        OutputLabel updatedByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByEditOutput.setFor("updatedByEditInput");
        updatedByEditOutput.setId("updatedByEditOutput");
        updatedByEditOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByEditOutput);
        
        AutoComplete updatedByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByEditInput.setId("updatedByEditInput");
        updatedByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.updatedBy}", JJContact.class));
        updatedByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRiskBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByEditInput.setDropdown(true);
        updatedByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByEditInput.setConverter(new JJContactConverter());
        updatedByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByEditInput);
        
        Message updatedByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByEditInputMessage.setId("updatedByEditInputMessage");
        updatedByEditInputMessage.setFor("updatedByEditInput");
        updatedByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByEditInputMessage);
        
        OutputLabel enabledEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledEditOutput.setFor("enabledEditInput");
        enabledEditOutput.setId("enabledEditOutput");
        enabledEditOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledEditOutput);
        
        SelectBooleanCheckbox enabledEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledEditInput.setId("enabledEditInput");
        enabledEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.enabled}", Boolean.class));
        enabledEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledEditInput);
        
        Message enabledEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledEditInputMessage.setId("enabledEditInputMessage");
        enabledEditInputMessage.setFor("enabledEditInput");
        enabledEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledEditInputMessage);
        
        OutputLabel projectEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        projectEditOutput.setFor("projectEditInput");
        projectEditOutput.setId("projectEditOutput");
        projectEditOutput.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectEditOutput);
        
        AutoComplete projectEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        projectEditInput.setId("projectEditInput");
        projectEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.project}", JJProject.class));
        projectEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRiskBean.completeProject}", List.class, new Class[] { String.class }));
        projectEditInput.setDropdown(true);
        projectEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "project", String.class));
        projectEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{project.name} #{project.description} #{project.creationDate} #{project.updatedDate}", String.class));
        projectEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{project}", JJProject.class));
        projectEditInput.setConverter(new JJProjectConverter());
        projectEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(projectEditInput);
        
        Message projectEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectEditInputMessage.setId("projectEditInputMessage");
        projectEditInputMessage.setFor("projectEditInput");
        projectEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectEditInputMessage);
        
        OutputLabel productEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        productEditOutput.setFor("productEditInput");
        productEditOutput.setId("productEditOutput");
        productEditOutput.setValue("Product:");
        htmlPanelGrid.getChildren().add(productEditOutput);
        
        AutoComplete productEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        productEditInput.setId("productEditInput");
        productEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.product}", JJProduct.class));
        productEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRiskBean.completeProduct}", List.class, new Class[] { String.class }));
        productEditInput.setDropdown(true);
        productEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "product", String.class));
        productEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{product.name} #{product.description} #{product.creationDate} #{product.updatedDate}", String.class));
        productEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{product}", JJProduct.class));
        productEditInput.setConverter(new JJProductConverter());
        productEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(productEditInput);
        
        Message productEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productEditInputMessage.setId("productEditInputMessage");
        productEditInputMessage.setFor("productEditInput");
        productEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productEditInputMessage);
        
        OutputLabel statusEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusEditOutput.setFor("statusEditInput");
        statusEditOutput.setId("statusEditOutput");
        statusEditOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusEditOutput);
        
        AutoComplete statusEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        statusEditInput.setId("statusEditInput");
        statusEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.status}", JJStatus.class));
        statusEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRiskBean.completeStatus}", List.class, new Class[] { String.class }));
        statusEditInput.setDropdown(true);
        statusEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "status", String.class));
        statusEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{status.name} #{status.description} #{status.creationDate} #{status.updatedDate}", String.class));
        statusEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{status}", JJStatus.class));
        statusEditInput.setConverter(new JJStatusConverter());
        statusEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(statusEditInput);
        
        Message statusEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusEditInputMessage.setId("statusEditInputMessage");
        statusEditInputMessage.setFor("statusEditInput");
        statusEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusEditInputMessage);
        
        OutputLabel probabilityEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        probabilityEditOutput.setFor("probabilityEditInput");
        probabilityEditOutput.setId("probabilityEditOutput");
        probabilityEditOutput.setValue("Probability:");
        htmlPanelGrid.getChildren().add(probabilityEditOutput);
        
        Spinner probabilityEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        probabilityEditInput.setId("probabilityEditInput");
        probabilityEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.probability}", Integer.class));
        probabilityEditInput.setRequired(true);
        probabilityEditInput.setMin(0.0);
        probabilityEditInput.setMax(100.0);
        LongRangeValidator probabilityEditInputValidator = new LongRangeValidator();
        probabilityEditInputValidator.setMinimum(0);
        probabilityEditInputValidator.setMaximum(100);
        probabilityEditInput.addValidator(probabilityEditInputValidator);
        
        htmlPanelGrid.getChildren().add(probabilityEditInput);
        
        Message probabilityEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        probabilityEditInputMessage.setId("probabilityEditInputMessage");
        probabilityEditInputMessage.setFor("probabilityEditInput");
        probabilityEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(probabilityEditInputMessage);
        
        OutputLabel requirementsEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        requirementsEditOutput.setFor("requirementsEditInput");
        requirementsEditOutput.setId("requirementsEditOutput");
        requirementsEditOutput.setValue("Requirements:");
        htmlPanelGrid.getChildren().add(requirementsEditOutput);
        
        SelectManyMenu requirementsEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        requirementsEditInput.setId("requirementsEditInput");
        requirementsEditInput.setConverter(new JJRequirementConverter());
        requirementsEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.selectedRequirements}", List.class));
        UISelectItems requirementsEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        requirementsEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.allJJRequirements}", List.class));
        requirementsEditInput.setRequired(false);
        requirementsEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJRequirement", String.class));
        requirementsEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJRequirement}", String.class));
        requirementsEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJRequirement}", JJRequirement.class));
        requirementsEditInput.getChildren().add(requirementsEditInputItems);
        htmlPanelGrid.getChildren().add(requirementsEditInput);
        
        Message requirementsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementsEditInputMessage.setId("requirementsEditInputMessage");
        requirementsEditInputMessage.setFor("requirementsEditInput");
        requirementsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementsEditInputMessage);
        
        OutputLabel bugsEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        bugsEditOutput.setFor("bugsEditInput");
        bugsEditOutput.setId("bugsEditOutput");
        bugsEditOutput.setValue("Bugs:");
        htmlPanelGrid.getChildren().add(bugsEditOutput);
        
        SelectManyMenu bugsEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        bugsEditInput.setId("bugsEditInput");
        bugsEditInput.setConverter(new JJBugConverter());
        bugsEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.selectedBugs}", List.class));
        UISelectItems bugsEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        bugsEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.allJJBugs}", List.class));
        bugsEditInput.setRequired(false);
        bugsEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJBug", String.class));
        bugsEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJBug}", String.class));
        bugsEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJBug}", JJBug.class));
        bugsEditInput.getChildren().add(bugsEditInputItems);
        htmlPanelGrid.getChildren().add(bugsEditInput);
        
        Message bugsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bugsEditInputMessage.setId("bugsEditInputMessage");
        bugsEditInputMessage.setFor("bugsEditInput");
        bugsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bugsEditInputMessage);
        
        OutputLabel testcasesEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        testcasesEditOutput.setFor("testcasesEditInput");
        testcasesEditOutput.setId("testcasesEditOutput");
        testcasesEditOutput.setValue("Testcases:");
        htmlPanelGrid.getChildren().add(testcasesEditOutput);
        
        SelectManyMenu testcasesEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        testcasesEditInput.setId("testcasesEditInput");
        testcasesEditInput.setConverter(new JJTestcaseConverter());
        testcasesEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.selectedTestcases}", List.class));
        UISelectItems testcasesEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        testcasesEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.allJJTestcases}", List.class));
        testcasesEditInput.setRequired(false);
        testcasesEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJTestcase", String.class));
        testcasesEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJTestcase}", String.class));
        testcasesEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJTestcase}", JJTestcase.class));
        testcasesEditInput.getChildren().add(testcasesEditInputItems);
        htmlPanelGrid.getChildren().add(testcasesEditInput);
        
        Message testcasesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        testcasesEditInputMessage.setId("testcasesEditInputMessage");
        testcasesEditInputMessage.setFor("testcasesEditInput");
        testcasesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(testcasesEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJRiskBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        InputTextarea nameValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.name}", String.class));
        nameValue.setReadonly(true);
        nameValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText descriptionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionLabel.setId("descriptionLabel");
        descriptionLabel.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionLabel);
        
        InputTextarea descriptionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionValue.setId("descriptionValue");
        descriptionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.description}", String.class));
        descriptionValue.setReadonly(true);
        descriptionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descriptionValue);
        
        HtmlOutputText creationDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateLabel.setId("creationDateLabel");
        creationDateLabel.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateLabel);
        
        HtmlOutputText creationDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.creationDate}", Date.class));
        DateTimeConverter creationDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationDateValueConverter.setPattern("dd/MM/yyyy");
        creationDateValue.setConverter(creationDateValueConverter);
        htmlPanelGrid.getChildren().add(creationDateValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.createdBy}", JJContact.class));
        createdByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        HtmlOutputText updatedDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateLabel.setId("updatedDateLabel");
        updatedDateLabel.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateLabel);
        
        HtmlOutputText updatedDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.updatedDate}", Date.class));
        DateTimeConverter updatedDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updatedDateValueConverter.setPattern("dd/MM/yyyy");
        updatedDateValue.setConverter(updatedDateValueConverter);
        htmlPanelGrid.getChildren().add(updatedDateValue);
        
        HtmlOutputText updatedByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByLabel.setId("updatedByLabel");
        updatedByLabel.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByLabel);
        
        HtmlOutputText updatedByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.updatedBy}", JJContact.class));
        updatedByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(updatedByValue);
        
        HtmlOutputText enabledLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledLabel.setId("enabledLabel");
        enabledLabel.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledLabel);
        
        HtmlOutputText enabledValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.enabled}", String.class));
        htmlPanelGrid.getChildren().add(enabledValue);
        
        HtmlOutputText projectLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectLabel.setId("projectLabel");
        projectLabel.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectLabel);
        
        HtmlOutputText projectValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.project}", JJProject.class));
        projectValue.setConverter(new JJProjectConverter());
        htmlPanelGrid.getChildren().add(projectValue);
        
        HtmlOutputText productLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productLabel.setId("productLabel");
        productLabel.setValue("Product:");
        htmlPanelGrid.getChildren().add(productLabel);
        
        HtmlOutputText productValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.product}", JJProduct.class));
        productValue.setConverter(new JJProductConverter());
        htmlPanelGrid.getChildren().add(productValue);
        
        HtmlOutputText statusLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusLabel.setId("statusLabel");
        statusLabel.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusLabel);
        
        HtmlOutputText statusValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.status}", JJStatus.class));
        statusValue.setConverter(new JJStatusConverter());
        htmlPanelGrid.getChildren().add(statusValue);
        
        HtmlOutputText probabilityLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        probabilityLabel.setId("probabilityLabel");
        probabilityLabel.setValue("Probability:");
        htmlPanelGrid.getChildren().add(probabilityLabel);
        
        HtmlOutputText probabilityValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        probabilityValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.probability}", String.class));
        htmlPanelGrid.getChildren().add(probabilityValue);
        
        HtmlOutputText requirementsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementsLabel.setId("requirementsLabel");
        requirementsLabel.setValue("Requirements:");
        htmlPanelGrid.getChildren().add(requirementsLabel);
        
        SelectManyMenu requirementsValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        requirementsValue.setId("requirementsValue");
        requirementsValue.setConverter(new JJRequirementConverter());
        requirementsValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.selectedRequirements}", List.class));
        UISelectItems requirementsValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        requirementsValue.setReadonly(true);
        requirementsValue.setDisabled(true);
        requirementsValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.requirements}", Set.class));
        requirementsValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJRequirement", String.class));
        requirementsValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJRequirement}", String.class));
        requirementsValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJRequirement}", JJRequirement.class));
        requirementsValue.getChildren().add(requirementsValueItems);
        htmlPanelGrid.getChildren().add(requirementsValue);
        
        HtmlOutputText bugsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugsLabel.setId("bugsLabel");
        bugsLabel.setValue("Bugs:");
        htmlPanelGrid.getChildren().add(bugsLabel);
        
        SelectManyMenu bugsValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        bugsValue.setId("bugsValue");
        bugsValue.setConverter(new JJBugConverter());
        bugsValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.selectedBugs}", List.class));
        UISelectItems bugsValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        bugsValue.setReadonly(true);
        bugsValue.setDisabled(true);
        bugsValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.bugs}", Set.class));
        bugsValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJBug", String.class));
        bugsValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJBug}", String.class));
        bugsValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJBug}", JJBug.class));
        bugsValue.getChildren().add(bugsValueItems);
        htmlPanelGrid.getChildren().add(bugsValue);
        
        HtmlOutputText testcasesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        testcasesLabel.setId("testcasesLabel");
        testcasesLabel.setValue("Testcases:");
        htmlPanelGrid.getChildren().add(testcasesLabel);
        
        SelectManyMenu testcasesValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        testcasesValue.setId("testcasesValue");
        testcasesValue.setConverter(new JJTestcaseConverter());
        testcasesValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.selectedTestcases}", List.class));
        UISelectItems testcasesValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        testcasesValue.setReadonly(true);
        testcasesValue.setDisabled(true);
        testcasesValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRiskBean.JJRisk_.testcases}", Set.class));
        testcasesValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJTestcase", String.class));
        testcasesValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJTestcase}", String.class));
        testcasesValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJTestcase}", JJTestcase.class));
        testcasesValue.getChildren().add(testcasesValueItems);
        htmlPanelGrid.getChildren().add(testcasesValue);
        
        return htmlPanelGrid;
    }
    
    public List<JJContact> JJRiskBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJRiskBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJRequirement> JJRiskBean.getSelectedRequirements() {
        return selectedRequirements;
    }
    
    public void JJRiskBean.setSelectedRequirements(List<JJRequirement> selectedRequirements) {
        if (selectedRequirements != null) {
            JJRisk_.setRequirements(new HashSet<JJRequirement>(selectedRequirements));
        }
        this.selectedRequirements = selectedRequirements;
    }
    
    public List<JJBug> JJRiskBean.getSelectedBugs() {
        return selectedBugs;
    }
    
    public void JJRiskBean.setSelectedBugs(List<JJBug> selectedBugs) {
        if (selectedBugs != null) {
            JJRisk_.setBugs(new HashSet<JJBug>(selectedBugs));
        }
        this.selectedBugs = selectedBugs;
    }
    
    public List<JJTestcase> JJRiskBean.getSelectedTestcases() {
        return selectedTestcases;
    }
    
    public void JJRiskBean.setSelectedTestcases(List<JJTestcase> selectedTestcases) {
        if (selectedTestcases != null) {
            JJRisk_.setTestcases(new HashSet<JJTestcase>(selectedTestcases));
        }
        this.selectedTestcases = selectedTestcases;
    }
    
    public String JJRiskBean.onEdit() {
        if (JJRisk_ != null && JJRisk_.getRequirements() != null) {
            selectedRequirements = new ArrayList<JJRequirement>(JJRisk_.getRequirements());
        }
        if (JJRisk_ != null && JJRisk_.getBugs() != null) {
            selectedBugs = new ArrayList<JJBug>(JJRisk_.getBugs());
        }
        if (JJRisk_ != null && JJRisk_.getTestcases() != null) {
            selectedTestcases = new ArrayList<JJTestcase>(JJRisk_.getTestcases());
        }
        return null;
    }
    
    public boolean JJRiskBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJRiskBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJRiskBean.displayList() {
        createDialogVisible = false;
        findAllJJRisks();
        return "JJRisk_";
    }
    
    public String JJRiskBean.displayCreateDialog() {
        JJRisk_ = new JJRisk();
        createDialogVisible = true;
        return "JJRisk_";
    }
    
    public String JJRiskBean.persist() {
        String message = "";
        if (JJRisk_.getId() != null) {
            jJRiskService.updateJJRisk(JJRisk_);
            message = "message_successfully_updated";
        } else {
            jJRiskService.saveJJRisk(JJRisk_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJRisk");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJRisks();
    }
    
    public String JJRiskBean.delete() {
        jJRiskService.deleteJJRisk(JJRisk_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJRisk");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJRisks();
    }
    
    public void JJRiskBean.reset() {
        JJRisk_ = null;
        selectedRequirements = null;
        selectedBugs = null;
        selectedTestcases = null;
        createDialogVisible = false;
    }
    
    public void JJRiskBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import com.starit.janjoonweb.domain.JJBuild;
import com.starit.janjoonweb.domain.JJBuildService;
import com.starit.janjoonweb.domain.JJContact;
import com.starit.janjoonweb.domain.JJContactService;
import com.starit.janjoonweb.domain.JJTeststep;
import com.starit.janjoonweb.domain.JJTeststepService;
import com.starit.janjoonweb.domain.JJTeststepexecution;
import com.starit.janjoonweb.domain.JJTeststepexecutionService;
import com.starit.janjoonweb.ui.mb.JJTeststepexecutionBean;
import com.starit.janjoonweb.ui.mb.converter.JJBuildConverter;
import com.starit.janjoonweb.ui.mb.converter.JJContactConverter;
import com.starit.janjoonweb.ui.mb.converter.JJTeststepConverter;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJTeststepexecutionBean_Roo_ManagedBean {
    
    declare @type: JJTeststepexecutionBean: @ManagedBean(name = "jJTeststepexecutionBean");
    
    declare @type: JJTeststepexecutionBean: @SessionScoped;
    
    @Autowired
    JJTeststepexecutionService JJTeststepexecutionBean.jJTeststepexecutionService;
    
    @Autowired
    JJContactService JJTeststepexecutionBean.jJContactService;
    
    @Autowired
    JJBuildService JJTeststepexecutionBean.jJBuildService;
    
    @Autowired
    JJTeststepService JJTeststepexecutionBean.jJTeststepService;
    
    private String JJTeststepexecutionBean.name = "JJTeststepexecutions";
    
    private JJTeststepexecution JJTeststepexecutionBean.JJTeststepexecution_;
    
    private List<JJTeststepexecution> JJTeststepexecutionBean.allJJTeststepexecutions;
    
    private boolean JJTeststepexecutionBean.dataVisible = false;
    
    private List<String> JJTeststepexecutionBean.columns;
    
    private HtmlPanelGrid JJTeststepexecutionBean.createPanelGrid;
    
    private HtmlPanelGrid JJTeststepexecutionBean.editPanelGrid;
    
    private HtmlPanelGrid JJTeststepexecutionBean.viewPanelGrid;
    
    private boolean JJTeststepexecutionBean.createDialogVisible = false;
    
    @PostConstruct
    public void JJTeststepexecutionBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
    }
    
    public String JJTeststepexecutionBean.getName() {
        return name;
    }
    
    public List<String> JJTeststepexecutionBean.getColumns() {
        return columns;
    }
    
    public List<JJTeststepexecution> JJTeststepexecutionBean.getAllJJTeststepexecutions() {
        return allJJTeststepexecutions;
    }
    
    public void JJTeststepexecutionBean.setAllJJTeststepexecutions(List<JJTeststepexecution> allJJTeststepexecutions) {
        this.allJJTeststepexecutions = allJJTeststepexecutions;
    }
    
    public String JJTeststepexecutionBean.findAllJJTeststepexecutions() {
        allJJTeststepexecutions = jJTeststepexecutionService.findAllJJTeststepexecutions();
        dataVisible = !allJJTeststepexecutions.isEmpty();
        return null;
    }
    
    public boolean JJTeststepexecutionBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJTeststepexecutionBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJTeststepexecutionBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJTeststepexecutionBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJTeststepexecutionBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJTeststepexecutionBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJTeststepexecutionBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJTeststepexecutionBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJTeststepexecutionBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputTextarea nameCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMaximum(100);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel descriptionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionCreateOutput.setFor("descriptionCreateInput");
        descriptionCreateOutput.setId("descriptionCreateOutput");
        descriptionCreateOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionCreateOutput);
        
        InputTextarea descriptionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionCreateInput.setId("descriptionCreateInput");
        descriptionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.description}", String.class));
        descriptionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionCreateInput);
        
        Message descriptionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionCreateInputMessage.setId("descriptionCreateInputMessage");
        descriptionCreateInputMessage.setFor("descriptionCreateInput");
        descriptionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionCreateInputMessage);
        
        OutputLabel creationDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateCreateOutput.setFor("creationDateCreateInput");
        creationDateCreateOutput.setId("creationDateCreateOutput");
        creationDateCreateOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateCreateOutput);
        
        Calendar creationDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateCreateInput.setId("creationDateCreateInput");
        creationDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.creationDate}", Date.class));
        creationDateCreateInput.setNavigator(true);
        creationDateCreateInput.setEffect("slideDown");
        creationDateCreateInput.setPattern("dd/MM/yyyy");
        creationDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateCreateInput);
        
        Message creationDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateCreateInputMessage.setId("creationDateCreateInputMessage");
        creationDateCreateInputMessage.setFor("creationDateCreateInput");
        creationDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateCreateInputMessage);
        
        OutputLabel createdByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByCreateOutput.setFor("createdByCreateInput");
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.createdBy}", JJContact.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTeststepexecutionBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByCreateInput.setConverter(new JJContactConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        OutputLabel updatedDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateCreateOutput.setFor("updatedDateCreateInput");
        updatedDateCreateOutput.setId("updatedDateCreateOutput");
        updatedDateCreateOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateCreateOutput);
        
        Calendar updatedDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateCreateInput.setId("updatedDateCreateInput");
        updatedDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.updatedDate}", Date.class));
        updatedDateCreateInput.setNavigator(true);
        updatedDateCreateInput.setEffect("slideDown");
        updatedDateCreateInput.setPattern("dd/MM/yyyy");
        updatedDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateCreateInput);
        
        Message updatedDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateCreateInputMessage.setId("updatedDateCreateInputMessage");
        updatedDateCreateInputMessage.setFor("updatedDateCreateInput");
        updatedDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateCreateInputMessage);
        
        OutputLabel updatedByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByCreateOutput.setFor("updatedByCreateInput");
        updatedByCreateOutput.setId("updatedByCreateOutput");
        updatedByCreateOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByCreateOutput);
        
        AutoComplete updatedByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByCreateInput.setId("updatedByCreateInput");
        updatedByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.updatedBy}", JJContact.class));
        updatedByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTeststepexecutionBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByCreateInput.setDropdown(true);
        updatedByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByCreateInput.setConverter(new JJContactConverter());
        updatedByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByCreateInput);
        
        Message updatedByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByCreateInputMessage.setId("updatedByCreateInputMessage");
        updatedByCreateInputMessage.setFor("updatedByCreateInput");
        updatedByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByCreateInputMessage);
        
        OutputLabel enabledCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledCreateOutput.setFor("enabledCreateInput");
        enabledCreateOutput.setId("enabledCreateOutput");
        enabledCreateOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledCreateOutput);
        
        SelectBooleanCheckbox enabledCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledCreateInput.setId("enabledCreateInput");
        enabledCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.enabled}", Boolean.class));
        enabledCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledCreateInput);
        
        Message enabledCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledCreateInputMessage.setId("enabledCreateInputMessage");
        enabledCreateInputMessage.setFor("enabledCreateInput");
        enabledCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledCreateInputMessage);
        
        OutputLabel buildCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        buildCreateOutput.setFor("buildCreateInput");
        buildCreateOutput.setId("buildCreateOutput");
        buildCreateOutput.setValue("Build:");
        htmlPanelGrid.getChildren().add(buildCreateOutput);
        
        AutoComplete buildCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        buildCreateInput.setId("buildCreateInput");
        buildCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.build}", JJBuild.class));
        buildCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTeststepexecutionBean.completeBuild}", List.class, new Class[] { String.class }));
        buildCreateInput.setDropdown(true);
        buildCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "build", String.class));
        buildCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{build.name} #{build.description} #{build.creationDate} #{build.updatedDate}", String.class));
        buildCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{build}", JJBuild.class));
        buildCreateInput.setConverter(new JJBuildConverter());
        buildCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(buildCreateInput);
        
        Message buildCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        buildCreateInputMessage.setId("buildCreateInputMessage");
        buildCreateInputMessage.setFor("buildCreateInput");
        buildCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(buildCreateInputMessage);
        
        OutputLabel teststepCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        teststepCreateOutput.setFor("teststepCreateInput");
        teststepCreateOutput.setId("teststepCreateOutput");
        teststepCreateOutput.setValue("Teststep:");
        htmlPanelGrid.getChildren().add(teststepCreateOutput);
        
        AutoComplete teststepCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        teststepCreateInput.setId("teststepCreateInput");
        teststepCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.teststep}", JJTeststep.class));
        teststepCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTeststepexecutionBean.completeTeststep}", List.class, new Class[] { String.class }));
        teststepCreateInput.setDropdown(true);
        teststepCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "teststep", String.class));
        teststepCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{teststep.name} #{teststep.description} #{teststep.creationDate} #{teststep.updatedDate}", String.class));
        teststepCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{teststep}", JJTeststep.class));
        teststepCreateInput.setConverter(new JJTeststepConverter());
        teststepCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(teststepCreateInput);
        
        Message teststepCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        teststepCreateInputMessage.setId("teststepCreateInputMessage");
        teststepCreateInputMessage.setFor("teststepCreateInput");
        teststepCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(teststepCreateInputMessage);
        
        OutputLabel passedCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        passedCreateOutput.setFor("passedCreateInput");
        passedCreateOutput.setId("passedCreateOutput");
        passedCreateOutput.setValue("Passed:");
        htmlPanelGrid.getChildren().add(passedCreateOutput);
        
        SelectBooleanCheckbox passedCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        passedCreateInput.setId("passedCreateInput");
        passedCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.passed}", Boolean.class));
        passedCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(passedCreateInput);
        
        Message passedCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        passedCreateInputMessage.setId("passedCreateInputMessage");
        passedCreateInputMessage.setFor("passedCreateInput");
        passedCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(passedCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJTeststepexecutionBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputTextarea nameEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMaximum(100);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel descriptionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionEditOutput.setFor("descriptionEditInput");
        descriptionEditOutput.setId("descriptionEditOutput");
        descriptionEditOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionEditOutput);
        
        InputTextarea descriptionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionEditInput.setId("descriptionEditInput");
        descriptionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.description}", String.class));
        descriptionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionEditInput);
        
        Message descriptionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionEditInputMessage.setId("descriptionEditInputMessage");
        descriptionEditInputMessage.setFor("descriptionEditInput");
        descriptionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionEditInputMessage);
        
        OutputLabel creationDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateEditOutput.setFor("creationDateEditInput");
        creationDateEditOutput.setId("creationDateEditOutput");
        creationDateEditOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateEditOutput);
        
        Calendar creationDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateEditInput.setId("creationDateEditInput");
        creationDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.creationDate}", Date.class));
        creationDateEditInput.setNavigator(true);
        creationDateEditInput.setEffect("slideDown");
        creationDateEditInput.setPattern("dd/MM/yyyy");
        creationDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateEditInput);
        
        Message creationDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateEditInputMessage.setId("creationDateEditInputMessage");
        creationDateEditInputMessage.setFor("creationDateEditInput");
        creationDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateEditInputMessage);
        
        OutputLabel createdByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByEditOutput.setFor("createdByEditInput");
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.createdBy}", JJContact.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTeststepexecutionBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByEditInput.setConverter(new JJContactConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        OutputLabel updatedDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateEditOutput.setFor("updatedDateEditInput");
        updatedDateEditOutput.setId("updatedDateEditOutput");
        updatedDateEditOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateEditOutput);
        
        Calendar updatedDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateEditInput.setId("updatedDateEditInput");
        updatedDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.updatedDate}", Date.class));
        updatedDateEditInput.setNavigator(true);
        updatedDateEditInput.setEffect("slideDown");
        updatedDateEditInput.setPattern("dd/MM/yyyy");
        updatedDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateEditInput);
        
        Message updatedDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateEditInputMessage.setId("updatedDateEditInputMessage");
        updatedDateEditInputMessage.setFor("updatedDateEditInput");
        updatedDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateEditInputMessage);
        
        OutputLabel updatedByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByEditOutput.setFor("updatedByEditInput");
        updatedByEditOutput.setId("updatedByEditOutput");
        updatedByEditOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByEditOutput);
        
        AutoComplete updatedByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByEditInput.setId("updatedByEditInput");
        updatedByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.updatedBy}", JJContact.class));
        updatedByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTeststepexecutionBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByEditInput.setDropdown(true);
        updatedByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByEditInput.setConverter(new JJContactConverter());
        updatedByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByEditInput);
        
        Message updatedByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByEditInputMessage.setId("updatedByEditInputMessage");
        updatedByEditInputMessage.setFor("updatedByEditInput");
        updatedByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByEditInputMessage);
        
        OutputLabel enabledEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledEditOutput.setFor("enabledEditInput");
        enabledEditOutput.setId("enabledEditOutput");
        enabledEditOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledEditOutput);
        
        SelectBooleanCheckbox enabledEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledEditInput.setId("enabledEditInput");
        enabledEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.enabled}", Boolean.class));
        enabledEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledEditInput);
        
        Message enabledEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledEditInputMessage.setId("enabledEditInputMessage");
        enabledEditInputMessage.setFor("enabledEditInput");
        enabledEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledEditInputMessage);
        
        OutputLabel buildEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        buildEditOutput.setFor("buildEditInput");
        buildEditOutput.setId("buildEditOutput");
        buildEditOutput.setValue("Build:");
        htmlPanelGrid.getChildren().add(buildEditOutput);
        
        AutoComplete buildEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        buildEditInput.setId("buildEditInput");
        buildEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.build}", JJBuild.class));
        buildEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTeststepexecutionBean.completeBuild}", List.class, new Class[] { String.class }));
        buildEditInput.setDropdown(true);
        buildEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "build", String.class));
        buildEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{build.name} #{build.description} #{build.creationDate} #{build.updatedDate}", String.class));
        buildEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{build}", JJBuild.class));
        buildEditInput.setConverter(new JJBuildConverter());
        buildEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(buildEditInput);
        
        Message buildEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        buildEditInputMessage.setId("buildEditInputMessage");
        buildEditInputMessage.setFor("buildEditInput");
        buildEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(buildEditInputMessage);
        
        OutputLabel teststepEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        teststepEditOutput.setFor("teststepEditInput");
        teststepEditOutput.setId("teststepEditOutput");
        teststepEditOutput.setValue("Teststep:");
        htmlPanelGrid.getChildren().add(teststepEditOutput);
        
        AutoComplete teststepEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        teststepEditInput.setId("teststepEditInput");
        teststepEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.teststep}", JJTeststep.class));
        teststepEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTeststepexecutionBean.completeTeststep}", List.class, new Class[] { String.class }));
        teststepEditInput.setDropdown(true);
        teststepEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "teststep", String.class));
        teststepEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{teststep.name} #{teststep.description} #{teststep.creationDate} #{teststep.updatedDate}", String.class));
        teststepEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{teststep}", JJTeststep.class));
        teststepEditInput.setConverter(new JJTeststepConverter());
        teststepEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(teststepEditInput);
        
        Message teststepEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        teststepEditInputMessage.setId("teststepEditInputMessage");
        teststepEditInputMessage.setFor("teststepEditInput");
        teststepEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(teststepEditInputMessage);
        
        OutputLabel passedEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        passedEditOutput.setFor("passedEditInput");
        passedEditOutput.setId("passedEditOutput");
        passedEditOutput.setValue("Passed:");
        htmlPanelGrid.getChildren().add(passedEditOutput);
        
        SelectBooleanCheckbox passedEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        passedEditInput.setId("passedEditInput");
        passedEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.passed}", Boolean.class));
        passedEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(passedEditInput);
        
        Message passedEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        passedEditInputMessage.setId("passedEditInputMessage");
        passedEditInputMessage.setFor("passedEditInput");
        passedEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(passedEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJTeststepexecutionBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        InputTextarea nameValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.name}", String.class));
        nameValue.setReadonly(true);
        nameValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText descriptionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionLabel.setId("descriptionLabel");
        descriptionLabel.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionLabel);
        
        InputTextarea descriptionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionValue.setId("descriptionValue");
        descriptionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.description}", String.class));
        descriptionValue.setReadonly(true);
        descriptionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descriptionValue);
        
        HtmlOutputText creationDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateLabel.setId("creationDateLabel");
        creationDateLabel.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateLabel);
        
        HtmlOutputText creationDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.creationDate}", Date.class));
        DateTimeConverter creationDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationDateValueConverter.setPattern("dd/MM/yyyy");
        creationDateValue.setConverter(creationDateValueConverter);
        htmlPanelGrid.getChildren().add(creationDateValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.createdBy}", JJContact.class));
        createdByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        HtmlOutputText updatedDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateLabel.setId("updatedDateLabel");
        updatedDateLabel.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateLabel);
        
        HtmlOutputText updatedDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.updatedDate}", Date.class));
        DateTimeConverter updatedDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updatedDateValueConverter.setPattern("dd/MM/yyyy");
        updatedDateValue.setConverter(updatedDateValueConverter);
        htmlPanelGrid.getChildren().add(updatedDateValue);
        
        HtmlOutputText updatedByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByLabel.setId("updatedByLabel");
        updatedByLabel.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByLabel);
        
        HtmlOutputText updatedByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.updatedBy}", JJContact.class));
        updatedByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(updatedByValue);
        
        HtmlOutputText enabledLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledLabel.setId("enabledLabel");
        enabledLabel.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledLabel);
        
        HtmlOutputText enabledValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.enabled}", String.class));
        htmlPanelGrid.getChildren().add(enabledValue);
        
        HtmlOutputText buildLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        buildLabel.setId("buildLabel");
        buildLabel.setValue("Build:");
        htmlPanelGrid.getChildren().add(buildLabel);
        
        HtmlOutputText buildValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        buildValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.build}", JJBuild.class));
        buildValue.setConverter(new JJBuildConverter());
        htmlPanelGrid.getChildren().add(buildValue);
        
        HtmlOutputText teststepLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        teststepLabel.setId("teststepLabel");
        teststepLabel.setValue("Teststep:");
        htmlPanelGrid.getChildren().add(teststepLabel);
        
        HtmlOutputText teststepValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        teststepValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.teststep}", JJTeststep.class));
        teststepValue.setConverter(new JJTeststepConverter());
        htmlPanelGrid.getChildren().add(teststepValue);
        
        HtmlOutputText passedLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passedLabel.setId("passedLabel");
        passedLabel.setValue("Passed:");
        htmlPanelGrid.getChildren().add(passedLabel);
        
        HtmlOutputText passedValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passedValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTeststepexecutionBean.JJTeststepexecution_.passed}", String.class));
        htmlPanelGrid.getChildren().add(passedValue);
        
        return htmlPanelGrid;
    }
    
    public JJTeststepexecution JJTeststepexecutionBean.getJJTeststepexecution_() {
        if (JJTeststepexecution_ == null) {
            JJTeststepexecution_ = new JJTeststepexecution();
        }
        return JJTeststepexecution_;
    }
    
    public void JJTeststepexecutionBean.setJJTeststepexecution_(JJTeststepexecution JJTeststepexecution_) {
        this.JJTeststepexecution_ = JJTeststepexecution_;
    }
    
    public List<JJContact> JJTeststepexecutionBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJTeststepexecutionBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJBuild> JJTeststepexecutionBean.completeBuild(String query) {
        List<JJBuild> suggestions = new ArrayList<JJBuild>();
        for (JJBuild jJBuild : jJBuildService.findAllJJBuilds()) {
            String jJBuildStr = String.valueOf(jJBuild.getName() +  " "  + jJBuild.getDescription() +  " "  + jJBuild.getCreationDate() +  " "  + jJBuild.getUpdatedDate());
            if (jJBuildStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJBuild);
            }
        }
        return suggestions;
    }
    
    public List<JJTeststep> JJTeststepexecutionBean.completeTeststep(String query) {
        List<JJTeststep> suggestions = new ArrayList<JJTeststep>();
        for (JJTeststep jJTeststep : jJTeststepService.findAllJJTeststeps()) {
            String jJTeststepStr = String.valueOf(jJTeststep.getName() +  " "  + jJTeststep.getDescription() +  " "  + jJTeststep.getCreationDate() +  " "  + jJTeststep.getUpdatedDate());
            if (jJTeststepStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJTeststep);
            }
        }
        return suggestions;
    }
    
    public String JJTeststepexecutionBean.onEdit() {
        return null;
    }
    
    public boolean JJTeststepexecutionBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJTeststepexecutionBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJTeststepexecutionBean.displayList() {
        createDialogVisible = false;
        findAllJJTeststepexecutions();
        return "JJTeststepexecution_";
    }
    
    public String JJTeststepexecutionBean.displayCreateDialog() {
        JJTeststepexecution_ = new JJTeststepexecution();
        createDialogVisible = true;
        return "JJTeststepexecution_";
    }
    
    public String JJTeststepexecutionBean.persist() {
        String message = "";
        if (JJTeststepexecution_.getId() != null) {
            jJTeststepexecutionService.updateJJTeststepexecution(JJTeststepexecution_);
            message = "message_successfully_updated";
        } else {
            jJTeststepexecutionService.saveJJTeststepexecution(JJTeststepexecution_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJTeststepexecution");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJTeststepexecutions();
    }
    
    public String JJTeststepexecutionBean.delete() {
        jJTeststepexecutionService.deleteJJTeststepexecution(JJTeststepexecution_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJTeststepexecution");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJTeststepexecutions();
    }
    
    public void JJTeststepexecutionBean.reset() {
        JJTeststepexecution_ = null;
        createDialogVisible = false;
    }
    
    public void JJTeststepexecutionBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

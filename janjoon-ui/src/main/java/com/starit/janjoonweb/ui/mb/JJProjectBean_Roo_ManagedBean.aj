// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import com.starit.janjoonweb.domain.JJChapter;
import com.starit.janjoonweb.domain.JJContact;
import com.starit.janjoonweb.domain.JJContactService;
import com.starit.janjoonweb.domain.JJProject;
import com.starit.janjoonweb.domain.JJProjectService;
import com.starit.janjoonweb.ui.mb.JJProjectBean;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJProjectBean_Roo_ManagedBean {
    
    declare @type: JJProjectBean: @ManagedBean(name = "jJProjectBean");
    
    declare @type: JJProjectBean: @SessionScoped;
    
    @Autowired
    JJProjectService JJProjectBean.jJProjectService;
    
    @Autowired
    JJContactService JJProjectBean.jJContactService;
    
    private String JJProjectBean.name = "JJProjects";
    
    private JJProject JJProjectBean.JJProject_;
    
    private List<JJProject> JJProjectBean.allJJProjects;
    
    private boolean JJProjectBean.dataVisible = false;
    
    private List<String> JJProjectBean.columns;
    
    private HtmlPanelGrid JJProjectBean.createPanelGrid;
    
    private HtmlPanelGrid JJProjectBean.editPanelGrid;
    
    private HtmlPanelGrid JJProjectBean.viewPanelGrid;
    
    private boolean JJProjectBean.createDialogVisible = false;
    
    private List<JJChapter> JJProjectBean.selectedChapters;
    
    @PostConstruct
    public void JJProjectBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
        columns.add("startDate");
    }
    
    public String JJProjectBean.getName() {
        return name;
    }
    
    public List<String> JJProjectBean.getColumns() {
        return columns;
    }
    
    public List<JJProject> JJProjectBean.getAllJJProjects() {
        return allJJProjects;
    }
    
    public void JJProjectBean.setAllJJProjects(List<JJProject> allJJProjects) {
        this.allJJProjects = allJJProjects;
    }
    
    public String JJProjectBean.findAllJJProjects() {
        allJJProjects = jJProjectService.findAllJJProjects();
        dataVisible = !allJJProjects.isEmpty();
        return null;
    }
    
    public boolean JJProjectBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJProjectBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJProjectBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJProjectBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJProjectBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJProjectBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJProjectBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJProjectBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public JJProject JJProjectBean.getJJProject_() {
        if (JJProject_ == null) {
            JJProject_ = new JJProject();
        }
        return JJProject_;
    }
    
    public void JJProjectBean.setJJProject_(JJProject JJProject_) {
        this.JJProject_ = JJProject_;
    }
    
    public List<JJContact> JJProjectBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJProjectBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJChapter> JJProjectBean.getSelectedChapters() {
        return selectedChapters;
    }
    
    public void JJProjectBean.setSelectedChapters(List<JJChapter> selectedChapters) {
        if (selectedChapters != null) {
            JJProject_.setChapters(new HashSet<JJChapter>(selectedChapters));
        }
        this.selectedChapters = selectedChapters;
    }
    
    public List<JJContact> JJProjectBean.completeManager(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public String JJProjectBean.onEdit() {
        if (JJProject_ != null && JJProject_.getChapters() != null) {
            selectedChapters = new ArrayList<JJChapter>(JJProject_.getChapters());
        }
        return null;
    }
    
    public boolean JJProjectBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJProjectBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJProjectBean.displayList() {
        createDialogVisible = false;
        findAllJJProjects();
        return "JJProject_";
    }
    
    public String JJProjectBean.displayCreateDialog() {
        JJProject_ = new JJProject();
        createDialogVisible = true;
        return "JJProject_";
    }
    
    public String JJProjectBean.persist() {
        String message = "";
        if (JJProject_.getId() != null) {
            jJProjectService.updateJJProject(JJProject_);
            message = "message_successfully_updated";
        } else {
            jJProjectService.saveJJProject(JJProject_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJProject");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJProjects();
    }
    
    public String JJProjectBean.delete() {
        jJProjectService.deleteJJProject(JJProject_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJProject");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJProjects();
    }
    
    public void JJProjectBean.reset() {
        JJProject_ = null;
        selectedChapters = null;
        createDialogVisible = false;
    }
    
    public void JJProjectBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

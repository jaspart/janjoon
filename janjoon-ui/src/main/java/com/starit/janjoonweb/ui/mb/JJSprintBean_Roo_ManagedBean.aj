// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import com.starit.janjoonweb.domain.JJBuild;
import com.starit.janjoonweb.domain.JJContact;
import com.starit.janjoonweb.domain.JJContactService;
import com.starit.janjoonweb.domain.JJMessage;
import com.starit.janjoonweb.domain.JJProject;
import com.starit.janjoonweb.domain.JJProjectService;
import com.starit.janjoonweb.domain.JJSprint;
import com.starit.janjoonweb.domain.JJSprintService;
import com.starit.janjoonweb.domain.JJTask;
import com.starit.janjoonweb.ui.mb.JJSprintBean;
import com.starit.janjoonweb.ui.mb.converter.JJContactConverter;
import com.starit.janjoonweb.ui.mb.converter.JJProjectConverter;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJSprintBean_Roo_ManagedBean {
    
    declare @type: JJSprintBean: @ManagedBean(name = "jJSprintBean");
    
    declare @type: JJSprintBean: @SessionScoped;
    
    @Autowired
    JJSprintService JJSprintBean.jJSprintService;
    
    @Autowired
    JJContactService JJSprintBean.jJContactService;
    
    @Autowired
    JJProjectService JJSprintBean.jJProjectService;
    
    private String JJSprintBean.name = "JJSprints";
    
    private JJSprint JJSprintBean.JJSprint_;
    
    private List<JJSprint> JJSprintBean.allJJSprints;
    
    private boolean JJSprintBean.dataVisible = false;
    
    private List<String> JJSprintBean.columns;
    
    private HtmlPanelGrid JJSprintBean.createPanelGrid;
    
    private HtmlPanelGrid JJSprintBean.editPanelGrid;
    
    private HtmlPanelGrid JJSprintBean.viewPanelGrid;
    
    private boolean JJSprintBean.createDialogVisible = false;
    
    private List<JJBuild> JJSprintBean.selectedBuilds;
    
    private List<JJTask> JJSprintBean.selectedTasks;
    
    private List<JJTask> JJSprintBean.selectedObstacles;
    
    private List<JJContact> JJSprintBean.selectedContacts;
    
    private List<JJMessage> JJSprintBean.selectedMessages;
    
    @PostConstruct
    public void JJSprintBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
        columns.add("ordering");
    }
    
    public String JJSprintBean.getName() {
        return name;
    }
    
    public List<String> JJSprintBean.getColumns() {
        return columns;
    }
    
    public List<JJSprint> JJSprintBean.getAllJJSprints() {
        return allJJSprints;
    }
    
    public void JJSprintBean.setAllJJSprints(List<JJSprint> allJJSprints) {
        this.allJJSprints = allJJSprints;
    }
    
    public String JJSprintBean.findAllJJSprints() {
        allJJSprints = jJSprintService.findAllJJSprints();
        dataVisible = !allJJSprints.isEmpty();
        return null;
    }
    
    public boolean JJSprintBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJSprintBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJSprintBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJSprintBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJSprintBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJSprintBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJSprintBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJSprintBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJSprintBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputTextarea nameCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMaximum(100);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel descriptionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionCreateOutput.setFor("descriptionCreateInput");
        descriptionCreateOutput.setId("descriptionCreateOutput");
        descriptionCreateOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionCreateOutput);
        
        InputTextarea descriptionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionCreateInput.setId("descriptionCreateInput");
        descriptionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.description}", String.class));
        descriptionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionCreateInput);
        
        Message descriptionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionCreateInputMessage.setId("descriptionCreateInputMessage");
        descriptionCreateInputMessage.setFor("descriptionCreateInput");
        descriptionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionCreateInputMessage);
        
        OutputLabel creationDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateCreateOutput.setFor("creationDateCreateInput");
        creationDateCreateOutput.setId("creationDateCreateOutput");
        creationDateCreateOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateCreateOutput);
        
        Calendar creationDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateCreateInput.setId("creationDateCreateInput");
        creationDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.creationDate}", Date.class));
        creationDateCreateInput.setNavigator(true);
        creationDateCreateInput.setEffect("slideDown");
        creationDateCreateInput.setPattern("dd/MM/yyyy");
        creationDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateCreateInput);
        
        Message creationDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateCreateInputMessage.setId("creationDateCreateInputMessage");
        creationDateCreateInputMessage.setFor("creationDateCreateInput");
        creationDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateCreateInputMessage);
        
        OutputLabel createdByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByCreateOutput.setFor("createdByCreateInput");
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.createdBy}", JJContact.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJSprintBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByCreateInput.setConverter(new JJContactConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        OutputLabel updatedDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateCreateOutput.setFor("updatedDateCreateInput");
        updatedDateCreateOutput.setId("updatedDateCreateOutput");
        updatedDateCreateOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateCreateOutput);
        
        Calendar updatedDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateCreateInput.setId("updatedDateCreateInput");
        updatedDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.updatedDate}", Date.class));
        updatedDateCreateInput.setNavigator(true);
        updatedDateCreateInput.setEffect("slideDown");
        updatedDateCreateInput.setPattern("dd/MM/yyyy");
        updatedDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateCreateInput);
        
        Message updatedDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateCreateInputMessage.setId("updatedDateCreateInputMessage");
        updatedDateCreateInputMessage.setFor("updatedDateCreateInput");
        updatedDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateCreateInputMessage);
        
        OutputLabel updatedByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByCreateOutput.setFor("updatedByCreateInput");
        updatedByCreateOutput.setId("updatedByCreateOutput");
        updatedByCreateOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByCreateOutput);
        
        AutoComplete updatedByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByCreateInput.setId("updatedByCreateInput");
        updatedByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.updatedBy}", JJContact.class));
        updatedByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJSprintBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByCreateInput.setDropdown(true);
        updatedByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByCreateInput.setConverter(new JJContactConverter());
        updatedByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByCreateInput);
        
        Message updatedByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByCreateInputMessage.setId("updatedByCreateInputMessage");
        updatedByCreateInputMessage.setFor("updatedByCreateInput");
        updatedByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByCreateInputMessage);
        
        OutputLabel enabledCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledCreateOutput.setFor("enabledCreateInput");
        enabledCreateOutput.setId("enabledCreateOutput");
        enabledCreateOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledCreateOutput);
        
        SelectBooleanCheckbox enabledCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledCreateInput.setId("enabledCreateInput");
        enabledCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.enabled}", Boolean.class));
        enabledCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledCreateInput);
        
        Message enabledCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledCreateInputMessage.setId("enabledCreateInputMessage");
        enabledCreateInputMessage.setFor("enabledCreateInput");
        enabledCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledCreateInputMessage);
        
        OutputLabel orderingCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        orderingCreateOutput.setFor("orderingCreateInput");
        orderingCreateOutput.setId("orderingCreateOutput");
        orderingCreateOutput.setValue("Ordering:");
        htmlPanelGrid.getChildren().add(orderingCreateOutput);
        
        Spinner orderingCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        orderingCreateInput.setId("orderingCreateInput");
        orderingCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.ordering}", Integer.class));
        orderingCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(orderingCreateInput);
        
        Message orderingCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        orderingCreateInputMessage.setId("orderingCreateInputMessage");
        orderingCreateInputMessage.setFor("orderingCreateInput");
        orderingCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(orderingCreateInputMessage);
        
        OutputLabel projectCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        projectCreateOutput.setFor("projectCreateInput");
        projectCreateOutput.setId("projectCreateOutput");
        projectCreateOutput.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectCreateOutput);
        
        AutoComplete projectCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        projectCreateInput.setId("projectCreateInput");
        projectCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.project}", JJProject.class));
        projectCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJSprintBean.completeProject}", List.class, new Class[] { String.class }));
        projectCreateInput.setDropdown(true);
        projectCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "project", String.class));
        projectCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{project.name} #{project.description} #{project.creationDate} #{project.updatedDate}", String.class));
        projectCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{project}", JJProject.class));
        projectCreateInput.setConverter(new JJProjectConverter());
        projectCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(projectCreateInput);
        
        Message projectCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectCreateInputMessage.setId("projectCreateInputMessage");
        projectCreateInputMessage.setFor("projectCreateInput");
        projectCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectCreateInputMessage);
        
        HtmlOutputText buildsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        buildsCreateOutput.setId("buildsCreateOutput");
        buildsCreateOutput.setValue("Builds:");
        htmlPanelGrid.getChildren().add(buildsCreateOutput);
        
        HtmlOutputText buildsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        buildsCreateInput.setId("buildsCreateInput");
        buildsCreateInput.setValue("This relationship is managed from the JJBuild side");
        htmlPanelGrid.getChildren().add(buildsCreateInput);
        
        Message buildsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        buildsCreateInputMessage.setId("buildsCreateInputMessage");
        buildsCreateInputMessage.setFor("buildsCreateInput");
        buildsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(buildsCreateInputMessage);
        
        HtmlOutputText tasksCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksCreateOutput.setId("tasksCreateOutput");
        tasksCreateOutput.setValue("Tasks:");
        htmlPanelGrid.getChildren().add(tasksCreateOutput);
        
        HtmlOutputText tasksCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksCreateInput.setId("tasksCreateInput");
        tasksCreateInput.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(tasksCreateInput);
        
        Message tasksCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tasksCreateInputMessage.setId("tasksCreateInputMessage");
        tasksCreateInputMessage.setFor("tasksCreateInput");
        tasksCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tasksCreateInputMessage);
        
        HtmlOutputText obstaclesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        obstaclesCreateOutput.setId("obstaclesCreateOutput");
        obstaclesCreateOutput.setValue("Obstacles:");
        htmlPanelGrid.getChildren().add(obstaclesCreateOutput);
        
        HtmlOutputText obstaclesCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        obstaclesCreateInput.setId("obstaclesCreateInput");
        obstaclesCreateInput.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(obstaclesCreateInput);
        
        Message obstaclesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        obstaclesCreateInputMessage.setId("obstaclesCreateInputMessage");
        obstaclesCreateInputMessage.setFor("obstaclesCreateInput");
        obstaclesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(obstaclesCreateInputMessage);
        
        OutputLabel contactsCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        contactsCreateOutput.setFor("contactsCreateInput");
        contactsCreateOutput.setId("contactsCreateOutput");
        contactsCreateOutput.setValue("Contacts:");
        htmlPanelGrid.getChildren().add(contactsCreateOutput);
        
        SelectManyMenu contactsCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        contactsCreateInput.setId("contactsCreateInput");
        contactsCreateInput.setConverter(new JJContactConverter());
        contactsCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.selectedContacts}", List.class));
        UISelectItems contactsCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        contactsCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.allJJContacts}", List.class));
        contactsCreateInput.setRequired(false);
        contactsCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJContact", String.class));
        contactsCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJContact}", String.class));
        contactsCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJContact}", JJContact.class));
        contactsCreateInput.getChildren().add(contactsCreateInputItems);
        htmlPanelGrid.getChildren().add(contactsCreateInput);
        
        Message contactsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        contactsCreateInputMessage.setId("contactsCreateInputMessage");
        contactsCreateInputMessage.setFor("contactsCreateInput");
        contactsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(contactsCreateInputMessage);
        
        HtmlOutputText messagesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesCreateOutput.setId("messagesCreateOutput");
        messagesCreateOutput.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesCreateOutput);
        
        HtmlOutputText messagesCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesCreateInput.setId("messagesCreateInput");
        messagesCreateInput.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesCreateInput);
        
        Message messagesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messagesCreateInputMessage.setId("messagesCreateInputMessage");
        messagesCreateInputMessage.setFor("messagesCreateInput");
        messagesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messagesCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJSprintBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputTextarea nameEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMaximum(100);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel descriptionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionEditOutput.setFor("descriptionEditInput");
        descriptionEditOutput.setId("descriptionEditOutput");
        descriptionEditOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionEditOutput);
        
        InputTextarea descriptionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionEditInput.setId("descriptionEditInput");
        descriptionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.description}", String.class));
        descriptionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionEditInput);
        
        Message descriptionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionEditInputMessage.setId("descriptionEditInputMessage");
        descriptionEditInputMessage.setFor("descriptionEditInput");
        descriptionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionEditInputMessage);
        
        OutputLabel creationDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateEditOutput.setFor("creationDateEditInput");
        creationDateEditOutput.setId("creationDateEditOutput");
        creationDateEditOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateEditOutput);
        
        Calendar creationDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateEditInput.setId("creationDateEditInput");
        creationDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.creationDate}", Date.class));
        creationDateEditInput.setNavigator(true);
        creationDateEditInput.setEffect("slideDown");
        creationDateEditInput.setPattern("dd/MM/yyyy");
        creationDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateEditInput);
        
        Message creationDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateEditInputMessage.setId("creationDateEditInputMessage");
        creationDateEditInputMessage.setFor("creationDateEditInput");
        creationDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateEditInputMessage);
        
        OutputLabel createdByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByEditOutput.setFor("createdByEditInput");
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.createdBy}", JJContact.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJSprintBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByEditInput.setConverter(new JJContactConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        OutputLabel updatedDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateEditOutput.setFor("updatedDateEditInput");
        updatedDateEditOutput.setId("updatedDateEditOutput");
        updatedDateEditOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateEditOutput);
        
        Calendar updatedDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateEditInput.setId("updatedDateEditInput");
        updatedDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.updatedDate}", Date.class));
        updatedDateEditInput.setNavigator(true);
        updatedDateEditInput.setEffect("slideDown");
        updatedDateEditInput.setPattern("dd/MM/yyyy");
        updatedDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateEditInput);
        
        Message updatedDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateEditInputMessage.setId("updatedDateEditInputMessage");
        updatedDateEditInputMessage.setFor("updatedDateEditInput");
        updatedDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateEditInputMessage);
        
        OutputLabel updatedByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByEditOutput.setFor("updatedByEditInput");
        updatedByEditOutput.setId("updatedByEditOutput");
        updatedByEditOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByEditOutput);
        
        AutoComplete updatedByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByEditInput.setId("updatedByEditInput");
        updatedByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.updatedBy}", JJContact.class));
        updatedByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJSprintBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByEditInput.setDropdown(true);
        updatedByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByEditInput.setConverter(new JJContactConverter());
        updatedByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByEditInput);
        
        Message updatedByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByEditInputMessage.setId("updatedByEditInputMessage");
        updatedByEditInputMessage.setFor("updatedByEditInput");
        updatedByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByEditInputMessage);
        
        OutputLabel enabledEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledEditOutput.setFor("enabledEditInput");
        enabledEditOutput.setId("enabledEditOutput");
        enabledEditOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledEditOutput);
        
        SelectBooleanCheckbox enabledEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledEditInput.setId("enabledEditInput");
        enabledEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.enabled}", Boolean.class));
        enabledEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledEditInput);
        
        Message enabledEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledEditInputMessage.setId("enabledEditInputMessage");
        enabledEditInputMessage.setFor("enabledEditInput");
        enabledEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledEditInputMessage);
        
        OutputLabel orderingEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        orderingEditOutput.setFor("orderingEditInput");
        orderingEditOutput.setId("orderingEditOutput");
        orderingEditOutput.setValue("Ordering:");
        htmlPanelGrid.getChildren().add(orderingEditOutput);
        
        Spinner orderingEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        orderingEditInput.setId("orderingEditInput");
        orderingEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.ordering}", Integer.class));
        orderingEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(orderingEditInput);
        
        Message orderingEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        orderingEditInputMessage.setId("orderingEditInputMessage");
        orderingEditInputMessage.setFor("orderingEditInput");
        orderingEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(orderingEditInputMessage);
        
        OutputLabel projectEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        projectEditOutput.setFor("projectEditInput");
        projectEditOutput.setId("projectEditOutput");
        projectEditOutput.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectEditOutput);
        
        AutoComplete projectEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        projectEditInput.setId("projectEditInput");
        projectEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.project}", JJProject.class));
        projectEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJSprintBean.completeProject}", List.class, new Class[] { String.class }));
        projectEditInput.setDropdown(true);
        projectEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "project", String.class));
        projectEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{project.name} #{project.description} #{project.creationDate} #{project.updatedDate}", String.class));
        projectEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{project}", JJProject.class));
        projectEditInput.setConverter(new JJProjectConverter());
        projectEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(projectEditInput);
        
        Message projectEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectEditInputMessage.setId("projectEditInputMessage");
        projectEditInputMessage.setFor("projectEditInput");
        projectEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectEditInputMessage);
        
        HtmlOutputText buildsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        buildsEditOutput.setId("buildsEditOutput");
        buildsEditOutput.setValue("Builds:");
        htmlPanelGrid.getChildren().add(buildsEditOutput);
        
        HtmlOutputText buildsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        buildsEditInput.setId("buildsEditInput");
        buildsEditInput.setValue("This relationship is managed from the JJBuild side");
        htmlPanelGrid.getChildren().add(buildsEditInput);
        
        Message buildsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        buildsEditInputMessage.setId("buildsEditInputMessage");
        buildsEditInputMessage.setFor("buildsEditInput");
        buildsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(buildsEditInputMessage);
        
        HtmlOutputText tasksEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksEditOutput.setId("tasksEditOutput");
        tasksEditOutput.setValue("Tasks:");
        htmlPanelGrid.getChildren().add(tasksEditOutput);
        
        HtmlOutputText tasksEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksEditInput.setId("tasksEditInput");
        tasksEditInput.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(tasksEditInput);
        
        Message tasksEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tasksEditInputMessage.setId("tasksEditInputMessage");
        tasksEditInputMessage.setFor("tasksEditInput");
        tasksEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tasksEditInputMessage);
        
        HtmlOutputText obstaclesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        obstaclesEditOutput.setId("obstaclesEditOutput");
        obstaclesEditOutput.setValue("Obstacles:");
        htmlPanelGrid.getChildren().add(obstaclesEditOutput);
        
        HtmlOutputText obstaclesEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        obstaclesEditInput.setId("obstaclesEditInput");
        obstaclesEditInput.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(obstaclesEditInput);
        
        Message obstaclesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        obstaclesEditInputMessage.setId("obstaclesEditInputMessage");
        obstaclesEditInputMessage.setFor("obstaclesEditInput");
        obstaclesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(obstaclesEditInputMessage);
        
        OutputLabel contactsEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        contactsEditOutput.setFor("contactsEditInput");
        contactsEditOutput.setId("contactsEditOutput");
        contactsEditOutput.setValue("Contacts:");
        htmlPanelGrid.getChildren().add(contactsEditOutput);
        
        SelectManyMenu contactsEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        contactsEditInput.setId("contactsEditInput");
        contactsEditInput.setConverter(new JJContactConverter());
        contactsEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.selectedContacts}", List.class));
        UISelectItems contactsEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        contactsEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.allJJContacts}", List.class));
        contactsEditInput.setRequired(false);
        contactsEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJContact", String.class));
        contactsEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJContact}", String.class));
        contactsEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJContact}", JJContact.class));
        contactsEditInput.getChildren().add(contactsEditInputItems);
        htmlPanelGrid.getChildren().add(contactsEditInput);
        
        Message contactsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        contactsEditInputMessage.setId("contactsEditInputMessage");
        contactsEditInputMessage.setFor("contactsEditInput");
        contactsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(contactsEditInputMessage);
        
        HtmlOutputText messagesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesEditOutput.setId("messagesEditOutput");
        messagesEditOutput.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesEditOutput);
        
        HtmlOutputText messagesEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesEditInput.setId("messagesEditInput");
        messagesEditInput.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesEditInput);
        
        Message messagesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messagesEditInputMessage.setId("messagesEditInputMessage");
        messagesEditInputMessage.setFor("messagesEditInput");
        messagesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messagesEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJSprintBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        InputTextarea nameValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.name}", String.class));
        nameValue.setReadonly(true);
        nameValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText descriptionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionLabel.setId("descriptionLabel");
        descriptionLabel.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionLabel);
        
        InputTextarea descriptionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionValue.setId("descriptionValue");
        descriptionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.description}", String.class));
        descriptionValue.setReadonly(true);
        descriptionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descriptionValue);
        
        HtmlOutputText creationDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateLabel.setId("creationDateLabel");
        creationDateLabel.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateLabel);
        
        HtmlOutputText creationDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.creationDate}", Date.class));
        DateTimeConverter creationDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationDateValueConverter.setPattern("dd/MM/yyyy");
        creationDateValue.setConverter(creationDateValueConverter);
        htmlPanelGrid.getChildren().add(creationDateValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.createdBy}", JJContact.class));
        createdByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        HtmlOutputText updatedDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateLabel.setId("updatedDateLabel");
        updatedDateLabel.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateLabel);
        
        HtmlOutputText updatedDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.updatedDate}", Date.class));
        DateTimeConverter updatedDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updatedDateValueConverter.setPattern("dd/MM/yyyy");
        updatedDateValue.setConverter(updatedDateValueConverter);
        htmlPanelGrid.getChildren().add(updatedDateValue);
        
        HtmlOutputText updatedByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByLabel.setId("updatedByLabel");
        updatedByLabel.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByLabel);
        
        HtmlOutputText updatedByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.updatedBy}", JJContact.class));
        updatedByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(updatedByValue);
        
        HtmlOutputText enabledLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledLabel.setId("enabledLabel");
        enabledLabel.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledLabel);
        
        HtmlOutputText enabledValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.enabled}", String.class));
        htmlPanelGrid.getChildren().add(enabledValue);
        
        HtmlOutputText orderingLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        orderingLabel.setId("orderingLabel");
        orderingLabel.setValue("Ordering:");
        htmlPanelGrid.getChildren().add(orderingLabel);
        
        HtmlOutputText orderingValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        orderingValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.ordering}", String.class));
        htmlPanelGrid.getChildren().add(orderingValue);
        
        HtmlOutputText projectLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectLabel.setId("projectLabel");
        projectLabel.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectLabel);
        
        HtmlOutputText projectValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.project}", JJProject.class));
        projectValue.setConverter(new JJProjectConverter());
        htmlPanelGrid.getChildren().add(projectValue);
        
        HtmlOutputText buildsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        buildsLabel.setId("buildsLabel");
        buildsLabel.setValue("Builds:");
        htmlPanelGrid.getChildren().add(buildsLabel);
        
        HtmlOutputText buildsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        buildsValue.setId("buildsValue");
        buildsValue.setValue("This relationship is managed from the JJBuild side");
        htmlPanelGrid.getChildren().add(buildsValue);
        
        HtmlOutputText tasksLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksLabel.setId("tasksLabel");
        tasksLabel.setValue("Tasks:");
        htmlPanelGrid.getChildren().add(tasksLabel);
        
        HtmlOutputText tasksValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksValue.setId("tasksValue");
        tasksValue.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(tasksValue);
        
        HtmlOutputText obstaclesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        obstaclesLabel.setId("obstaclesLabel");
        obstaclesLabel.setValue("Obstacles:");
        htmlPanelGrid.getChildren().add(obstaclesLabel);
        
        HtmlOutputText obstaclesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        obstaclesValue.setId("obstaclesValue");
        obstaclesValue.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(obstaclesValue);
        
        HtmlOutputText contactsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contactsLabel.setId("contactsLabel");
        contactsLabel.setValue("Contacts:");
        htmlPanelGrid.getChildren().add(contactsLabel);
        
        SelectManyMenu contactsValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        contactsValue.setId("contactsValue");
        contactsValue.setConverter(new JJContactConverter());
        contactsValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.selectedContacts}", List.class));
        UISelectItems contactsValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        contactsValue.setReadonly(true);
        contactsValue.setDisabled(true);
        contactsValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJSprintBean.JJSprint_.contacts}", Set.class));
        contactsValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJContact", String.class));
        contactsValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJContact}", String.class));
        contactsValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJContact}", JJContact.class));
        contactsValue.getChildren().add(contactsValueItems);
        htmlPanelGrid.getChildren().add(contactsValue);
        
        HtmlOutputText messagesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesLabel.setId("messagesLabel");
        messagesLabel.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesLabel);
        
        HtmlOutputText messagesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesValue.setId("messagesValue");
        messagesValue.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesValue);
        
        return htmlPanelGrid;
    }
    
    public JJSprint JJSprintBean.getJJSprint_() {
        if (JJSprint_ == null) {
            JJSprint_ = new JJSprint();
        }
        return JJSprint_;
    }
    
    public void JJSprintBean.setJJSprint_(JJSprint JJSprint_) {
        this.JJSprint_ = JJSprint_;
    }
    
    public List<JJContact> JJSprintBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJSprintBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJProject> JJSprintBean.completeProject(String query) {
        List<JJProject> suggestions = new ArrayList<JJProject>();
        for (JJProject jJProject : jJProjectService.findAllJJProjects()) {
            String jJProjectStr = String.valueOf(jJProject.getName() +  " "  + jJProject.getDescription() +  " "  + jJProject.getCreationDate() +  " "  + jJProject.getUpdatedDate());
            if (jJProjectStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJProject);
            }
        }
        return suggestions;
    }
    
    public List<JJBuild> JJSprintBean.getSelectedBuilds() {
        return selectedBuilds;
    }
    
    public void JJSprintBean.setSelectedBuilds(List<JJBuild> selectedBuilds) {
        if (selectedBuilds != null) {
            JJSprint_.setBuilds(new HashSet<JJBuild>(selectedBuilds));
        }
        this.selectedBuilds = selectedBuilds;
    }
    
    public List<JJTask> JJSprintBean.getSelectedTasks() {
        return selectedTasks;
    }
    
    public void JJSprintBean.setSelectedTasks(List<JJTask> selectedTasks) {
        if (selectedTasks != null) {
            JJSprint_.setTasks(new HashSet<JJTask>(selectedTasks));
        }
        this.selectedTasks = selectedTasks;
    }
    
    public List<JJTask> JJSprintBean.getSelectedObstacles() {
        return selectedObstacles;
    }
    
    public void JJSprintBean.setSelectedObstacles(List<JJTask> selectedObstacles) {
        if (selectedObstacles != null) {
            JJSprint_.setObstacles(new HashSet<JJTask>(selectedObstacles));
        }
        this.selectedObstacles = selectedObstacles;
    }
    
    public List<JJContact> JJSprintBean.getSelectedContacts() {
        return selectedContacts;
    }
    
    public void JJSprintBean.setSelectedContacts(List<JJContact> selectedContacts) {
        if (selectedContacts != null) {
            JJSprint_.setContacts(new HashSet<JJContact>(selectedContacts));
        }
        this.selectedContacts = selectedContacts;
    }
    
    public List<JJMessage> JJSprintBean.getSelectedMessages() {
        return selectedMessages;
    }
    
    public void JJSprintBean.setSelectedMessages(List<JJMessage> selectedMessages) {
        if (selectedMessages != null) {
            JJSprint_.setMessages(new HashSet<JJMessage>(selectedMessages));
        }
        this.selectedMessages = selectedMessages;
    }
    
    public String JJSprintBean.onEdit() {
        if (JJSprint_ != null && JJSprint_.getBuilds() != null) {
            selectedBuilds = new ArrayList<JJBuild>(JJSprint_.getBuilds());
        }
        if (JJSprint_ != null && JJSprint_.getTasks() != null) {
            selectedTasks = new ArrayList<JJTask>(JJSprint_.getTasks());
        }
        if (JJSprint_ != null && JJSprint_.getObstacles() != null) {
            selectedObstacles = new ArrayList<JJTask>(JJSprint_.getObstacles());
        }
        if (JJSprint_ != null && JJSprint_.getContacts() != null) {
            selectedContacts = new ArrayList<JJContact>(JJSprint_.getContacts());
        }
        if (JJSprint_ != null && JJSprint_.getMessages() != null) {
            selectedMessages = new ArrayList<JJMessage>(JJSprint_.getMessages());
        }
        return null;
    }
    
    public boolean JJSprintBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJSprintBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJSprintBean.displayList() {
        createDialogVisible = false;
        findAllJJSprints();
        return "JJSprint_";
    }
    
    public String JJSprintBean.displayCreateDialog() {
        JJSprint_ = new JJSprint();
        createDialogVisible = true;
        return "JJSprint_";
    }
    
    public String JJSprintBean.persist() {
        String message = "";
        if (JJSprint_.getId() != null) {
            jJSprintService.updateJJSprint(JJSprint_);
            message = "message_successfully_updated";
        } else {
            jJSprintService.saveJJSprint(JJSprint_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJSprint");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJSprints();
    }
    
    public String JJSprintBean.delete() {
        jJSprintService.deleteJJSprint(JJSprint_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJSprint");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJSprints();
    }    
   
    
    public void JJSprintBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import com.starit.janjoonweb.domain.JJAuditLog;
import com.starit.janjoonweb.domain.JJAuditLogService;
import com.starit.janjoonweb.domain.JJContact;
import com.starit.janjoonweb.domain.JJContactService;
import com.starit.janjoonweb.ui.mb.JJAuditLogBean;
import com.starit.janjoonweb.ui.mb.converter.JJContactConverter;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJAuditLogBean_Roo_ManagedBean {
    
    declare @type: JJAuditLogBean: @ManagedBean(name = "jJAuditLogBean");
    
    declare @type: JJAuditLogBean: @SessionScoped;
    
    @Autowired
    JJAuditLogService JJAuditLogBean.jJAuditLogService;
    
    @Autowired
    JJContactService JJAuditLogBean.jJContactService;
    
    private String JJAuditLogBean.name = "JJAuditLogs";
    
    private JJAuditLog JJAuditLogBean.JJAuditLog_;
    
    private List<JJAuditLog> JJAuditLogBean.allJJAuditLogs;
    
    private boolean JJAuditLogBean.dataVisible = false;
    
    private List<String> JJAuditLogBean.columns;
    
    private HtmlPanelGrid JJAuditLogBean.createPanelGrid;
    
    private HtmlPanelGrid JJAuditLogBean.editPanelGrid;
    
    private HtmlPanelGrid JJAuditLogBean.viewPanelGrid;
    
    private boolean JJAuditLogBean.createDialogVisible = false;
    
    @PostConstruct
    public void JJAuditLogBean.init() {
        columns = new ArrayList<String>();
        columns.add("auditLogDate");
        columns.add("objet");
        columns.add("keyName");
        columns.add("keyValue");
    }
    
    public String JJAuditLogBean.getName() {
        return name;
    }
    
    public List<String> JJAuditLogBean.getColumns() {
        return columns;
    }
    
    public List<JJAuditLog> JJAuditLogBean.getAllJJAuditLogs() {
        return allJJAuditLogs;
    }
    
    public void JJAuditLogBean.setAllJJAuditLogs(List<JJAuditLog> allJJAuditLogs) {
        this.allJJAuditLogs = allJJAuditLogs;
    }
    
    public String JJAuditLogBean.findAllJJAuditLogs() {
        allJJAuditLogs = jJAuditLogService.findAllJJAuditLogs();
        dataVisible = !allJJAuditLogs.isEmpty();
        return null;
    }
    
    public boolean JJAuditLogBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJAuditLogBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJAuditLogBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJAuditLogBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJAuditLogBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJAuditLogBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJAuditLogBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJAuditLogBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJAuditLogBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel auditLogDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        auditLogDateCreateOutput.setFor("auditLogDateCreateInput");
        auditLogDateCreateOutput.setId("auditLogDateCreateOutput");
        auditLogDateCreateOutput.setValue("Audit Log Date:");
        htmlPanelGrid.getChildren().add(auditLogDateCreateOutput);
        
        Calendar auditLogDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        auditLogDateCreateInput.setId("auditLogDateCreateInput");
        auditLogDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJAuditLogBean.JJAuditLog_.auditLogDate}", Date.class));
        auditLogDateCreateInput.setNavigator(true);
        auditLogDateCreateInput.setEffect("slideDown");
        auditLogDateCreateInput.setPattern("dd/MM/yyyy");
        auditLogDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(auditLogDateCreateInput);
        
        Message auditLogDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        auditLogDateCreateInputMessage.setId("auditLogDateCreateInputMessage");
        auditLogDateCreateInputMessage.setFor("auditLogDateCreateInput");
        auditLogDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(auditLogDateCreateInputMessage);
        
        OutputLabel contactCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        contactCreateOutput.setFor("contactCreateInput");
        contactCreateOutput.setId("contactCreateOutput");
        contactCreateOutput.setValue("Contact:");
        htmlPanelGrid.getChildren().add(contactCreateOutput);
        
        AutoComplete contactCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        contactCreateInput.setId("contactCreateInput");
        contactCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJAuditLogBean.JJAuditLog_.contact}", JJContact.class));
        contactCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJAuditLogBean.completeContact}", List.class, new Class[] { String.class }));
        contactCreateInput.setDropdown(true);
        contactCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "contact", String.class));
        contactCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{contact.name} #{contact.description} #{contact.creationDate} #{contact.updatedDate}", String.class));
        contactCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{contact}", JJContact.class));
        contactCreateInput.setConverter(new JJContactConverter());
        contactCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(contactCreateInput);
        
        Message contactCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        contactCreateInputMessage.setId("contactCreateInputMessage");
        contactCreateInputMessage.setFor("contactCreateInput");
        contactCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(contactCreateInputMessage);
        
        OutputLabel objetCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        objetCreateOutput.setFor("objetCreateInput");
        objetCreateOutput.setId("objetCreateOutput");
        objetCreateOutput.setValue("Objet:");
        htmlPanelGrid.getChildren().add(objetCreateOutput);
        
        InputText objetCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        objetCreateInput.setId("objetCreateInput");
        objetCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJAuditLogBean.JJAuditLog_.objet}", String.class));
        objetCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(objetCreateInput);
        
        Message objetCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        objetCreateInputMessage.setId("objetCreateInputMessage");
        objetCreateInputMessage.setFor("objetCreateInput");
        objetCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(objetCreateInputMessage);
        
        OutputLabel keyNameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        keyNameCreateOutput.setFor("keyNameCreateInput");
        keyNameCreateOutput.setId("keyNameCreateOutput");
        keyNameCreateOutput.setValue("Key Name:");
        htmlPanelGrid.getChildren().add(keyNameCreateOutput);
        
        InputTextarea keyNameCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        keyNameCreateInput.setId("keyNameCreateInput");
        keyNameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJAuditLogBean.JJAuditLog_.keyName}", String.class));
        LengthValidator keyNameCreateInputValidator = new LengthValidator();
        keyNameCreateInputValidator.setMaximum(50);
        keyNameCreateInput.addValidator(keyNameCreateInputValidator);
        keyNameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(keyNameCreateInput);
        
        Message keyNameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        keyNameCreateInputMessage.setId("keyNameCreateInputMessage");
        keyNameCreateInputMessage.setFor("keyNameCreateInput");
        keyNameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(keyNameCreateInputMessage);
        
        OutputLabel keyValueCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        keyValueCreateOutput.setFor("keyValueCreateInput");
        keyValueCreateOutput.setId("keyValueCreateOutput");
        keyValueCreateOutput.setValue("Key Value:");
        htmlPanelGrid.getChildren().add(keyValueCreateOutput);
        
        InputTextarea keyValueCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        keyValueCreateInput.setId("keyValueCreateInput");
        keyValueCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJAuditLogBean.JJAuditLog_.keyValue}", String.class));
        keyValueCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(keyValueCreateInput);
        
        Message keyValueCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        keyValueCreateInputMessage.setId("keyValueCreateInputMessage");
        keyValueCreateInputMessage.setFor("keyValueCreateInput");
        keyValueCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(keyValueCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJAuditLogBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel auditLogDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        auditLogDateEditOutput.setFor("auditLogDateEditInput");
        auditLogDateEditOutput.setId("auditLogDateEditOutput");
        auditLogDateEditOutput.setValue("Audit Log Date:");
        htmlPanelGrid.getChildren().add(auditLogDateEditOutput);
        
        Calendar auditLogDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        auditLogDateEditInput.setId("auditLogDateEditInput");
        auditLogDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJAuditLogBean.JJAuditLog_.auditLogDate}", Date.class));
        auditLogDateEditInput.setNavigator(true);
        auditLogDateEditInput.setEffect("slideDown");
        auditLogDateEditInput.setPattern("dd/MM/yyyy");
        auditLogDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(auditLogDateEditInput);
        
        Message auditLogDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        auditLogDateEditInputMessage.setId("auditLogDateEditInputMessage");
        auditLogDateEditInputMessage.setFor("auditLogDateEditInput");
        auditLogDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(auditLogDateEditInputMessage);
        
        OutputLabel contactEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        contactEditOutput.setFor("contactEditInput");
        contactEditOutput.setId("contactEditOutput");
        contactEditOutput.setValue("Contact:");
        htmlPanelGrid.getChildren().add(contactEditOutput);
        
        AutoComplete contactEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        contactEditInput.setId("contactEditInput");
        contactEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJAuditLogBean.JJAuditLog_.contact}", JJContact.class));
        contactEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJAuditLogBean.completeContact}", List.class, new Class[] { String.class }));
        contactEditInput.setDropdown(true);
        contactEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "contact", String.class));
        contactEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{contact.name} #{contact.description} #{contact.creationDate} #{contact.updatedDate}", String.class));
        contactEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{contact}", JJContact.class));
        contactEditInput.setConverter(new JJContactConverter());
        contactEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(contactEditInput);
        
        Message contactEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        contactEditInputMessage.setId("contactEditInputMessage");
        contactEditInputMessage.setFor("contactEditInput");
        contactEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(contactEditInputMessage);
        
        OutputLabel objetEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        objetEditOutput.setFor("objetEditInput");
        objetEditOutput.setId("objetEditOutput");
        objetEditOutput.setValue("Objet:");
        htmlPanelGrid.getChildren().add(objetEditOutput);
        
        InputText objetEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        objetEditInput.setId("objetEditInput");
        objetEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJAuditLogBean.JJAuditLog_.objet}", String.class));
        objetEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(objetEditInput);
        
        Message objetEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        objetEditInputMessage.setId("objetEditInputMessage");
        objetEditInputMessage.setFor("objetEditInput");
        objetEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(objetEditInputMessage);
        
        OutputLabel keyNameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        keyNameEditOutput.setFor("keyNameEditInput");
        keyNameEditOutput.setId("keyNameEditOutput");
        keyNameEditOutput.setValue("Key Name:");
        htmlPanelGrid.getChildren().add(keyNameEditOutput);
        
        InputTextarea keyNameEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        keyNameEditInput.setId("keyNameEditInput");
        keyNameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJAuditLogBean.JJAuditLog_.keyName}", String.class));
        LengthValidator keyNameEditInputValidator = new LengthValidator();
        keyNameEditInputValidator.setMaximum(50);
        keyNameEditInput.addValidator(keyNameEditInputValidator);
        keyNameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(keyNameEditInput);
        
        Message keyNameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        keyNameEditInputMessage.setId("keyNameEditInputMessage");
        keyNameEditInputMessage.setFor("keyNameEditInput");
        keyNameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(keyNameEditInputMessage);
        
        OutputLabel keyValueEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        keyValueEditOutput.setFor("keyValueEditInput");
        keyValueEditOutput.setId("keyValueEditOutput");
        keyValueEditOutput.setValue("Key Value:");
        htmlPanelGrid.getChildren().add(keyValueEditOutput);
        
        InputTextarea keyValueEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        keyValueEditInput.setId("keyValueEditInput");
        keyValueEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJAuditLogBean.JJAuditLog_.keyValue}", String.class));
        keyValueEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(keyValueEditInput);
        
        Message keyValueEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        keyValueEditInputMessage.setId("keyValueEditInputMessage");
        keyValueEditInputMessage.setFor("keyValueEditInput");
        keyValueEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(keyValueEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJAuditLogBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText auditLogDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        auditLogDateLabel.setId("auditLogDateLabel");
        auditLogDateLabel.setValue("Audit Log Date:");
        htmlPanelGrid.getChildren().add(auditLogDateLabel);
        
        HtmlOutputText auditLogDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        auditLogDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJAuditLogBean.JJAuditLog_.auditLogDate}", Date.class));
        DateTimeConverter auditLogDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        auditLogDateValueConverter.setPattern("dd/MM/yyyy");
        auditLogDateValue.setConverter(auditLogDateValueConverter);
        htmlPanelGrid.getChildren().add(auditLogDateValue);
        
        HtmlOutputText contactLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contactLabel.setId("contactLabel");
        contactLabel.setValue("Contact:");
        htmlPanelGrid.getChildren().add(contactLabel);
        
        HtmlOutputText contactValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contactValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJAuditLogBean.JJAuditLog_.contact}", JJContact.class));
        contactValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(contactValue);
        
        HtmlOutputText objetLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        objetLabel.setId("objetLabel");
        objetLabel.setValue("Objet:");
        htmlPanelGrid.getChildren().add(objetLabel);
        
        HtmlOutputText objetValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        objetValue.setId("objetValue");
        objetValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJAuditLogBean.JJAuditLog_.objet}", String.class));
        htmlPanelGrid.getChildren().add(objetValue);
        
        HtmlOutputText keyNameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        keyNameLabel.setId("keyNameLabel");
        keyNameLabel.setValue("Key Name:");
        htmlPanelGrid.getChildren().add(keyNameLabel);
        
        InputTextarea keyNameValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        keyNameValue.setId("keyNameValue");
        keyNameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJAuditLogBean.JJAuditLog_.keyName}", String.class));
        keyNameValue.setReadonly(true);
        keyNameValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(keyNameValue);
        
        HtmlOutputText keyValueLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        keyValueLabel.setId("keyValueLabel");
        keyValueLabel.setValue("Key Value:");
        htmlPanelGrid.getChildren().add(keyValueLabel);
        
        InputTextarea keyValueValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        keyValueValue.setId("keyValueValue");
        keyValueValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJAuditLogBean.JJAuditLog_.keyValue}", String.class));
        keyValueValue.setReadonly(true);
        keyValueValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(keyValueValue);
        
        return htmlPanelGrid;
    }
    
    public JJAuditLog JJAuditLogBean.getJJAuditLog_() {
        if (JJAuditLog_ == null) {
            JJAuditLog_ = new JJAuditLog();
        }
        return JJAuditLog_;
    }
    
    public void JJAuditLogBean.setJJAuditLog_(JJAuditLog JJAuditLog_) {
        this.JJAuditLog_ = JJAuditLog_;
    }
    
    public List<JJContact> JJAuditLogBean.completeContact(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public String JJAuditLogBean.onEdit() {
        return null;
    }
    
    public boolean JJAuditLogBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJAuditLogBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJAuditLogBean.displayList() {
        createDialogVisible = false;
        findAllJJAuditLogs();
        return "JJAuditLog_";
    }
    
    public String JJAuditLogBean.displayCreateDialog() {
        JJAuditLog_ = new JJAuditLog();
        createDialogVisible = true;
        return "JJAuditLog_";
    }
    
    public String JJAuditLogBean.persist() {
        String message = "";
        if (JJAuditLog_.getId() != null) {
            jJAuditLogService.updateJJAuditLog(JJAuditLog_);
            message = "message_successfully_updated";
        } else {
            jJAuditLogService.saveJJAuditLog(JJAuditLog_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJAuditLog");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJAuditLogs();
    }
    
    public String JJAuditLogBean.delete() {
        jJAuditLogService.deleteJJAuditLog(JJAuditLog_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJAuditLog");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJAuditLogs();
    }
    
    public void JJAuditLogBean.reset() {
        JJAuditLog_ = null;
        createDialogVisible = false;
    }
    
    public void JJAuditLogBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

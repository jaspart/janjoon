// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import com.starit.janjoonweb.domain.JJCategory;
import com.starit.janjoonweb.domain.JJCategoryService;
import com.starit.janjoonweb.domain.JJChapter;
import com.starit.janjoonweb.domain.JJChapterService;
import com.starit.janjoonweb.domain.JJContact;
import com.starit.janjoonweb.domain.JJContactService;
import com.starit.janjoonweb.domain.JJProject;
import com.starit.janjoonweb.domain.JJProjectService;
import com.starit.janjoonweb.domain.JJRequirement;
import com.starit.janjoonweb.ui.mb.JJChapterBean;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJChapterBean_Roo_ManagedBean {
    
    declare @type: JJChapterBean: @ManagedBean(name = "jJChapterBean");
    
    declare @type: JJChapterBean: @SessionScoped;
    
    @Autowired
    JJChapterService JJChapterBean.jJChapterService;
    
    @Autowired
    JJContactService JJChapterBean.jJContactService;
    
    @Autowired
    JJProjectService JJChapterBean.jJProjectService;
    
    @Autowired
    JJCategoryService JJChapterBean.jJCategoryService;
    
    private String JJChapterBean.name = "JJChapters";
    
    private JJChapter JJChapterBean.JJChapter_;
    
    private List<JJChapter> JJChapterBean.allJJChapters;
    
    private boolean JJChapterBean.dataVisible = false;
    
    private List<String> JJChapterBean.columns;
    
    private HtmlPanelGrid JJChapterBean.createPanelGrid;
    
    private HtmlPanelGrid JJChapterBean.editPanelGrid;
    
    private HtmlPanelGrid JJChapterBean.viewPanelGrid;
    
    private boolean JJChapterBean.createDialogVisible = false;
    
    private List<JJChapter> JJChapterBean.selectedChapters;
    
    private List<JJRequirement> JJChapterBean.selectedRequirements;
    
    @PostConstruct
    public void JJChapterBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
        columns.add("ordering");
    }
    
    public String JJChapterBean.getName() {
        return name;
    }
    
    public List<String> JJChapterBean.getColumns() {
        return columns;
    }
    
    public List<JJChapter> JJChapterBean.getAllJJChapters() {
        return allJJChapters;
    }
    
    public void JJChapterBean.setAllJJChapters(List<JJChapter> allJJChapters) {
        this.allJJChapters = allJJChapters;
    }
    
    public String JJChapterBean.findAllJJChapters() {
        allJJChapters = jJChapterService.findAllJJChapters();
        dataVisible = !allJJChapters.isEmpty();
        return null;
    }
    
    public boolean JJChapterBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJChapterBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJChapterBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJChapterBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJChapterBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJChapterBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJChapterBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJChapterBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public JJChapter JJChapterBean.getJJChapter_() {
        if (JJChapter_ == null) {
            JJChapter_ = new JJChapter();
        }
        return JJChapter_;
    }
    
    public void JJChapterBean.setJJChapter_(JJChapter JJChapter_) {
        this.JJChapter_ = JJChapter_;
    }
    
    public List<JJContact> JJChapterBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJChapterBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJProject> JJChapterBean.completeProject(String query) {
        List<JJProject> suggestions = new ArrayList<JJProject>();
        for (JJProject jJProject : jJProjectService.findAllJJProjects()) {
            String jJProjectStr = String.valueOf(jJProject.getName() +  " "  + jJProject.getDescription() +  " "  + jJProject.getCreationDate() +  " "  + jJProject.getUpdatedDate());
            if (jJProjectStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJProject);
            }
        }
        return suggestions;
    }
    
    public List<JJCategory> JJChapterBean.completeCategory(String query) {
        List<JJCategory> suggestions = new ArrayList<JJCategory>();
        for (JJCategory jJCategory : jJCategoryService.findAllJJCategorys()) {
            String jJCategoryStr = String.valueOf(jJCategory.getName() +  " "  + jJCategory.getDescription() +  " "  + jJCategory.getCreationDate() +  " "  + jJCategory.getUpdatedDate());
            if (jJCategoryStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJCategory);
            }
        }
        return suggestions;
    }
    
    public List<JJChapter> JJChapterBean.completeParent(String query) {
        List<JJChapter> suggestions = new ArrayList<JJChapter>();
        for (JJChapter jJChapter : jJChapterService.findAllJJChapters()) {
            String jJChapterStr = String.valueOf(jJChapter.getName() +  " "  + jJChapter.getDescription() +  " "  + jJChapter.getCreationDate() +  " "  + jJChapter.getUpdatedDate());
            if (jJChapterStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJChapter);
            }
        }
        return suggestions;
    }
    
    public List<JJChapter> JJChapterBean.getSelectedChapters() {
        return selectedChapters;
    }
    
    public void JJChapterBean.setSelectedChapters(List<JJChapter> selectedChapters) {
        if (selectedChapters != null) {
            JJChapter_.setChapters(new HashSet<JJChapter>(selectedChapters));
        }
        this.selectedChapters = selectedChapters;
    }
    
    public List<JJRequirement> JJChapterBean.getSelectedRequirements() {
        return selectedRequirements;
    }
    
    public void JJChapterBean.setSelectedRequirements(List<JJRequirement> selectedRequirements) {
        if (selectedRequirements != null) {
            JJChapter_.setRequirements(new HashSet<JJRequirement>(selectedRequirements));
        }
        this.selectedRequirements = selectedRequirements;
    }
    
    public String JJChapterBean.onEdit() {
        if (JJChapter_ != null && JJChapter_.getChapters() != null) {
            selectedChapters = new ArrayList<JJChapter>(JJChapter_.getChapters());
        }
        if (JJChapter_ != null && JJChapter_.getRequirements() != null) {
            selectedRequirements = new ArrayList<JJRequirement>(JJChapter_.getRequirements());
        }
        return null;
    }
    
    public boolean JJChapterBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJChapterBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJChapterBean.displayList() {
        createDialogVisible = false;
        findAllJJChapters();
        return "JJChapter_";
    }
    
    public String JJChapterBean.displayCreateDialog() {
        JJChapter_ = new JJChapter();
        createDialogVisible = true;
        return "JJChapter_";
    }
    
    public String JJChapterBean.persist() {
        String message = "";
        if (JJChapter_.getId() != null) {
            jJChapterService.updateJJChapter(JJChapter_);
            message = "message_successfully_updated";
        } else {
            jJChapterService.saveJJChapter(JJChapter_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJChapter");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJChapters();
    }
    
    public String JJChapterBean.delete() {
        jJChapterService.deleteJJChapter(JJChapter_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJChapter");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJChapters();
    }
    
    public void JJChapterBean.reset() {
        JJChapter_ = null;
        selectedChapters = null;
        selectedRequirements = null;
        createDialogVisible = false;
    }
    
    public void JJChapterBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

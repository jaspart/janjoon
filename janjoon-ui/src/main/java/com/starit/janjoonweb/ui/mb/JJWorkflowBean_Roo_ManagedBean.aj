// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import com.starit.janjoonweb.domain.JJContact;
import com.starit.janjoonweb.domain.JJContactService;
import com.starit.janjoonweb.domain.JJStatus;
import com.starit.janjoonweb.domain.JJStatusService;
import com.starit.janjoonweb.domain.JJWorkflow;
import com.starit.janjoonweb.domain.JJWorkflowService;
import com.starit.janjoonweb.ui.mb.JJWorkflowBean;
import com.starit.janjoonweb.ui.mb.converter.JJContactConverter;
import com.starit.janjoonweb.ui.mb.converter.JJStatusConverter;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJWorkflowBean_Roo_ManagedBean {
    
    declare @type: JJWorkflowBean: @ManagedBean(name = "jJWorkflowBean");
    
    declare @type: JJWorkflowBean: @SessionScoped;
    
    @Autowired
    JJWorkflowService JJWorkflowBean.jJWorkflowService;
    
    @Autowired
    JJContactService JJWorkflowBean.jJContactService;
    
    @Autowired
    JJStatusService JJWorkflowBean.jJStatusService;
    
    private String JJWorkflowBean.name = "JJWorkflows";
    
    private JJWorkflow JJWorkflowBean.JJWorkflow_;
    
    private List<JJWorkflow> JJWorkflowBean.allJJWorkflows;
    
    private boolean JJWorkflowBean.dataVisible = false;
    
    private List<String> JJWorkflowBean.columns;
    
    private HtmlPanelGrid JJWorkflowBean.createPanelGrid;
    
    private HtmlPanelGrid JJWorkflowBean.editPanelGrid;
    
    private HtmlPanelGrid JJWorkflowBean.viewPanelGrid;
    
    private boolean JJWorkflowBean.createDialogVisible = false;
    
    @PostConstruct
    public void JJWorkflowBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
        columns.add("actionWorkflow");
    }
    
    public String JJWorkflowBean.getName() {
        return name;
    }
    
    public List<String> JJWorkflowBean.getColumns() {
        return columns;
    }
    
    public List<JJWorkflow> JJWorkflowBean.getAllJJWorkflows() {
        return allJJWorkflows;
    }
    
    public void JJWorkflowBean.setAllJJWorkflows(List<JJWorkflow> allJJWorkflows) {
        this.allJJWorkflows = allJJWorkflows;
    }
    
    public String JJWorkflowBean.findAllJJWorkflows() {
        allJJWorkflows = jJWorkflowService.findAllJJWorkflows();
        dataVisible = !allJJWorkflows.isEmpty();
        return null;
    }
    
    public boolean JJWorkflowBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJWorkflowBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJWorkflowBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJWorkflowBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJWorkflowBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJWorkflowBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJWorkflowBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJWorkflowBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJWorkflowBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputTextarea nameCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMaximum(100);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel descriptionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionCreateOutput.setFor("descriptionCreateInput");
        descriptionCreateOutput.setId("descriptionCreateOutput");
        descriptionCreateOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionCreateOutput);
        
        InputTextarea descriptionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionCreateInput.setId("descriptionCreateInput");
        descriptionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.description}", String.class));
        descriptionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionCreateInput);
        
        Message descriptionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionCreateInputMessage.setId("descriptionCreateInputMessage");
        descriptionCreateInputMessage.setFor("descriptionCreateInput");
        descriptionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionCreateInputMessage);
        
        OutputLabel creationDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateCreateOutput.setFor("creationDateCreateInput");
        creationDateCreateOutput.setId("creationDateCreateOutput");
        creationDateCreateOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateCreateOutput);
        
        Calendar creationDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateCreateInput.setId("creationDateCreateInput");
        creationDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.creationDate}", Date.class));
        creationDateCreateInput.setNavigator(true);
        creationDateCreateInput.setEffect("slideDown");
        creationDateCreateInput.setPattern("dd/MM/yyyy");
        creationDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateCreateInput);
        
        Message creationDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateCreateInputMessage.setId("creationDateCreateInputMessage");
        creationDateCreateInputMessage.setFor("creationDateCreateInput");
        creationDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateCreateInputMessage);
        
        OutputLabel createdByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByCreateOutput.setFor("createdByCreateInput");
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.createdBy}", JJContact.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJWorkflowBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByCreateInput.setConverter(new JJContactConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        OutputLabel updatedDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateCreateOutput.setFor("updatedDateCreateInput");
        updatedDateCreateOutput.setId("updatedDateCreateOutput");
        updatedDateCreateOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateCreateOutput);
        
        Calendar updatedDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateCreateInput.setId("updatedDateCreateInput");
        updatedDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.updatedDate}", Date.class));
        updatedDateCreateInput.setNavigator(true);
        updatedDateCreateInput.setEffect("slideDown");
        updatedDateCreateInput.setPattern("dd/MM/yyyy");
        updatedDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateCreateInput);
        
        Message updatedDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateCreateInputMessage.setId("updatedDateCreateInputMessage");
        updatedDateCreateInputMessage.setFor("updatedDateCreateInput");
        updatedDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateCreateInputMessage);
        
        OutputLabel updatedByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByCreateOutput.setFor("updatedByCreateInput");
        updatedByCreateOutput.setId("updatedByCreateOutput");
        updatedByCreateOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByCreateOutput);
        
        AutoComplete updatedByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByCreateInput.setId("updatedByCreateInput");
        updatedByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.updatedBy}", JJContact.class));
        updatedByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJWorkflowBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByCreateInput.setDropdown(true);
        updatedByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByCreateInput.setConverter(new JJContactConverter());
        updatedByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByCreateInput);
        
        Message updatedByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByCreateInputMessage.setId("updatedByCreateInputMessage");
        updatedByCreateInputMessage.setFor("updatedByCreateInput");
        updatedByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByCreateInputMessage);
        
        OutputLabel enabledCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledCreateOutput.setFor("enabledCreateInput");
        enabledCreateOutput.setId("enabledCreateOutput");
        enabledCreateOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledCreateOutput);
        
        SelectBooleanCheckbox enabledCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledCreateInput.setId("enabledCreateInput");
        enabledCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.enabled}", Boolean.class));
        enabledCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledCreateInput);
        
        Message enabledCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledCreateInputMessage.setId("enabledCreateInputMessage");
        enabledCreateInputMessage.setFor("enabledCreateInput");
        enabledCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledCreateInputMessage);
        
        OutputLabel sourceCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        sourceCreateOutput.setFor("sourceCreateInput");
        sourceCreateOutput.setId("sourceCreateOutput");
        sourceCreateOutput.setValue("Source:");
        htmlPanelGrid.getChildren().add(sourceCreateOutput);
        
        AutoComplete sourceCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        sourceCreateInput.setId("sourceCreateInput");
        sourceCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.source}", JJStatus.class));
        sourceCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJWorkflowBean.completeSource}", List.class, new Class[] { String.class }));
        sourceCreateInput.setDropdown(true);
        sourceCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "source", String.class));
        sourceCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{source.name} #{source.description} #{source.creationDate} #{source.updatedDate}", String.class));
        sourceCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{source}", JJStatus.class));
        sourceCreateInput.setConverter(new JJStatusConverter());
        sourceCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(sourceCreateInput);
        
        Message sourceCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        sourceCreateInputMessage.setId("sourceCreateInputMessage");
        sourceCreateInputMessage.setFor("sourceCreateInput");
        sourceCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(sourceCreateInputMessage);
        
        OutputLabel targetCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        targetCreateOutput.setFor("targetCreateInput");
        targetCreateOutput.setId("targetCreateOutput");
        targetCreateOutput.setValue("Target:");
        htmlPanelGrid.getChildren().add(targetCreateOutput);
        
        AutoComplete targetCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        targetCreateInput.setId("targetCreateInput");
        targetCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.target}", JJStatus.class));
        targetCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJWorkflowBean.completeTarget}", List.class, new Class[] { String.class }));
        targetCreateInput.setDropdown(true);
        targetCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "target", String.class));
        targetCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{target.name} #{target.description} #{target.creationDate} #{target.updatedDate}", String.class));
        targetCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{target}", JJStatus.class));
        targetCreateInput.setConverter(new JJStatusConverter());
        targetCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(targetCreateInput);
        
        Message targetCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        targetCreateInputMessage.setId("targetCreateInputMessage");
        targetCreateInputMessage.setFor("targetCreateInput");
        targetCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(targetCreateInputMessage);
        
        OutputLabel actionWorkflowCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        actionWorkflowCreateOutput.setFor("actionWorkflowCreateInput");
        actionWorkflowCreateOutput.setId("actionWorkflowCreateOutput");
        actionWorkflowCreateOutput.setValue("Action Workflow:");
        htmlPanelGrid.getChildren().add(actionWorkflowCreateOutput);
        
        InputText actionWorkflowCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        actionWorkflowCreateInput.setId("actionWorkflowCreateInput");
        actionWorkflowCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.actionWorkflow}", String.class));
        actionWorkflowCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(actionWorkflowCreateInput);
        
        Message actionWorkflowCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        actionWorkflowCreateInputMessage.setId("actionWorkflowCreateInputMessage");
        actionWorkflowCreateInputMessage.setFor("actionWorkflowCreateInput");
        actionWorkflowCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(actionWorkflowCreateInputMessage);
        
        OutputLabel actorCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        actorCreateOutput.setFor("actorCreateInput");
        actorCreateOutput.setId("actorCreateOutput");
        actorCreateOutput.setValue("Actor:");
        htmlPanelGrid.getChildren().add(actorCreateOutput);
        
        AutoComplete actorCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        actorCreateInput.setId("actorCreateInput");
        actorCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.actor}", JJContact.class));
        actorCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJWorkflowBean.completeActor}", List.class, new Class[] { String.class }));
        actorCreateInput.setDropdown(true);
        actorCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "actor", String.class));
        actorCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{actor.name} #{actor.description} #{actor.creationDate} #{actor.updatedDate}", String.class));
        actorCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{actor}", JJContact.class));
        actorCreateInput.setConverter(new JJContactConverter());
        actorCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(actorCreateInput);
        
        Message actorCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        actorCreateInputMessage.setId("actorCreateInputMessage");
        actorCreateInputMessage.setFor("actorCreateInput");
        actorCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(actorCreateInputMessage);
        
        OutputLabel objetCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        objetCreateOutput.setFor("objetCreateInput");
        objetCreateOutput.setId("objetCreateOutput");
        objetCreateOutput.setValue("Objet:");
        htmlPanelGrid.getChildren().add(objetCreateOutput);
        
        InputText objetCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        objetCreateInput.setId("objetCreateInput");
        objetCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.objet}", String.class));
        objetCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(objetCreateInput);
        
        Message objetCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        objetCreateInputMessage.setId("objetCreateInputMessage");
        objetCreateInputMessage.setFor("objetCreateInput");
        objetCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(objetCreateInputMessage);
        
        OutputLabel eventCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        eventCreateOutput.setFor("eventCreateInput");
        eventCreateOutput.setId("eventCreateOutput");
        eventCreateOutput.setValue("Event:");
        htmlPanelGrid.getChildren().add(eventCreateOutput);
        
        InputTextarea eventCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        eventCreateInput.setId("eventCreateInput");
        eventCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.event}", String.class));
        eventCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(eventCreateInput);
        
        Message eventCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        eventCreateInputMessage.setId("eventCreateInputMessage");
        eventCreateInputMessage.setFor("eventCreateInput");
        eventCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(eventCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJWorkflowBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputTextarea nameEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMaximum(100);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel descriptionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionEditOutput.setFor("descriptionEditInput");
        descriptionEditOutput.setId("descriptionEditOutput");
        descriptionEditOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionEditOutput);
        
        InputTextarea descriptionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionEditInput.setId("descriptionEditInput");
        descriptionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.description}", String.class));
        descriptionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionEditInput);
        
        Message descriptionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionEditInputMessage.setId("descriptionEditInputMessage");
        descriptionEditInputMessage.setFor("descriptionEditInput");
        descriptionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionEditInputMessage);
        
        OutputLabel creationDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateEditOutput.setFor("creationDateEditInput");
        creationDateEditOutput.setId("creationDateEditOutput");
        creationDateEditOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateEditOutput);
        
        Calendar creationDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateEditInput.setId("creationDateEditInput");
        creationDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.creationDate}", Date.class));
        creationDateEditInput.setNavigator(true);
        creationDateEditInput.setEffect("slideDown");
        creationDateEditInput.setPattern("dd/MM/yyyy");
        creationDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateEditInput);
        
        Message creationDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateEditInputMessage.setId("creationDateEditInputMessage");
        creationDateEditInputMessage.setFor("creationDateEditInput");
        creationDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateEditInputMessage);
        
        OutputLabel createdByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByEditOutput.setFor("createdByEditInput");
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.createdBy}", JJContact.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJWorkflowBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByEditInput.setConverter(new JJContactConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        OutputLabel updatedDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateEditOutput.setFor("updatedDateEditInput");
        updatedDateEditOutput.setId("updatedDateEditOutput");
        updatedDateEditOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateEditOutput);
        
        Calendar updatedDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateEditInput.setId("updatedDateEditInput");
        updatedDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.updatedDate}", Date.class));
        updatedDateEditInput.setNavigator(true);
        updatedDateEditInput.setEffect("slideDown");
        updatedDateEditInput.setPattern("dd/MM/yyyy");
        updatedDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateEditInput);
        
        Message updatedDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateEditInputMessage.setId("updatedDateEditInputMessage");
        updatedDateEditInputMessage.setFor("updatedDateEditInput");
        updatedDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateEditInputMessage);
        
        OutputLabel updatedByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByEditOutput.setFor("updatedByEditInput");
        updatedByEditOutput.setId("updatedByEditOutput");
        updatedByEditOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByEditOutput);
        
        AutoComplete updatedByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByEditInput.setId("updatedByEditInput");
        updatedByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.updatedBy}", JJContact.class));
        updatedByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJWorkflowBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByEditInput.setDropdown(true);
        updatedByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByEditInput.setConverter(new JJContactConverter());
        updatedByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByEditInput);
        
        Message updatedByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByEditInputMessage.setId("updatedByEditInputMessage");
        updatedByEditInputMessage.setFor("updatedByEditInput");
        updatedByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByEditInputMessage);
        
        OutputLabel enabledEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledEditOutput.setFor("enabledEditInput");
        enabledEditOutput.setId("enabledEditOutput");
        enabledEditOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledEditOutput);
        
        SelectBooleanCheckbox enabledEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledEditInput.setId("enabledEditInput");
        enabledEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.enabled}", Boolean.class));
        enabledEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledEditInput);
        
        Message enabledEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledEditInputMessage.setId("enabledEditInputMessage");
        enabledEditInputMessage.setFor("enabledEditInput");
        enabledEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledEditInputMessage);
        
        OutputLabel sourceEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        sourceEditOutput.setFor("sourceEditInput");
        sourceEditOutput.setId("sourceEditOutput");
        sourceEditOutput.setValue("Source:");
        htmlPanelGrid.getChildren().add(sourceEditOutput);
        
        AutoComplete sourceEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        sourceEditInput.setId("sourceEditInput");
        sourceEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.source}", JJStatus.class));
        sourceEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJWorkflowBean.completeSource}", List.class, new Class[] { String.class }));
        sourceEditInput.setDropdown(true);
        sourceEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "source", String.class));
        sourceEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{source.name} #{source.description} #{source.creationDate} #{source.updatedDate}", String.class));
        sourceEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{source}", JJStatus.class));
        sourceEditInput.setConverter(new JJStatusConverter());
        sourceEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(sourceEditInput);
        
        Message sourceEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        sourceEditInputMessage.setId("sourceEditInputMessage");
        sourceEditInputMessage.setFor("sourceEditInput");
        sourceEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(sourceEditInputMessage);
        
        OutputLabel targetEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        targetEditOutput.setFor("targetEditInput");
        targetEditOutput.setId("targetEditOutput");
        targetEditOutput.setValue("Target:");
        htmlPanelGrid.getChildren().add(targetEditOutput);
        
        AutoComplete targetEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        targetEditInput.setId("targetEditInput");
        targetEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.target}", JJStatus.class));
        targetEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJWorkflowBean.completeTarget}", List.class, new Class[] { String.class }));
        targetEditInput.setDropdown(true);
        targetEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "target", String.class));
        targetEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{target.name} #{target.description} #{target.creationDate} #{target.updatedDate}", String.class));
        targetEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{target}", JJStatus.class));
        targetEditInput.setConverter(new JJStatusConverter());
        targetEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(targetEditInput);
        
        Message targetEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        targetEditInputMessage.setId("targetEditInputMessage");
        targetEditInputMessage.setFor("targetEditInput");
        targetEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(targetEditInputMessage);
        
        OutputLabel actionWorkflowEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        actionWorkflowEditOutput.setFor("actionWorkflowEditInput");
        actionWorkflowEditOutput.setId("actionWorkflowEditOutput");
        actionWorkflowEditOutput.setValue("Action Workflow:");
        htmlPanelGrid.getChildren().add(actionWorkflowEditOutput);
        
        InputText actionWorkflowEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        actionWorkflowEditInput.setId("actionWorkflowEditInput");
        actionWorkflowEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.actionWorkflow}", String.class));
        actionWorkflowEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(actionWorkflowEditInput);
        
        Message actionWorkflowEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        actionWorkflowEditInputMessage.setId("actionWorkflowEditInputMessage");
        actionWorkflowEditInputMessage.setFor("actionWorkflowEditInput");
        actionWorkflowEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(actionWorkflowEditInputMessage);
        
        OutputLabel actorEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        actorEditOutput.setFor("actorEditInput");
        actorEditOutput.setId("actorEditOutput");
        actorEditOutput.setValue("Actor:");
        htmlPanelGrid.getChildren().add(actorEditOutput);
        
        AutoComplete actorEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        actorEditInput.setId("actorEditInput");
        actorEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.actor}", JJContact.class));
        actorEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJWorkflowBean.completeActor}", List.class, new Class[] { String.class }));
        actorEditInput.setDropdown(true);
        actorEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "actor", String.class));
        actorEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{actor.name} #{actor.description} #{actor.creationDate} #{actor.updatedDate}", String.class));
        actorEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{actor}", JJContact.class));
        actorEditInput.setConverter(new JJContactConverter());
        actorEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(actorEditInput);
        
        Message actorEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        actorEditInputMessage.setId("actorEditInputMessage");
        actorEditInputMessage.setFor("actorEditInput");
        actorEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(actorEditInputMessage);
        
        OutputLabel objetEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        objetEditOutput.setFor("objetEditInput");
        objetEditOutput.setId("objetEditOutput");
        objetEditOutput.setValue("Objet:");
        htmlPanelGrid.getChildren().add(objetEditOutput);
        
        InputText objetEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        objetEditInput.setId("objetEditInput");
        objetEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.objet}", String.class));
        objetEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(objetEditInput);
        
        Message objetEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        objetEditInputMessage.setId("objetEditInputMessage");
        objetEditInputMessage.setFor("objetEditInput");
        objetEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(objetEditInputMessage);
        
        OutputLabel eventEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        eventEditOutput.setFor("eventEditInput");
        eventEditOutput.setId("eventEditOutput");
        eventEditOutput.setValue("Event:");
        htmlPanelGrid.getChildren().add(eventEditOutput);
        
        InputTextarea eventEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        eventEditInput.setId("eventEditInput");
        eventEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.event}", String.class));
        eventEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(eventEditInput);
        
        Message eventEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        eventEditInputMessage.setId("eventEditInputMessage");
        eventEditInputMessage.setFor("eventEditInput");
        eventEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(eventEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJWorkflowBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        InputTextarea nameValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.name}", String.class));
        nameValue.setReadonly(true);
        nameValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText descriptionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionLabel.setId("descriptionLabel");
        descriptionLabel.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionLabel);
        
        InputTextarea descriptionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionValue.setId("descriptionValue");
        descriptionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.description}", String.class));
        descriptionValue.setReadonly(true);
        descriptionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descriptionValue);
        
        HtmlOutputText creationDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateLabel.setId("creationDateLabel");
        creationDateLabel.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateLabel);
        
        HtmlOutputText creationDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.creationDate}", Date.class));
        DateTimeConverter creationDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationDateValueConverter.setPattern("dd/MM/yyyy");
        creationDateValue.setConverter(creationDateValueConverter);
        htmlPanelGrid.getChildren().add(creationDateValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.createdBy}", JJContact.class));
        createdByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        HtmlOutputText updatedDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateLabel.setId("updatedDateLabel");
        updatedDateLabel.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateLabel);
        
        HtmlOutputText updatedDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.updatedDate}", Date.class));
        DateTimeConverter updatedDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updatedDateValueConverter.setPattern("dd/MM/yyyy");
        updatedDateValue.setConverter(updatedDateValueConverter);
        htmlPanelGrid.getChildren().add(updatedDateValue);
        
        HtmlOutputText updatedByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByLabel.setId("updatedByLabel");
        updatedByLabel.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByLabel);
        
        HtmlOutputText updatedByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.updatedBy}", JJContact.class));
        updatedByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(updatedByValue);
        
        HtmlOutputText enabledLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledLabel.setId("enabledLabel");
        enabledLabel.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledLabel);
        
        HtmlOutputText enabledValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.enabled}", String.class));
        htmlPanelGrid.getChildren().add(enabledValue);
        
        HtmlOutputText sourceLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sourceLabel.setId("sourceLabel");
        sourceLabel.setValue("Source:");
        htmlPanelGrid.getChildren().add(sourceLabel);
        
        HtmlOutputText sourceValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sourceValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.source}", JJStatus.class));
        sourceValue.setConverter(new JJStatusConverter());
        htmlPanelGrid.getChildren().add(sourceValue);
        
        HtmlOutputText targetLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        targetLabel.setId("targetLabel");
        targetLabel.setValue("Target:");
        htmlPanelGrid.getChildren().add(targetLabel);
        
        HtmlOutputText targetValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        targetValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.target}", JJStatus.class));
        targetValue.setConverter(new JJStatusConverter());
        htmlPanelGrid.getChildren().add(targetValue);
        
        HtmlOutputText actionWorkflowLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        actionWorkflowLabel.setId("actionWorkflowLabel");
        actionWorkflowLabel.setValue("Action Workflow:");
        htmlPanelGrid.getChildren().add(actionWorkflowLabel);
        
        HtmlOutputText actionWorkflowValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        actionWorkflowValue.setId("actionWorkflowValue");
        actionWorkflowValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.actionWorkflow}", String.class));
        htmlPanelGrid.getChildren().add(actionWorkflowValue);
        
        HtmlOutputText actorLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        actorLabel.setId("actorLabel");
        actorLabel.setValue("Actor:");
        htmlPanelGrid.getChildren().add(actorLabel);
        
        HtmlOutputText actorValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        actorValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.actor}", JJContact.class));
        actorValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(actorValue);
        
        HtmlOutputText objetLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        objetLabel.setId("objetLabel");
        objetLabel.setValue("Objet:");
        htmlPanelGrid.getChildren().add(objetLabel);
        
        HtmlOutputText objetValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        objetValue.setId("objetValue");
        objetValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.objet}", String.class));
        htmlPanelGrid.getChildren().add(objetValue);
        
        HtmlOutputText eventLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        eventLabel.setId("eventLabel");
        eventLabel.setValue("Event:");
        htmlPanelGrid.getChildren().add(eventLabel);
        
        InputTextarea eventValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        eventValue.setId("eventValue");
        eventValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJWorkflowBean.JJWorkflow_.event}", String.class));
        eventValue.setReadonly(true);
        eventValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(eventValue);
        
        return htmlPanelGrid;
    }
    
    public JJWorkflow JJWorkflowBean.getJJWorkflow_() {
        if (JJWorkflow_ == null) {
            JJWorkflow_ = new JJWorkflow();
        }
        return JJWorkflow_;
    }
    
    public void JJWorkflowBean.setJJWorkflow_(JJWorkflow JJWorkflow_) {
        this.JJWorkflow_ = JJWorkflow_;
    }
    
    public List<JJContact> JJWorkflowBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJWorkflowBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJStatus> JJWorkflowBean.completeSource(String query) {
        List<JJStatus> suggestions = new ArrayList<JJStatus>();
        for (JJStatus jJStatus : jJStatusService.findAllJJStatuses()) {
            String jJStatusStr = String.valueOf(jJStatus.getName() +  " "  + jJStatus.getDescription() +  " "  + jJStatus.getCreationDate() +  " "  + jJStatus.getUpdatedDate());
            if (jJStatusStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJStatus);
            }
        }
        return suggestions;
    }
    
    public List<JJStatus> JJWorkflowBean.completeTarget(String query) {
        List<JJStatus> suggestions = new ArrayList<JJStatus>();
        for (JJStatus jJStatus : jJStatusService.findAllJJStatuses()) {
            String jJStatusStr = String.valueOf(jJStatus.getName() +  " "  + jJStatus.getDescription() +  " "  + jJStatus.getCreationDate() +  " "  + jJStatus.getUpdatedDate());
            if (jJStatusStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJStatus);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJWorkflowBean.completeActor(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public String JJWorkflowBean.onEdit() {
        return null;
    }
    
    public boolean JJWorkflowBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJWorkflowBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJWorkflowBean.displayList() {
        createDialogVisible = false;
        findAllJJWorkflows();
        return "JJWorkflow_";
    }
    
    public String JJWorkflowBean.displayCreateDialog() {
        JJWorkflow_ = new JJWorkflow();
        createDialogVisible = true;
        return "JJWorkflow_";
    }
    
    public String JJWorkflowBean.persist() {
        String message = "";
        if (JJWorkflow_.getId() != null) {
            jJWorkflowService.updateJJWorkflow(JJWorkflow_);
            message = "message_successfully_updated";
        } else {
            jJWorkflowService.saveJJWorkflow(JJWorkflow_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJWorkflow");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJWorkflows();
    }
    
    public String JJWorkflowBean.delete() {
        jJWorkflowService.deleteJJWorkflow(JJWorkflow_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJWorkflow");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJWorkflows();
    }
    
    public void JJWorkflowBean.reset() {
        JJWorkflow_ = null;
        createDialogVisible = false;
    }
    
    public void JJWorkflowBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

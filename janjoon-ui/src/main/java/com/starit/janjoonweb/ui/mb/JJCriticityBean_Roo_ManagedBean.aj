// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import com.starit.janjoonweb.domain.JJContact;
import com.starit.janjoonweb.domain.JJContactService;
import com.starit.janjoonweb.domain.JJCriticity;
import com.starit.janjoonweb.domain.JJCriticityService;
import com.starit.janjoonweb.ui.mb.JJCriticityBean;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJCriticityBean_Roo_ManagedBean {
    
    declare @type: JJCriticityBean: @ManagedBean(name = "jJCriticityBean");
    
    declare @type: JJCriticityBean: @SessionScoped;
    
    @Autowired
    JJCriticityService JJCriticityBean.jJCriticityService;
    
    @Autowired
    JJContactService JJCriticityBean.jJContactService;
    
    private String JJCriticityBean.name = "JJCriticitys";
    
    private JJCriticity JJCriticityBean.JJCriticity_;
    
    private List<JJCriticity> JJCriticityBean.allJJCriticitys;
    
    private boolean JJCriticityBean.dataVisible = false;
    
    private List<String> JJCriticityBean.columns;
    
    private HtmlPanelGrid JJCriticityBean.createPanelGrid;
    
    private HtmlPanelGrid JJCriticityBean.editPanelGrid;
    
    private HtmlPanelGrid JJCriticityBean.viewPanelGrid;
    
    private boolean JJCriticityBean.createDialogVisible = false;
    
    @PostConstruct
    public void JJCriticityBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
        columns.add("objet");
    }
    
    public String JJCriticityBean.getName() {
        return name;
    }
    
    public List<String> JJCriticityBean.getColumns() {
        return columns;
    }
    
    public List<JJCriticity> JJCriticityBean.getAllJJCriticitys() {
        return allJJCriticitys;
    }
    
    public void JJCriticityBean.setAllJJCriticitys(List<JJCriticity> allJJCriticitys) {
        this.allJJCriticitys = allJJCriticitys;
    }
    
    public String JJCriticityBean.findAllJJCriticitys() {
        allJJCriticitys = jJCriticityService.findAllJJCriticitys();
        dataVisible = !allJJCriticitys.isEmpty();
        return null;
    }
    
    public boolean JJCriticityBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJCriticityBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJCriticityBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJCriticityBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJCriticityBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJCriticityBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJCriticityBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJCriticityBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public JJCriticity JJCriticityBean.getJJCriticity_() {
        if (JJCriticity_ == null) {
            JJCriticity_ = new JJCriticity();
        }
        return JJCriticity_;
    }
    
    public void JJCriticityBean.setJJCriticity_(JJCriticity JJCriticity_) {
        this.JJCriticity_ = JJCriticity_;
    }
    
    public List<JJContact> JJCriticityBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJCriticityBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public String JJCriticityBean.onEdit() {
        return null;
    }
    
    public boolean JJCriticityBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJCriticityBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJCriticityBean.displayList() {
        createDialogVisible = false;
        findAllJJCriticitys();
        return "JJCriticity_";
    }
    
    public String JJCriticityBean.displayCreateDialog() {
        JJCriticity_ = new JJCriticity();
        createDialogVisible = true;
        return "JJCriticity_";
    }
    
    public String JJCriticityBean.persist() {
        String message = "";
        if (JJCriticity_.getId() != null) {
            jJCriticityService.updateJJCriticity(JJCriticity_);
            message = "message_successfully_updated";
        } else {
            jJCriticityService.saveJJCriticity(JJCriticity_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJCriticity");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJCriticitys();
    }
    
    public String JJCriticityBean.delete() {
        jJCriticityService.deleteJJCriticity(JJCriticity_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJCriticity");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJCriticitys();
    }
    
    public void JJCriticityBean.reset() {
        JJCriticity_ = null;
        createDialogVisible = false;
    }
    
    public void JJCriticityBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

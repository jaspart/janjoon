// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import com.starit.janjoonweb.domain.JJContact;
import com.starit.janjoonweb.domain.JJContactService;
import com.starit.janjoonweb.domain.JJImportance;
import com.starit.janjoonweb.domain.JJImportanceService;
import com.starit.janjoonweb.ui.mb.JJImportanceBean;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJImportanceBean_Roo_ManagedBean {
    
    declare @type: JJImportanceBean: @ManagedBean(name = "jJImportanceBean");
    
    declare @type: JJImportanceBean: @SessionScoped;
    
    @Autowired
    JJImportanceService JJImportanceBean.jJImportanceService;
    
    @Autowired
    JJContactService JJImportanceBean.jJContactService;
    
    private String JJImportanceBean.name = "JJImportances";
    
    private JJImportance JJImportanceBean.JJImportance_;
    
    private List<JJImportance> JJImportanceBean.allJJImportances;
    
    private boolean JJImportanceBean.dataVisible = false;
    
    private List<String> JJImportanceBean.columns;
    
    private HtmlPanelGrid JJImportanceBean.createPanelGrid;
    
    private HtmlPanelGrid JJImportanceBean.editPanelGrid;
    
    private HtmlPanelGrid JJImportanceBean.viewPanelGrid;
    
    private boolean JJImportanceBean.createDialogVisible = false;
    
    @PostConstruct
    public void JJImportanceBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
        columns.add("objet");
    }
    
    public String JJImportanceBean.getName() {
        return name;
    }
    
    public List<String> JJImportanceBean.getColumns() {
        return columns;
    }
    
    public List<JJImportance> JJImportanceBean.getAllJJImportances() {
        return allJJImportances;
    }
    
    public void JJImportanceBean.setAllJJImportances(List<JJImportance> allJJImportances) {
        this.allJJImportances = allJJImportances;
    }
    
    public String JJImportanceBean.findAllJJImportances() {
        allJJImportances = jJImportanceService.findAllJJImportances();
        dataVisible = !allJJImportances.isEmpty();
        return null;
    }
    
    public boolean JJImportanceBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJImportanceBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJImportanceBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJImportanceBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJImportanceBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJImportanceBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJImportanceBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJImportanceBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public JJImportance JJImportanceBean.getJJImportance_() {
        if (JJImportance_ == null) {
            JJImportance_ = new JJImportance();
        }
        return JJImportance_;
    }
    
    public void JJImportanceBean.setJJImportance_(JJImportance JJImportance_) {
        this.JJImportance_ = JJImportance_;
    }
    
    public List<JJContact> JJImportanceBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJImportanceBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public String JJImportanceBean.onEdit() {
        return null;
    }
    
    public boolean JJImportanceBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJImportanceBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJImportanceBean.displayList() {
        createDialogVisible = false;
        findAllJJImportances();
        return "JJImportance_";
    }
    
    public String JJImportanceBean.displayCreateDialog() {
        JJImportance_ = new JJImportance();
        createDialogVisible = true;
        return "JJImportance_";
    }
    
    public String JJImportanceBean.persist() {
        String message = "";
        if (JJImportance_.getId() != null) {
            jJImportanceService.updateJJImportance(JJImportance_);
            message = "message_successfully_updated";
        } else {
            jJImportanceService.saveJJImportance(JJImportance_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJImportance");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJImportances();
    }
    
    public String JJImportanceBean.delete() {
        jJImportanceService.deleteJJImportance(JJImportance_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJImportance");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJImportances();
    }
    
    public void JJImportanceBean.reset() {
        JJImportance_ = null;
        createDialogVisible = false;
    }
    
    public void JJImportanceBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

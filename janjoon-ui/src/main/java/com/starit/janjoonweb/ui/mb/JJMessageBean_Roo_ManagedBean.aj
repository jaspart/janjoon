// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import com.starit.janjoonweb.domain.*;
import com.starit.janjoonweb.ui.mb.JJMessageBean;
import com.starit.janjoonweb.ui.mb.converter.*;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.*;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;

import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJMessageBean_Roo_ManagedBean {
    
    declare @type: JJMessageBean: @ManagedBean(name = "jJMessageBean");
    
    declare @type: JJMessageBean: @SessionScoped;
    
    @Autowired
    JJMessageService JJMessageBean.jJMessageService;
    
    @Autowired
    JJContactService JJMessageBean.jJContactService;
    
    @Autowired
    JJBugService JJMessageBean.jJBugService;
    
    @Autowired
    JJBuildService JJMessageBean.jJBuildService;
    
    @Autowired
    JJChapterService JJMessageBean.jJChapterService;
    
    @Autowired
    JJCriticityService JJMessageBean.jJCriticityService;
    
    @Autowired
    JJImportanceService JJMessageBean.jJImportanceService;
    
    @Autowired
    JJProductService JJMessageBean.jJProductService;
    
    @Autowired
    JJProjectService JJMessageBean.jJProjectService;
    
    @Autowired
    JJRequirementService JJMessageBean.jJRequirementService;
    
    @Autowired
    JJSprintService JJMessageBean.jJSprintService;
    
    @Autowired
    JJStatusService JJMessageBean.jJStatusService;
    
    @Autowired
    JJTaskService JJMessageBean.jJTaskService;
    
    @Autowired
    JJTestcaseService JJMessageBean.jJTestcaseService;
    
    @Autowired
    JJVersionService JJMessageBean.jJVersionService;
    
    private String JJMessageBean.name = "JJMessages";
    
    private JJMessage JJMessageBean.JJMessage_;
    
    private List<JJMessage> JJMessageBean.allJJMessages;
    
    private boolean JJMessageBean.dataVisible = false;
    
    private List<String> JJMessageBean.columns;
    
    private HtmlPanelGrid JJMessageBean.createPanelGrid;
    
    private HtmlPanelGrid JJMessageBean.editPanelGrid;
    
    private HtmlPanelGrid JJMessageBean.viewPanelGrid;
    
    private boolean JJMessageBean.createDialogVisible = false;
    
    @PostConstruct
    public void JJMessageBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
        columns.add("message");
        
        if(jJMessageService.findAllJJMessages().isEmpty())
		{
			System.out.println("----------------------------------------------------------");
			for (int j = 0; j < 30; j++) {
				JJMessage mes=new JJMessage();
				mes.setName("mes : "+j);
				mes.setDescription("mesDescription : "+j);
				mes.setCreationDate(new Date());
				mes.setMessage("message tttttt"+j);
				jJMessageService.saveJJMessage(mes);
			}
		}
        allJJMessages=jJMessageService.findAllJJMessages();
        setjJmessage(new JJMessage());
       
        
    }
    
    public String JJMessageBean.getName() {
        return name;
    }
    
    public List<String> JJMessageBean.getColumns() {
        return columns;
    }
    
    public List<JJMessage> JJMessageBean.getAllJJMessages() {
        return allJJMessages;
    }
    
    public void JJMessageBean.setAllJJMessages(List<JJMessage> allJJMessages) {
        this.allJJMessages = allJJMessages;
    }
    
    public String JJMessageBean.findAllJJMessages() {
    	
        allJJMessages = jJMessageService.findAllJJMessages();         
        dataVisible = !allJJMessages.isEmpty();
        return null;
    }
    
    public boolean JJMessageBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJMessageBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJMessageBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJMessageBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJMessageBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJMessageBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJMessageBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJMessageBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJMessageBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputTextarea nameCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMaximum(100);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel descriptionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionCreateOutput.setFor("descriptionCreateInput");
        descriptionCreateOutput.setId("descriptionCreateOutput");
        descriptionCreateOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionCreateOutput);
        
        InputTextarea descriptionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionCreateInput.setId("descriptionCreateInput");
        descriptionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.description}", String.class));
        descriptionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionCreateInput);
        
        Message descriptionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionCreateInputMessage.setId("descriptionCreateInputMessage");
        descriptionCreateInputMessage.setFor("descriptionCreateInput");
        descriptionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionCreateInputMessage);
        
        OutputLabel creationDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateCreateOutput.setFor("creationDateCreateInput");
        creationDateCreateOutput.setId("creationDateCreateOutput");
        creationDateCreateOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateCreateOutput);
        
        Calendar creationDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateCreateInput.setId("creationDateCreateInput");
        creationDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.creationDate}", Date.class));
        creationDateCreateInput.setNavigator(true);
        creationDateCreateInput.setEffect("slideDown");
        creationDateCreateInput.setPattern("dd/MM/yyyy");
        creationDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateCreateInput);
        
        Message creationDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateCreateInputMessage.setId("creationDateCreateInputMessage");
        creationDateCreateInputMessage.setFor("creationDateCreateInput");
        creationDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateCreateInputMessage);
        
        OutputLabel createdByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByCreateOutput.setFor("createdByCreateInput");
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.createdBy}", JJContact.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByCreateInput.setConverter(new JJContactConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        OutputLabel updatedDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateCreateOutput.setFor("updatedDateCreateInput");
        updatedDateCreateOutput.setId("updatedDateCreateOutput");
        updatedDateCreateOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateCreateOutput);
        
        Calendar updatedDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateCreateInput.setId("updatedDateCreateInput");
        updatedDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.updatedDate}", Date.class));
        updatedDateCreateInput.setNavigator(true);
        updatedDateCreateInput.setEffect("slideDown");
        updatedDateCreateInput.setPattern("dd/MM/yyyy");
        updatedDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateCreateInput);
        
        Message updatedDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateCreateInputMessage.setId("updatedDateCreateInputMessage");
        updatedDateCreateInputMessage.setFor("updatedDateCreateInput");
        updatedDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateCreateInputMessage);
        
        OutputLabel updatedByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByCreateOutput.setFor("updatedByCreateInput");
        updatedByCreateOutput.setId("updatedByCreateOutput");
        updatedByCreateOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByCreateOutput);
        
        AutoComplete updatedByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByCreateInput.setId("updatedByCreateInput");
        updatedByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.updatedBy}", JJContact.class));
        updatedByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByCreateInput.setDropdown(true);
        updatedByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByCreateInput.setConverter(new JJContactConverter());
        updatedByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByCreateInput);
        
        Message updatedByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByCreateInputMessage.setId("updatedByCreateInputMessage");
        updatedByCreateInputMessage.setFor("updatedByCreateInput");
        updatedByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByCreateInputMessage);
        
        OutputLabel enabledCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledCreateOutput.setFor("enabledCreateInput");
        enabledCreateOutput.setId("enabledCreateOutput");
        enabledCreateOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledCreateOutput);
        
        SelectBooleanCheckbox enabledCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledCreateInput.setId("enabledCreateInput");
        enabledCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.enabled}", Boolean.class));
        enabledCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledCreateInput);
        
        Message enabledCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledCreateInputMessage.setId("enabledCreateInputMessage");
        enabledCreateInputMessage.setFor("enabledCreateInput");
        enabledCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledCreateInputMessage);
        
        OutputLabel messageCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        messageCreateOutput.setFor("messageCreateInput");
        messageCreateOutput.setId("messageCreateOutput");
        messageCreateOutput.setValue("Message:");
        htmlPanelGrid.getChildren().add(messageCreateOutput);
        
        InputTextarea messageCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        messageCreateInput.setId("messageCreateInput");
        messageCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.message}", String.class));
        LengthValidator messageCreateInputValidator = new LengthValidator();
        messageCreateInputValidator.setMaximum(250);
        messageCreateInput.addValidator(messageCreateInputValidator);
        messageCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(messageCreateInput);
        
        Message messageCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messageCreateInputMessage.setId("messageCreateInputMessage");
        messageCreateInputMessage.setFor("messageCreateInput");
        messageCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messageCreateInputMessage);
        
        OutputLabel bugCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        bugCreateOutput.setFor("bugCreateInput");
        bugCreateOutput.setId("bugCreateOutput");
        bugCreateOutput.setValue("Bug:");
        htmlPanelGrid.getChildren().add(bugCreateOutput);
        
        AutoComplete bugCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        bugCreateInput.setId("bugCreateInput");
        bugCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.bug}", JJBug.class));
        bugCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeBug}", List.class, new Class[] { String.class }));
        bugCreateInput.setDropdown(true);
        bugCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "bug", String.class));
        bugCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{bug.name} #{bug.description} #{bug.creationDate} #{bug.updatedDate}", String.class));
        bugCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{bug}", JJBug.class));
        bugCreateInput.setConverter(new JJBugConverter());
        bugCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(bugCreateInput);
        
        Message bugCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bugCreateInputMessage.setId("bugCreateInputMessage");
        bugCreateInputMessage.setFor("bugCreateInput");
        bugCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bugCreateInputMessage);
        
        OutputLabel buildCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        buildCreateOutput.setFor("buildCreateInput");
        buildCreateOutput.setId("buildCreateOutput");
        buildCreateOutput.setValue("Build:");
        htmlPanelGrid.getChildren().add(buildCreateOutput);
        
        AutoComplete buildCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        buildCreateInput.setId("buildCreateInput");
        buildCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.build}", JJBuild.class));
        buildCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeBuild}", List.class, new Class[] { String.class }));
        buildCreateInput.setDropdown(true);
        buildCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "build", String.class));
        buildCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{build.name} #{build.description} #{build.creationDate} #{build.updatedDate}", String.class));
        buildCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{build}", JJBuild.class));
        buildCreateInput.setConverter(new JJBuildConverter());
        buildCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(buildCreateInput);
        
        Message buildCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        buildCreateInputMessage.setId("buildCreateInputMessage");
        buildCreateInputMessage.setFor("buildCreateInput");
        buildCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(buildCreateInputMessage);
        
        OutputLabel chapterCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        chapterCreateOutput.setFor("chapterCreateInput");
        chapterCreateOutput.setId("chapterCreateOutput");
        chapterCreateOutput.setValue("Chapter:");
        htmlPanelGrid.getChildren().add(chapterCreateOutput);
        
        AutoComplete chapterCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        chapterCreateInput.setId("chapterCreateInput");
        chapterCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.chapter}", JJChapter.class));
        chapterCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeChapter}", List.class, new Class[] { String.class }));
        chapterCreateInput.setDropdown(true);
        chapterCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "chapter", String.class));
        chapterCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{chapter.name} #{chapter.description} #{chapter.creationDate} #{chapter.updatedDate}", String.class));
        chapterCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{chapter}", JJChapter.class));
        chapterCreateInput.setConverter(new JJChapterConverter());
        chapterCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(chapterCreateInput);
        
        Message chapterCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        chapterCreateInputMessage.setId("chapterCreateInputMessage");
        chapterCreateInputMessage.setFor("chapterCreateInput");
        chapterCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(chapterCreateInputMessage);
        
        OutputLabel contactCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        contactCreateOutput.setFor("contactCreateInput");
        contactCreateOutput.setId("contactCreateOutput");
        contactCreateOutput.setValue("Contact:");
        htmlPanelGrid.getChildren().add(contactCreateOutput);
        
        AutoComplete contactCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        contactCreateInput.setId("contactCreateInput");
        contactCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.contact}", JJContact.class));
        contactCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeContact}", List.class, new Class[] { String.class }));
        contactCreateInput.setDropdown(true);
        contactCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "contact", String.class));
        contactCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{contact.name} #{contact.description} #{contact.creationDate} #{contact.updatedDate}", String.class));
        contactCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{contact}", JJContact.class));
        contactCreateInput.setConverter(new JJContactConverter());
        contactCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(contactCreateInput);
        
        Message contactCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        contactCreateInputMessage.setId("contactCreateInputMessage");
        contactCreateInputMessage.setFor("contactCreateInput");
        contactCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(contactCreateInputMessage);
        
        OutputLabel criticityCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        criticityCreateOutput.setFor("criticityCreateInput");
        criticityCreateOutput.setId("criticityCreateOutput");
        criticityCreateOutput.setValue("Criticity:");
        htmlPanelGrid.getChildren().add(criticityCreateOutput);
        
        AutoComplete criticityCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        criticityCreateInput.setId("criticityCreateInput");
        criticityCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.criticity}", JJCriticity.class));
        criticityCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeCriticity}", List.class, new Class[] { String.class }));
        criticityCreateInput.setDropdown(true);
        criticityCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "criticity", String.class));
        criticityCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{criticity.name} #{criticity.description} #{criticity.creationDate} #{criticity.updatedDate}", String.class));
        criticityCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{criticity}", JJCriticity.class));
        criticityCreateInput.setConverter(new JJCriticityConverter());
        criticityCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(criticityCreateInput);
        
        Message criticityCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        criticityCreateInputMessage.setId("criticityCreateInputMessage");
        criticityCreateInputMessage.setFor("criticityCreateInput");
        criticityCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(criticityCreateInputMessage);
        
        OutputLabel importanceCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        importanceCreateOutput.setFor("importanceCreateInput");
        importanceCreateOutput.setId("importanceCreateOutput");
        importanceCreateOutput.setValue("Importance:");
        htmlPanelGrid.getChildren().add(importanceCreateOutput);
        
        AutoComplete importanceCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        importanceCreateInput.setId("importanceCreateInput");
        importanceCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.importance}", JJImportance.class));
        importanceCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeImportance}", List.class, new Class[] { String.class }));
        importanceCreateInput.setDropdown(true);
        importanceCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "importance", String.class));
        importanceCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{importance.name} #{importance.description} #{importance.creationDate} #{importance.updatedDate}", String.class));
        importanceCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{importance}", JJImportance.class));
        importanceCreateInput.setConverter(new JJImportanceConverter());
        importanceCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(importanceCreateInput);
        
        Message importanceCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        importanceCreateInputMessage.setId("importanceCreateInputMessage");
        importanceCreateInputMessage.setFor("importanceCreateInput");
        importanceCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(importanceCreateInputMessage);
        
        OutputLabel productCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        productCreateOutput.setFor("productCreateInput");
        productCreateOutput.setId("productCreateOutput");
        productCreateOutput.setValue("Product:");
        htmlPanelGrid.getChildren().add(productCreateOutput);
        
        AutoComplete productCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        productCreateInput.setId("productCreateInput");
        productCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.product}", JJProduct.class));
        productCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeProduct}", List.class, new Class[] { String.class }));
        productCreateInput.setDropdown(true);
        productCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "product", String.class));
        productCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{product.name} #{product.description} #{product.creationDate} #{product.updatedDate}", String.class));
        productCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{product}", JJProduct.class));
        productCreateInput.setConverter(new JJProductConverter());
        productCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(productCreateInput);
        
        Message productCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productCreateInputMessage.setId("productCreateInputMessage");
        productCreateInputMessage.setFor("productCreateInput");
        productCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productCreateInputMessage);
        
        OutputLabel projectCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        projectCreateOutput.setFor("projectCreateInput");
        projectCreateOutput.setId("projectCreateOutput");
        projectCreateOutput.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectCreateOutput);
        
        AutoComplete projectCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        projectCreateInput.setId("projectCreateInput");
        projectCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.project}", JJProject.class));
        projectCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeProject}", List.class, new Class[] { String.class }));
        projectCreateInput.setDropdown(true);
        projectCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "project", String.class));
        projectCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{project.name} #{project.description} #{project.creationDate} #{project.updatedDate}", String.class));
        projectCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{project}", JJProject.class));
        projectCreateInput.setConverter(new JJProjectConverter());
        projectCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(projectCreateInput);
        
        Message projectCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectCreateInputMessage.setId("projectCreateInputMessage");
        projectCreateInputMessage.setFor("projectCreateInput");
        projectCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectCreateInputMessage);
        
        OutputLabel requirementCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        requirementCreateOutput.setFor("requirementCreateInput");
        requirementCreateOutput.setId("requirementCreateOutput");
        requirementCreateOutput.setValue("Requirement:");
        htmlPanelGrid.getChildren().add(requirementCreateOutput);
        
        AutoComplete requirementCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        requirementCreateInput.setId("requirementCreateInput");
        requirementCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.requirement}", JJRequirement.class));
        requirementCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeRequirement}", List.class, new Class[] { String.class }));
        requirementCreateInput.setDropdown(true);
        requirementCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "requirement", String.class));
        requirementCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{requirement.name} #{requirement.description} #{requirement.creationDate} #{requirement.updatedDate}", String.class));
        requirementCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{requirement}", JJRequirement.class));
        requirementCreateInput.setConverter(new JJRequirementConverter());
        requirementCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(requirementCreateInput);
        
        Message requirementCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementCreateInputMessage.setId("requirementCreateInputMessage");
        requirementCreateInputMessage.setFor("requirementCreateInput");
        requirementCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementCreateInputMessage);
        
        OutputLabel sprintCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        sprintCreateOutput.setFor("sprintCreateInput");
        sprintCreateOutput.setId("sprintCreateOutput");
        sprintCreateOutput.setValue("Sprint:");
        htmlPanelGrid.getChildren().add(sprintCreateOutput);
        
        AutoComplete sprintCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        sprintCreateInput.setId("sprintCreateInput");
        sprintCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.sprint}", JJSprint.class));
        sprintCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeSprint}", List.class, new Class[] { String.class }));
        sprintCreateInput.setDropdown(true);
        sprintCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "sprint", String.class));
        sprintCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{sprint.name} #{sprint.description} #{sprint.creationDate} #{sprint.updatedDate}", String.class));
        sprintCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{sprint}", JJSprint.class));
        sprintCreateInput.setConverter(new JJSprintConverter());
        sprintCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(sprintCreateInput);
        
        Message sprintCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        sprintCreateInputMessage.setId("sprintCreateInputMessage");
        sprintCreateInputMessage.setFor("sprintCreateInput");
        sprintCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(sprintCreateInputMessage);
        
        OutputLabel statusCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusCreateOutput.setFor("statusCreateInput");
        statusCreateOutput.setId("statusCreateOutput");
        statusCreateOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusCreateOutput);
        
        AutoComplete statusCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        statusCreateInput.setId("statusCreateInput");
        statusCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.status}", JJStatus.class));
        statusCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeStatus}", List.class, new Class[] { String.class }));
        statusCreateInput.setDropdown(true);
        statusCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "status", String.class));
        statusCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{status.name} #{status.description} #{status.creationDate} #{status.updatedDate}", String.class));
        statusCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{status}", JJStatus.class));
        statusCreateInput.setConverter(new JJStatusConverter());
        statusCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(statusCreateInput);
        
        Message statusCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusCreateInputMessage.setId("statusCreateInputMessage");
        statusCreateInputMessage.setFor("statusCreateInput");
        statusCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusCreateInputMessage);
        
        OutputLabel taskCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        taskCreateOutput.setFor("taskCreateInput");
        taskCreateOutput.setId("taskCreateOutput");
        taskCreateOutput.setValue("Task:");
        htmlPanelGrid.getChildren().add(taskCreateOutput);
        
        AutoComplete taskCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        taskCreateInput.setId("taskCreateInput");
        taskCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.task}", JJTask.class));
        taskCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeTask}", List.class, new Class[] { String.class }));
        taskCreateInput.setDropdown(true);
        taskCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "task", String.class));
        taskCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{task.name} #{task.description} #{task.creationDate} #{task.updatedDate}", String.class));
        taskCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{task}", JJTask.class));
        taskCreateInput.setConverter(new JJTaskConverter());
        taskCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(taskCreateInput);
        
        Message taskCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        taskCreateInputMessage.setId("taskCreateInputMessage");
        taskCreateInputMessage.setFor("taskCreateInput");
        taskCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(taskCreateInputMessage);
        
        OutputLabel testcaseCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        testcaseCreateOutput.setFor("testcaseCreateInput");
        testcaseCreateOutput.setId("testcaseCreateOutput");
        testcaseCreateOutput.setValue("Testcase:");
        htmlPanelGrid.getChildren().add(testcaseCreateOutput);
        
        AutoComplete testcaseCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        testcaseCreateInput.setId("testcaseCreateInput");
        testcaseCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.testcase}", JJTestcase.class));
        testcaseCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeTestcase}", List.class, new Class[] { String.class }));
        testcaseCreateInput.setDropdown(true);
        testcaseCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "testcase", String.class));
        testcaseCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{testcase.name} #{testcase.description} #{testcase.creationDate} #{testcase.updatedDate}", String.class));
        testcaseCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{testcase}", JJTestcase.class));
        testcaseCreateInput.setConverter(new JJTestcaseConverter());
        testcaseCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(testcaseCreateInput);
        
        Message testcaseCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        testcaseCreateInputMessage.setId("testcaseCreateInputMessage");
        testcaseCreateInputMessage.setFor("testcaseCreateInput");
        testcaseCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(testcaseCreateInputMessage);
        
        OutputLabel versioningCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        versioningCreateOutput.setFor("versioningCreateInput");
        versioningCreateOutput.setId("versioningCreateOutput");
        versioningCreateOutput.setValue("Versioning:");
        htmlPanelGrid.getChildren().add(versioningCreateOutput);
        
        AutoComplete versioningCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        versioningCreateInput.setId("versioningCreateInput");
        versioningCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.versioning}", JJVersion.class));
        versioningCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeVersioning}", List.class, new Class[] { String.class }));
        versioningCreateInput.setDropdown(true);
        versioningCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "versioning", String.class));
        versioningCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{versioning.name} #{versioning.description} #{versioning.creationDate} #{versioning.updatedDate}", String.class));
        versioningCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{versioning}", JJVersion.class));
        versioningCreateInput.setConverter(new JJVersionConverter());
        versioningCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(versioningCreateInput);
        
        Message versioningCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        versioningCreateInputMessage.setId("versioningCreateInputMessage");
        versioningCreateInputMessage.setFor("versioningCreateInput");
        versioningCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(versioningCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJMessageBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputTextarea nameEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMaximum(100);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel descriptionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionEditOutput.setFor("descriptionEditInput");
        descriptionEditOutput.setId("descriptionEditOutput");
        descriptionEditOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionEditOutput);
        
        InputTextarea descriptionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionEditInput.setId("descriptionEditInput");
        descriptionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.description}", String.class));
        descriptionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionEditInput);
        
        Message descriptionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionEditInputMessage.setId("descriptionEditInputMessage");
        descriptionEditInputMessage.setFor("descriptionEditInput");
        descriptionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionEditInputMessage);
        
        OutputLabel creationDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateEditOutput.setFor("creationDateEditInput");
        creationDateEditOutput.setId("creationDateEditOutput");
        creationDateEditOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateEditOutput);
        
        Calendar creationDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateEditInput.setId("creationDateEditInput");
        creationDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.creationDate}", Date.class));
        creationDateEditInput.setNavigator(true);
        creationDateEditInput.setEffect("slideDown");
        creationDateEditInput.setPattern("dd/MM/yyyy");
        creationDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateEditInput);
        
        Message creationDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateEditInputMessage.setId("creationDateEditInputMessage");
        creationDateEditInputMessage.setFor("creationDateEditInput");
        creationDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateEditInputMessage);
        
        OutputLabel createdByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByEditOutput.setFor("createdByEditInput");
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.createdBy}", JJContact.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByEditInput.setConverter(new JJContactConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        OutputLabel updatedDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateEditOutput.setFor("updatedDateEditInput");
        updatedDateEditOutput.setId("updatedDateEditOutput");
        updatedDateEditOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateEditOutput);
        
        Calendar updatedDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateEditInput.setId("updatedDateEditInput");
        updatedDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.updatedDate}", Date.class));
        updatedDateEditInput.setNavigator(true);
        updatedDateEditInput.setEffect("slideDown");
        updatedDateEditInput.setPattern("dd/MM/yyyy");
        updatedDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateEditInput);
        
        Message updatedDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateEditInputMessage.setId("updatedDateEditInputMessage");
        updatedDateEditInputMessage.setFor("updatedDateEditInput");
        updatedDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateEditInputMessage);
        
        OutputLabel updatedByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByEditOutput.setFor("updatedByEditInput");
        updatedByEditOutput.setId("updatedByEditOutput");
        updatedByEditOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByEditOutput);
        
        AutoComplete updatedByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByEditInput.setId("updatedByEditInput");
        updatedByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.updatedBy}", JJContact.class));
        updatedByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByEditInput.setDropdown(true);
        updatedByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByEditInput.setConverter(new JJContactConverter());
        updatedByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByEditInput);
        
        Message updatedByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByEditInputMessage.setId("updatedByEditInputMessage");
        updatedByEditInputMessage.setFor("updatedByEditInput");
        updatedByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByEditInputMessage);
        
        OutputLabel enabledEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledEditOutput.setFor("enabledEditInput");
        enabledEditOutput.setId("enabledEditOutput");
        enabledEditOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledEditOutput);
        
        SelectBooleanCheckbox enabledEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledEditInput.setId("enabledEditInput");
        enabledEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.enabled}", Boolean.class));
        enabledEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledEditInput);
        
        Message enabledEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledEditInputMessage.setId("enabledEditInputMessage");
        enabledEditInputMessage.setFor("enabledEditInput");
        enabledEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledEditInputMessage);
        
        OutputLabel messageEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        messageEditOutput.setFor("messageEditInput");
        messageEditOutput.setId("messageEditOutput");
        messageEditOutput.setValue("Message:");
        htmlPanelGrid.getChildren().add(messageEditOutput);
        
        InputTextarea messageEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        messageEditInput.setId("messageEditInput");
        messageEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.message}", String.class));
        LengthValidator messageEditInputValidator = new LengthValidator();
        messageEditInputValidator.setMaximum(250);
        messageEditInput.addValidator(messageEditInputValidator);
        messageEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(messageEditInput);
        
        Message messageEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messageEditInputMessage.setId("messageEditInputMessage");
        messageEditInputMessage.setFor("messageEditInput");
        messageEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messageEditInputMessage);
        
        OutputLabel bugEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        bugEditOutput.setFor("bugEditInput");
        bugEditOutput.setId("bugEditOutput");
        bugEditOutput.setValue("Bug:");
        htmlPanelGrid.getChildren().add(bugEditOutput);
        
        AutoComplete bugEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        bugEditInput.setId("bugEditInput");
        bugEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.bug}", JJBug.class));
        bugEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeBug}", List.class, new Class[] { String.class }));
        bugEditInput.setDropdown(true);
        bugEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "bug", String.class));
        bugEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{bug.name} #{bug.description} #{bug.creationDate} #{bug.updatedDate}", String.class));
        bugEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{bug}", JJBug.class));
        bugEditInput.setConverter(new JJBugConverter());
        bugEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(bugEditInput);
        
        Message bugEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bugEditInputMessage.setId("bugEditInputMessage");
        bugEditInputMessage.setFor("bugEditInput");
        bugEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bugEditInputMessage);
        
        OutputLabel buildEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        buildEditOutput.setFor("buildEditInput");
        buildEditOutput.setId("buildEditOutput");
        buildEditOutput.setValue("Build:");
        htmlPanelGrid.getChildren().add(buildEditOutput);
        
        AutoComplete buildEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        buildEditInput.setId("buildEditInput");
        buildEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.build}", JJBuild.class));
        buildEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeBuild}", List.class, new Class[] { String.class }));
        buildEditInput.setDropdown(true);
        buildEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "build", String.class));
        buildEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{build.name} #{build.description} #{build.creationDate} #{build.updatedDate}", String.class));
        buildEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{build}", JJBuild.class));
        buildEditInput.setConverter(new JJBuildConverter());
        buildEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(buildEditInput);
        
        Message buildEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        buildEditInputMessage.setId("buildEditInputMessage");
        buildEditInputMessage.setFor("buildEditInput");
        buildEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(buildEditInputMessage);
        
        OutputLabel chapterEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        chapterEditOutput.setFor("chapterEditInput");
        chapterEditOutput.setId("chapterEditOutput");
        chapterEditOutput.setValue("Chapter:");
        htmlPanelGrid.getChildren().add(chapterEditOutput);
        
        AutoComplete chapterEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        chapterEditInput.setId("chapterEditInput");
        chapterEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.chapter}", JJChapter.class));
        chapterEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeChapter}", List.class, new Class[] { String.class }));
        chapterEditInput.setDropdown(true);
        chapterEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "chapter", String.class));
        chapterEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{chapter.name} #{chapter.description} #{chapter.creationDate} #{chapter.updatedDate}", String.class));
        chapterEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{chapter}", JJChapter.class));
        chapterEditInput.setConverter(new JJChapterConverter());
        chapterEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(chapterEditInput);
        
        Message chapterEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        chapterEditInputMessage.setId("chapterEditInputMessage");
        chapterEditInputMessage.setFor("chapterEditInput");
        chapterEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(chapterEditInputMessage);
        
        OutputLabel contactEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        contactEditOutput.setFor("contactEditInput");
        contactEditOutput.setId("contactEditOutput");
        contactEditOutput.setValue("Contact:");
        htmlPanelGrid.getChildren().add(contactEditOutput);
        
        AutoComplete contactEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        contactEditInput.setId("contactEditInput");
        contactEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.contact}", JJContact.class));
        contactEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeContact}", List.class, new Class[] { String.class }));
        contactEditInput.setDropdown(true);
        contactEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "contact", String.class));
        contactEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{contact.name} #{contact.description} #{contact.creationDate} #{contact.updatedDate}", String.class));
        contactEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{contact}", JJContact.class));
        contactEditInput.setConverter(new JJContactConverter());
        contactEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(contactEditInput);
        
        Message contactEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        contactEditInputMessage.setId("contactEditInputMessage");
        contactEditInputMessage.setFor("contactEditInput");
        contactEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(contactEditInputMessage);
        
        OutputLabel criticityEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        criticityEditOutput.setFor("criticityEditInput");
        criticityEditOutput.setId("criticityEditOutput");
        criticityEditOutput.setValue("Criticity:");
        htmlPanelGrid.getChildren().add(criticityEditOutput);
        
        AutoComplete criticityEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        criticityEditInput.setId("criticityEditInput");
        criticityEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.criticity}", JJCriticity.class));
        criticityEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeCriticity}", List.class, new Class[] { String.class }));
        criticityEditInput.setDropdown(true);
        criticityEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "criticity", String.class));
        criticityEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{criticity.name} #{criticity.description} #{criticity.creationDate} #{criticity.updatedDate}", String.class));
        criticityEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{criticity}", JJCriticity.class));
        criticityEditInput.setConverter(new JJCriticityConverter());
        criticityEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(criticityEditInput);
        
        Message criticityEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        criticityEditInputMessage.setId("criticityEditInputMessage");
        criticityEditInputMessage.setFor("criticityEditInput");
        criticityEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(criticityEditInputMessage);
        
        OutputLabel importanceEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        importanceEditOutput.setFor("importanceEditInput");
        importanceEditOutput.setId("importanceEditOutput");
        importanceEditOutput.setValue("Importance:");
        htmlPanelGrid.getChildren().add(importanceEditOutput);
        
        AutoComplete importanceEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        importanceEditInput.setId("importanceEditInput");
        importanceEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.importance}", JJImportance.class));
        importanceEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeImportance}", List.class, new Class[] { String.class }));
        importanceEditInput.setDropdown(true);
        importanceEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "importance", String.class));
        importanceEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{importance.name} #{importance.description} #{importance.creationDate} #{importance.updatedDate}", String.class));
        importanceEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{importance}", JJImportance.class));
        importanceEditInput.setConverter(new JJImportanceConverter());
        importanceEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(importanceEditInput);
        
        Message importanceEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        importanceEditInputMessage.setId("importanceEditInputMessage");
        importanceEditInputMessage.setFor("importanceEditInput");
        importanceEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(importanceEditInputMessage);
        
        OutputLabel productEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        productEditOutput.setFor("productEditInput");
        productEditOutput.setId("productEditOutput");
        productEditOutput.setValue("Product:");
        htmlPanelGrid.getChildren().add(productEditOutput);
        
        AutoComplete productEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        productEditInput.setId("productEditInput");
        productEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.product}", JJProduct.class));
        productEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeProduct}", List.class, new Class[] { String.class }));
        productEditInput.setDropdown(true);
        productEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "product", String.class));
        productEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{product.name} #{product.description} #{product.creationDate} #{product.updatedDate}", String.class));
        productEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{product}", JJProduct.class));
        productEditInput.setConverter(new JJProductConverter());
        productEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(productEditInput);
        
        Message productEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productEditInputMessage.setId("productEditInputMessage");
        productEditInputMessage.setFor("productEditInput");
        productEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productEditInputMessage);
        
        OutputLabel projectEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        projectEditOutput.setFor("projectEditInput");
        projectEditOutput.setId("projectEditOutput");
        projectEditOutput.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectEditOutput);
        
        AutoComplete projectEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        projectEditInput.setId("projectEditInput");
        projectEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.project}", JJProject.class));
        projectEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeProject}", List.class, new Class[] { String.class }));
        projectEditInput.setDropdown(true);
        projectEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "project", String.class));
        projectEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{project.name} #{project.description} #{project.creationDate} #{project.updatedDate}", String.class));
        projectEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{project}", JJProject.class));
        projectEditInput.setConverter(new JJProjectConverter());
        projectEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(projectEditInput);
        
        Message projectEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectEditInputMessage.setId("projectEditInputMessage");
        projectEditInputMessage.setFor("projectEditInput");
        projectEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectEditInputMessage);
        
        OutputLabel requirementEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        requirementEditOutput.setFor("requirementEditInput");
        requirementEditOutput.setId("requirementEditOutput");
        requirementEditOutput.setValue("Requirement:");
        htmlPanelGrid.getChildren().add(requirementEditOutput);
        
        AutoComplete requirementEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        requirementEditInput.setId("requirementEditInput");
        requirementEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.requirement}", JJRequirement.class));
        requirementEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeRequirement}", List.class, new Class[] { String.class }));
        requirementEditInput.setDropdown(true);
        requirementEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "requirement", String.class));
        requirementEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{requirement.name} #{requirement.description} #{requirement.creationDate} #{requirement.updatedDate}", String.class));
        requirementEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{requirement}", JJRequirement.class));
        requirementEditInput.setConverter(new JJRequirementConverter());
        requirementEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(requirementEditInput);
        
        Message requirementEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementEditInputMessage.setId("requirementEditInputMessage");
        requirementEditInputMessage.setFor("requirementEditInput");
        requirementEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementEditInputMessage);
        
        OutputLabel sprintEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        sprintEditOutput.setFor("sprintEditInput");
        sprintEditOutput.setId("sprintEditOutput");
        sprintEditOutput.setValue("Sprint:");
        htmlPanelGrid.getChildren().add(sprintEditOutput);
        
        AutoComplete sprintEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        sprintEditInput.setId("sprintEditInput");
        sprintEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.sprint}", JJSprint.class));
        sprintEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeSprint}", List.class, new Class[] { String.class }));
        sprintEditInput.setDropdown(true);
        sprintEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "sprint", String.class));
        sprintEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{sprint.name} #{sprint.description} #{sprint.creationDate} #{sprint.updatedDate}", String.class));
        sprintEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{sprint}", JJSprint.class));
        sprintEditInput.setConverter(new JJSprintConverter());
        sprintEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(sprintEditInput);
        
        Message sprintEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        sprintEditInputMessage.setId("sprintEditInputMessage");
        sprintEditInputMessage.setFor("sprintEditInput");
        sprintEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(sprintEditInputMessage);
        
        OutputLabel statusEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusEditOutput.setFor("statusEditInput");
        statusEditOutput.setId("statusEditOutput");
        statusEditOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusEditOutput);
        
        AutoComplete statusEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        statusEditInput.setId("statusEditInput");
        statusEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.status}", JJStatus.class));
        statusEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeStatus}", List.class, new Class[] { String.class }));
        statusEditInput.setDropdown(true);
        statusEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "status", String.class));
        statusEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{status.name} #{status.description} #{status.creationDate} #{status.updatedDate}", String.class));
        statusEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{status}", JJStatus.class));
        statusEditInput.setConverter(new JJStatusConverter());
        statusEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(statusEditInput);
        
        Message statusEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusEditInputMessage.setId("statusEditInputMessage");
        statusEditInputMessage.setFor("statusEditInput");
        statusEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusEditInputMessage);
        
        OutputLabel taskEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        taskEditOutput.setFor("taskEditInput");
        taskEditOutput.setId("taskEditOutput");
        taskEditOutput.setValue("Task:");
        htmlPanelGrid.getChildren().add(taskEditOutput);
        
        AutoComplete taskEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        taskEditInput.setId("taskEditInput");
        taskEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.task}", JJTask.class));
        taskEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeTask}", List.class, new Class[] { String.class }));
        taskEditInput.setDropdown(true);
        taskEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "task", String.class));
        taskEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{task.name} #{task.description} #{task.creationDate} #{task.updatedDate}", String.class));
        taskEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{task}", JJTask.class));
        taskEditInput.setConverter(new JJTaskConverter());
        taskEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(taskEditInput);
        
        Message taskEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        taskEditInputMessage.setId("taskEditInputMessage");
        taskEditInputMessage.setFor("taskEditInput");
        taskEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(taskEditInputMessage);
        
        OutputLabel testcaseEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        testcaseEditOutput.setFor("testcaseEditInput");
        testcaseEditOutput.setId("testcaseEditOutput");
        testcaseEditOutput.setValue("Testcase:");
        htmlPanelGrid.getChildren().add(testcaseEditOutput);
        
        AutoComplete testcaseEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        testcaseEditInput.setId("testcaseEditInput");
        testcaseEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.testcase}", JJTestcase.class));
        testcaseEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeTestcase}", List.class, new Class[] { String.class }));
        testcaseEditInput.setDropdown(true);
        testcaseEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "testcase", String.class));
        testcaseEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{testcase.name} #{testcase.description} #{testcase.creationDate} #{testcase.updatedDate}", String.class));
        testcaseEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{testcase}", JJTestcase.class));
        testcaseEditInput.setConverter(new JJTestcaseConverter());
        testcaseEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(testcaseEditInput);
        
        Message testcaseEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        testcaseEditInputMessage.setId("testcaseEditInputMessage");
        testcaseEditInputMessage.setFor("testcaseEditInput");
        testcaseEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(testcaseEditInputMessage);
        
        OutputLabel versioningEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        versioningEditOutput.setFor("versioningEditInput");
        versioningEditOutput.setId("versioningEditOutput");
        versioningEditOutput.setValue("Versioning:");
        htmlPanelGrid.getChildren().add(versioningEditOutput);
        
        AutoComplete versioningEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        versioningEditInput.setId("versioningEditInput");
        versioningEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.versioning}", JJVersion.class));
        versioningEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJMessageBean.completeVersioning}", List.class, new Class[] { String.class }));
        versioningEditInput.setDropdown(true);
        versioningEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "versioning", String.class));
        versioningEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{versioning.name} #{versioning.description} #{versioning.creationDate} #{versioning.updatedDate}", String.class));
        versioningEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{versioning}", JJVersion.class));
        versioningEditInput.setConverter(new JJVersionConverter());
        versioningEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(versioningEditInput);
        
        Message versioningEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        versioningEditInputMessage.setId("versioningEditInputMessage");
        versioningEditInputMessage.setFor("versioningEditInput");
        versioningEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(versioningEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJMessageBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        InputTextarea nameValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.name}", String.class));
        nameValue.setReadonly(true);
        nameValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText descriptionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionLabel.setId("descriptionLabel");
        descriptionLabel.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionLabel);
        
        InputTextarea descriptionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionValue.setId("descriptionValue");
        descriptionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.description}", String.class));
        descriptionValue.setReadonly(true);
        descriptionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descriptionValue);
        
        HtmlOutputText creationDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateLabel.setId("creationDateLabel");
        creationDateLabel.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateLabel);
        
        HtmlOutputText creationDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.creationDate}", Date.class));
        DateTimeConverter creationDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationDateValueConverter.setPattern("dd/MM/yyyy");
        creationDateValue.setConverter(creationDateValueConverter);
        htmlPanelGrid.getChildren().add(creationDateValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.createdBy}", JJContact.class));
        createdByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        HtmlOutputText updatedDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateLabel.setId("updatedDateLabel");
        updatedDateLabel.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateLabel);
        
        HtmlOutputText updatedDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.updatedDate}", Date.class));
        DateTimeConverter updatedDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updatedDateValueConverter.setPattern("dd/MM/yyyy");
        updatedDateValue.setConverter(updatedDateValueConverter);
        htmlPanelGrid.getChildren().add(updatedDateValue);
        
        HtmlOutputText updatedByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByLabel.setId("updatedByLabel");
        updatedByLabel.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByLabel);
        
        HtmlOutputText updatedByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.updatedBy}", JJContact.class));
        updatedByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(updatedByValue);
        
        HtmlOutputText enabledLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledLabel.setId("enabledLabel");
        enabledLabel.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledLabel);
        
        HtmlOutputText enabledValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.enabled}", String.class));
        htmlPanelGrid.getChildren().add(enabledValue);
        
        HtmlOutputText messageLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messageLabel.setId("messageLabel");
        messageLabel.setValue("Message:");
        htmlPanelGrid.getChildren().add(messageLabel);
        
        InputTextarea messageValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        messageValue.setId("messageValue");
        messageValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.message}", String.class));
        messageValue.setReadonly(true);
        messageValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(messageValue);
        
        HtmlOutputText bugLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugLabel.setId("bugLabel");
        bugLabel.setValue("Bug:");
        htmlPanelGrid.getChildren().add(bugLabel);
        
        HtmlOutputText bugValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.bug}", JJBug.class));
        bugValue.setConverter(new JJBugConverter());
        htmlPanelGrid.getChildren().add(bugValue);
        
        HtmlOutputText buildLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        buildLabel.setId("buildLabel");
        buildLabel.setValue("Build:");
        htmlPanelGrid.getChildren().add(buildLabel);
        
        HtmlOutputText buildValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        buildValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.build}", JJBuild.class));
        buildValue.setConverter(new JJBuildConverter());
        htmlPanelGrid.getChildren().add(buildValue);
        
        HtmlOutputText chapterLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        chapterLabel.setId("chapterLabel");
        chapterLabel.setValue("Chapter:");
        htmlPanelGrid.getChildren().add(chapterLabel);
        
        HtmlOutputText chapterValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        chapterValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.chapter}", JJChapter.class));
        chapterValue.setConverter(new JJChapterConverter());
        htmlPanelGrid.getChildren().add(chapterValue);
        
        HtmlOutputText contactLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contactLabel.setId("contactLabel");
        contactLabel.setValue("Contact:");
        htmlPanelGrid.getChildren().add(contactLabel);
        
        HtmlOutputText contactValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contactValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.contact}", JJContact.class));
        contactValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(contactValue);
        
        HtmlOutputText criticityLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        criticityLabel.setId("criticityLabel");
        criticityLabel.setValue("Criticity:");
        htmlPanelGrid.getChildren().add(criticityLabel);
        
        HtmlOutputText criticityValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        criticityValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.criticity}", JJCriticity.class));
        criticityValue.setConverter(new JJCriticityConverter());
        htmlPanelGrid.getChildren().add(criticityValue);
        
        HtmlOutputText importanceLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        importanceLabel.setId("importanceLabel");
        importanceLabel.setValue("Importance:");
        htmlPanelGrid.getChildren().add(importanceLabel);
        
        HtmlOutputText importanceValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        importanceValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.importance}", JJImportance.class));
        importanceValue.setConverter(new JJImportanceConverter());
        htmlPanelGrid.getChildren().add(importanceValue);
        
        HtmlOutputText productLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productLabel.setId("productLabel");
        productLabel.setValue("Product:");
        htmlPanelGrid.getChildren().add(productLabel);
        
        HtmlOutputText productValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.product}", JJProduct.class));
        productValue.setConverter(new JJProductConverter());
        htmlPanelGrid.getChildren().add(productValue);
        
        HtmlOutputText projectLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectLabel.setId("projectLabel");
        projectLabel.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectLabel);
        
        HtmlOutputText projectValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.project}", JJProject.class));
        projectValue.setConverter(new JJProjectConverter());
        htmlPanelGrid.getChildren().add(projectValue);
        
        HtmlOutputText requirementLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementLabel.setId("requirementLabel");
        requirementLabel.setValue("Requirement:");
        htmlPanelGrid.getChildren().add(requirementLabel);
        
        HtmlOutputText requirementValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.requirement}", JJRequirement.class));
        requirementValue.setConverter(new JJRequirementConverter());
        htmlPanelGrid.getChildren().add(requirementValue);
        
        HtmlOutputText sprintLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sprintLabel.setId("sprintLabel");
        sprintLabel.setValue("Sprint:");
        htmlPanelGrid.getChildren().add(sprintLabel);
        
        HtmlOutputText sprintValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sprintValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.sprint}", JJSprint.class));
        sprintValue.setConverter(new JJSprintConverter());
        htmlPanelGrid.getChildren().add(sprintValue);
        
        HtmlOutputText statusLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusLabel.setId("statusLabel");
        statusLabel.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusLabel);
        
        HtmlOutputText statusValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.status}", JJStatus.class));
        statusValue.setConverter(new JJStatusConverter());
        htmlPanelGrid.getChildren().add(statusValue);
        
        HtmlOutputText taskLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        taskLabel.setId("taskLabel");
        taskLabel.setValue("Task:");
        htmlPanelGrid.getChildren().add(taskLabel);
        
        HtmlOutputText taskValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        taskValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.task}", JJTask.class));
        taskValue.setConverter(new JJTaskConverter());
        htmlPanelGrid.getChildren().add(taskValue);
        
        HtmlOutputText testcaseLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        testcaseLabel.setId("testcaseLabel");
        testcaseLabel.setValue("Testcase:");
        htmlPanelGrid.getChildren().add(testcaseLabel);
        
        HtmlOutputText testcaseValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        testcaseValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.testcase}", JJTestcase.class));
        testcaseValue.setConverter(new JJTestcaseConverter());
        htmlPanelGrid.getChildren().add(testcaseValue);
        
        HtmlOutputText versioningLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        versioningLabel.setId("versioningLabel");
        versioningLabel.setValue("Versioning:");
        htmlPanelGrid.getChildren().add(versioningLabel);
        
        HtmlOutputText versioningValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        versioningValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJMessageBean.JJMessage_.versioning}", JJVersion.class));
        versioningValue.setConverter(new JJVersionConverter());
        htmlPanelGrid.getChildren().add(versioningValue);
        
        return htmlPanelGrid;
    }
    
    public JJMessage JJMessageBean.getJJMessage_() {
        if (JJMessage_ == null) {
            JJMessage_ = new JJMessage();
        }
        return JJMessage_;
    }
    
    public void JJMessageBean.setJJMessage_(JJMessage JJMessage_) {
        this.JJMessage_ = JJMessage_;
    }
    
    public List<JJContact> JJMessageBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJMessageBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJBug> JJMessageBean.completeBug(String query) {
        List<JJBug> suggestions = new ArrayList<JJBug>();
        for (JJBug jJBug : jJBugService.findAllJJBugs()) {
            String jJBugStr = String.valueOf(jJBug.getName() +  " "  + jJBug.getDescription() +  " "  + jJBug.getCreationDate() +  " "  + jJBug.getUpdatedDate());
            if (jJBugStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJBug);
            }
        }
        return suggestions;
    }
    
    public List<JJBuild> JJMessageBean.completeBuild(String query) {
        List<JJBuild> suggestions = new ArrayList<JJBuild>();
        for (JJBuild jJBuild : jJBuildService.findAllJJBuilds()) {
            String jJBuildStr = String.valueOf(jJBuild.getName() +  " "  + jJBuild.getDescription() +  " "  + jJBuild.getCreationDate() +  " "  + jJBuild.getUpdatedDate());
            if (jJBuildStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJBuild);
            }
        }
        return suggestions;
    }
    
    public List<JJChapter> JJMessageBean.completeChapter(String query) {
        List<JJChapter> suggestions = new ArrayList<JJChapter>();
        for (JJChapter jJChapter : jJChapterService.findAllJJChapters()) {
            String jJChapterStr = String.valueOf(jJChapter.getName() +  " "  + jJChapter.getDescription() +  " "  + jJChapter.getCreationDate() +  " "  + jJChapter.getUpdatedDate());
            if (jJChapterStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJChapter);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJMessageBean.completeContact(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJCriticity> JJMessageBean.completeCriticity(String query) {
        List<JJCriticity> suggestions = new ArrayList<JJCriticity>();
        for (JJCriticity jJCriticity : jJCriticityService.findAllJJCriticitys()) {
            String jJCriticityStr = String.valueOf(jJCriticity.getName() +  " "  + jJCriticity.getDescription() +  " "  + jJCriticity.getCreationDate() +  " "  + jJCriticity.getUpdatedDate());
            if (jJCriticityStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJCriticity);
            }
        }
        return suggestions;
    }
    
    public List<JJImportance> JJMessageBean.completeImportance(String query) {
        List<JJImportance> suggestions = new ArrayList<JJImportance>();
        for (JJImportance jJImportance : jJImportanceService.findAllJJImportances()) {
            String jJImportanceStr = String.valueOf(jJImportance.getName() +  " "  + jJImportance.getDescription() +  " "  + jJImportance.getCreationDate() +  " "  + jJImportance.getUpdatedDate());
            if (jJImportanceStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJImportance);
            }
        }
        return suggestions;
    }
    
    public List<JJProduct> JJMessageBean.completeProduct(String query) {
        List<JJProduct> suggestions = new ArrayList<JJProduct>();
        for (JJProduct jJProduct : jJProductService.findAllJJProducts()) {
            String jJProductStr = String.valueOf(jJProduct.getName() +  " "  + jJProduct.getDescription() +  " "  + jJProduct.getCreationDate() +  " "  + jJProduct.getUpdatedDate());
            if (jJProductStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJProduct);
            }
        }
        return suggestions;
    }
    
    public List<JJProject> JJMessageBean.completeProject(String query) {
        List<JJProject> suggestions = new ArrayList<JJProject>();
        for (JJProject jJProject : jJProjectService.findAllJJProjects()) {
            String jJProjectStr = String.valueOf(jJProject.getName() +  " "  + jJProject.getDescription() +  " "  + jJProject.getCreationDate() +  " "  + jJProject.getUpdatedDate());
            if (jJProjectStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJProject);
            }
        }
        return suggestions;
    }
    
    public List<JJRequirement> JJMessageBean.completeRequirement(String query) {
        List<JJRequirement> suggestions = new ArrayList<JJRequirement>();
        for (JJRequirement jJRequirement : jJRequirementService.findAllJJRequirements()) {
            String jJRequirementStr = String.valueOf(jJRequirement.getName() +  " "  + jJRequirement.getDescription() +  " "  + jJRequirement.getCreationDate() +  " "  + jJRequirement.getUpdatedDate());
            if (jJRequirementStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJRequirement);
            }
        }
        return suggestions;
    }
    
    public List<JJSprint> JJMessageBean.completeSprint(String query) {
        List<JJSprint> suggestions = new ArrayList<JJSprint>();
        for (JJSprint jJSprint : jJSprintService.findAllJJSprints()) {
            String jJSprintStr = String.valueOf(jJSprint.getName() +  " "  + jJSprint.getDescription() +  " "  + jJSprint.getCreationDate() +  " "  + jJSprint.getUpdatedDate());
            if (jJSprintStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJSprint);
            }
        }
        return suggestions;
    }
    
    public List<JJStatus> JJMessageBean.completeStatus(String query) {
        List<JJStatus> suggestions = new ArrayList<JJStatus>();
        for (JJStatus jJStatus : jJStatusService.findAllJJStatuses()) {
            String jJStatusStr = String.valueOf(jJStatus.getName() +  " "  + jJStatus.getDescription() +  " "  + jJStatus.getCreationDate() +  " "  + jJStatus.getUpdatedDate());
            if (jJStatusStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJStatus);
            }
        }
        return suggestions;
    }
    
    public List<JJTask> JJMessageBean.completeTask(String query) {
        List<JJTask> suggestions = new ArrayList<JJTask>();
        for (JJTask jJTask : jJTaskService.findAllJJTasks()) {
            String jJTaskStr = String.valueOf(jJTask.getName() +  " "  + jJTask.getDescription() +  " "  + jJTask.getCreationDate() +  " "  + jJTask.getUpdatedDate());
            if (jJTaskStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJTask);
            }
        }
        return suggestions;
    }
    
    public List<JJTestcase> JJMessageBean.completeTestcase(String query) {
        List<JJTestcase> suggestions = new ArrayList<JJTestcase>();
        for (JJTestcase jJTestcase : jJTestcaseService.findAllJJTestcases()) {
            String jJTestcaseStr = String.valueOf(jJTestcase.getName() +  " "  + jJTestcase.getDescription() +  " "  + jJTestcase.getCreationDate() +  " "  + jJTestcase.getUpdatedDate());
            if (jJTestcaseStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJTestcase);
            }
        }
        return suggestions;
    }
    
    public List<JJVersion> JJMessageBean.completeVersioning(String query) {
        List<JJVersion> suggestions = new ArrayList<JJVersion>();
        for (JJVersion jJVersion : jJVersionService.findAllJJVersions()) {
            String jJVersionStr = String.valueOf(jJVersion.getName() +  " "  + jJVersion.getDescription() +  " "  + jJVersion.getCreationDate() +  " "  + jJVersion.getUpdatedDate());
            if (jJVersionStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJVersion);
            }
        }
        return suggestions;
    }
    
    public String JJMessageBean.onEdit() {
        return null;
    }
    
    public boolean JJMessageBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJMessageBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJMessageBean.displayList() {
        createDialogVisible = false;
        findAllJJMessages();
        return "JJMessage_";
    }
    
    public String JJMessageBean.displayCreateDialog() {
        JJMessage_ = new JJMessage();
        createDialogVisible = true;
        return "JJMessage_";
    }
    
    public String JJMessageBean.persist() {
        String message = "";
        if (JJMessage_.getId() != null) {
            jJMessageService.updateJJMessage(JJMessage_);
            message = "message_successfully_updated";
        } else {
            jJMessageService.saveJJMessage(JJMessage_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");        
		
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJMessage");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJMessages();
    }
    
    public String JJMessageBean.delete() {
        jJMessageService.deleteJJMessage(JJMessage_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJMessage");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);  reset();        
        return findAllJJMessages();
    }
    
    public void JJMessageBean.reset() {
    	
    	setAllJJMessages(jJMessageService.findAllJJMessages());
    	RequestContext context = RequestContext.getCurrentInstance();       
		//context.execute(getDataTable().getId()+".update()");	
    	context.update("messagePanel");    	
        JJMessage_ = null;
        createDialogVisible = false;
    }
    
    public void JJMessageBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

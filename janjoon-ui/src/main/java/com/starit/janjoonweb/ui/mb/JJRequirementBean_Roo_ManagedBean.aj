// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import com.starit.janjoonweb.domain.JJBug;
import com.starit.janjoonweb.domain.JJCategory;
import com.starit.janjoonweb.domain.JJCategoryService;
import com.starit.janjoonweb.domain.JJChapter;
import com.starit.janjoonweb.domain.JJChapterService;
import com.starit.janjoonweb.domain.JJContact;
import com.starit.janjoonweb.domain.JJContactService;
import com.starit.janjoonweb.domain.JJCriticity;
import com.starit.janjoonweb.domain.JJCriticityService;
import com.starit.janjoonweb.domain.JJImportance;
import com.starit.janjoonweb.domain.JJImportanceService;
import com.starit.janjoonweb.domain.JJMessage;
import com.starit.janjoonweb.domain.JJProduct;
import com.starit.janjoonweb.domain.JJProductService;
import com.starit.janjoonweb.domain.JJProject;
import com.starit.janjoonweb.domain.JJProjectService;
import com.starit.janjoonweb.domain.JJRequirement;
import com.starit.janjoonweb.domain.JJRequirementService;
import com.starit.janjoonweb.domain.JJSprint;
import com.starit.janjoonweb.domain.JJSprintService;
import com.starit.janjoonweb.domain.JJStatus;
import com.starit.janjoonweb.domain.JJStatusService;
import com.starit.janjoonweb.domain.JJTask;
import com.starit.janjoonweb.domain.JJTestcase;
import com.starit.janjoonweb.domain.JJVersion;
import com.starit.janjoonweb.domain.JJVersionService;
import com.starit.janjoonweb.domain.reference.JJRelationship;
import com.starit.janjoonweb.ui.mb.JJRequirementBean;
import com.starit.janjoonweb.ui.mb.converter.JJCategoryConverter;
import com.starit.janjoonweb.ui.mb.converter.JJChapterConverter;
import com.starit.janjoonweb.ui.mb.converter.JJContactConverter;
import com.starit.janjoonweb.ui.mb.converter.JJCriticityConverter;
import com.starit.janjoonweb.ui.mb.converter.JJImportanceConverter;
import com.starit.janjoonweb.ui.mb.converter.JJProductConverter;
import com.starit.janjoonweb.ui.mb.converter.JJProjectConverter;
import com.starit.janjoonweb.ui.mb.converter.JJRequirementConverter;
import com.starit.janjoonweb.ui.mb.converter.JJSprintConverter;
import com.starit.janjoonweb.ui.mb.converter.JJStatusConverter;
import com.starit.janjoonweb.ui.mb.converter.JJVersionConverter;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJRequirementBean_Roo_ManagedBean {
    
    declare @type: JJRequirementBean: @ManagedBean(name = "jJRequirementBean");
    
    declare @type: JJRequirementBean: @SessionScoped;
    
    @Autowired
    JJRequirementService JJRequirementBean.jJRequirementService;
    
    @Autowired
    JJContactService JJRequirementBean.jJContactService;
    
    @Autowired
    JJProjectService JJRequirementBean.jJProjectService;
    
    @Autowired
    JJChapterService JJRequirementBean.jJChapterService;
    
    @Autowired
    JJVersionService JJRequirementBean.jJVersionService;
    
    @Autowired
    JJProductService JJRequirementBean.jJProductService;
    
    @Autowired
    JJCategoryService JJRequirementBean.jJCategoryService;
    
    @Autowired
    JJCriticityService JJRequirementBean.jJCriticityService;
    
    @Autowired
    JJImportanceService JJRequirementBean.jJImportanceService;
    
    @Autowired
    JJStatusService JJRequirementBean.jJStatusService;
    
    @Autowired
    JJSprintService JJRequirementBean.jJSprintService;
    
    private String JJRequirementBean.name = "JJRequirements";
    
    private JJRequirement JJRequirementBean.JJRequirement_;
    
    private List<JJRequirement> JJRequirementBean.allJJRequirements;
    
    private boolean JJRequirementBean.dataVisible = false;
    
    private List<String> JJRequirementBean.columns;
    
    private HtmlPanelGrid JJRequirementBean.createPanelGrid;
    
    private HtmlPanelGrid JJRequirementBean.editPanelGrid;
    
    private HtmlPanelGrid JJRequirementBean.viewPanelGrid;
    
    private boolean JJRequirementBean.createDialogVisible = false;
    
    private List<JJBug> JJRequirementBean.selectedBugs;
    
    private List<JJTask> JJRequirementBean.selectedTasks;
    
    private List<JJMessage> JJRequirementBean.selectedMessages;
    
    private List<JJRequirement> JJRequirementBean.selectedRequirementLinkDown;
    
    private List<JJRequirement> JJRequirementBean.selectedRequirementLinkUp;
    
    private List<JJTestcase> JJRequirementBean.selectedTestcases;
    
    @PostConstruct
    public void JJRequirementBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
        columns.add("ordering");
    }
    
    public String JJRequirementBean.getName() {
        return name;
    }
    
    public List<String> JJRequirementBean.getColumns() {
        return columns;
    }
    
    public List<JJRequirement> JJRequirementBean.getAllJJRequirements() {
        return allJJRequirements;
    }
    
    public void JJRequirementBean.setAllJJRequirements(List<JJRequirement> allJJRequirements) {
        this.allJJRequirements = allJJRequirements;
    }
    
    public String JJRequirementBean.findAllJJRequirements() {
        allJJRequirements = jJRequirementService.findAllJJRequirements();
        dataVisible = !allJJRequirements.isEmpty();
        return null;
    }
    
    public boolean JJRequirementBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJRequirementBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJRequirementBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJRequirementBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJRequirementBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJRequirementBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJRequirementBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJRequirementBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJRequirementBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputTextarea nameCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMaximum(100);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel descriptionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionCreateOutput.setFor("descriptionCreateInput");
        descriptionCreateOutput.setId("descriptionCreateOutput");
        descriptionCreateOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionCreateOutput);
        
        InputTextarea descriptionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionCreateInput.setId("descriptionCreateInput");
        descriptionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.description}", String.class));
        descriptionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionCreateInput);
        
        Message descriptionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionCreateInputMessage.setId("descriptionCreateInputMessage");
        descriptionCreateInputMessage.setFor("descriptionCreateInput");
        descriptionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionCreateInputMessage);
        
        OutputLabel creationDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateCreateOutput.setFor("creationDateCreateInput");
        creationDateCreateOutput.setId("creationDateCreateOutput");
        creationDateCreateOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateCreateOutput);
        
        Calendar creationDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateCreateInput.setId("creationDateCreateInput");
        creationDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.creationDate}", Date.class));
        creationDateCreateInput.setNavigator(true);
        creationDateCreateInput.setEffect("slideDown");
        creationDateCreateInput.setPattern("dd/MM/yyyy");
        creationDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateCreateInput);
        
        Message creationDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateCreateInputMessage.setId("creationDateCreateInputMessage");
        creationDateCreateInputMessage.setFor("creationDateCreateInput");
        creationDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateCreateInputMessage);
        
        OutputLabel createdByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByCreateOutput.setFor("createdByCreateInput");
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.createdBy}", JJContact.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByCreateInput.setConverter(new JJContactConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        OutputLabel updatedDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateCreateOutput.setFor("updatedDateCreateInput");
        updatedDateCreateOutput.setId("updatedDateCreateOutput");
        updatedDateCreateOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateCreateOutput);
        
        Calendar updatedDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateCreateInput.setId("updatedDateCreateInput");
        updatedDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.updatedDate}", Date.class));
        updatedDateCreateInput.setNavigator(true);
        updatedDateCreateInput.setEffect("slideDown");
        updatedDateCreateInput.setPattern("dd/MM/yyyy");
        updatedDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateCreateInput);
        
        Message updatedDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateCreateInputMessage.setId("updatedDateCreateInputMessage");
        updatedDateCreateInputMessage.setFor("updatedDateCreateInput");
        updatedDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateCreateInputMessage);
        
        OutputLabel updatedByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByCreateOutput.setFor("updatedByCreateInput");
        updatedByCreateOutput.setId("updatedByCreateOutput");
        updatedByCreateOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByCreateOutput);
        
        AutoComplete updatedByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByCreateInput.setId("updatedByCreateInput");
        updatedByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.updatedBy}", JJContact.class));
        updatedByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByCreateInput.setDropdown(true);
        updatedByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByCreateInput.setConverter(new JJContactConverter());
        updatedByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByCreateInput);
        
        Message updatedByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByCreateInputMessage.setId("updatedByCreateInputMessage");
        updatedByCreateInputMessage.setFor("updatedByCreateInput");
        updatedByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByCreateInputMessage);
        
        OutputLabel enabledCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledCreateOutput.setFor("enabledCreateInput");
        enabledCreateOutput.setId("enabledCreateOutput");
        enabledCreateOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledCreateOutput);
        
        SelectBooleanCheckbox enabledCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledCreateInput.setId("enabledCreateInput");
        enabledCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.enabled}", Boolean.class));
        enabledCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledCreateInput);
        
        Message enabledCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledCreateInputMessage.setId("enabledCreateInputMessage");
        enabledCreateInputMessage.setFor("enabledCreateInput");
        enabledCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledCreateInputMessage);
        
        OutputLabel orderingCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        orderingCreateOutput.setFor("orderingCreateInput");
        orderingCreateOutput.setId("orderingCreateOutput");
        orderingCreateOutput.setValue("Ordering:");
        htmlPanelGrid.getChildren().add(orderingCreateOutput);
        
        Spinner orderingCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        orderingCreateInput.setId("orderingCreateInput");
        orderingCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.ordering}", Integer.class));
        orderingCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(orderingCreateInput);
        
        Message orderingCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        orderingCreateInputMessage.setId("orderingCreateInputMessage");
        orderingCreateInputMessage.setFor("orderingCreateInput");
        orderingCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(orderingCreateInputMessage);
        
        OutputLabel numeroCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        numeroCreateOutput.setFor("numeroCreateInput");
        numeroCreateOutput.setId("numeroCreateOutput");
        numeroCreateOutput.setValue("Numero:");
        htmlPanelGrid.getChildren().add(numeroCreateOutput);
        
        Spinner numeroCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        numeroCreateInput.setId("numeroCreateInput");
        numeroCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.numero}", Integer.class));
        numeroCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(numeroCreateInput);
        
        Message numeroCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        numeroCreateInputMessage.setId("numeroCreateInputMessage");
        numeroCreateInputMessage.setFor("numeroCreateInput");
        numeroCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(numeroCreateInputMessage);
        
        OutputLabel projectCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        projectCreateOutput.setFor("projectCreateInput");
        projectCreateOutput.setId("projectCreateOutput");
        projectCreateOutput.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectCreateOutput);
        
        AutoComplete projectCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        projectCreateInput.setId("projectCreateInput");
        projectCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.project}", JJProject.class));
        projectCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeProject}", List.class, new Class[] { String.class }));
        projectCreateInput.setDropdown(true);
        projectCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "project", String.class));
        projectCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{project.name} #{project.description} #{project.creationDate} #{project.updatedDate}", String.class));
        projectCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{project}", JJProject.class));
        projectCreateInput.setConverter(new JJProjectConverter());
        projectCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(projectCreateInput);
        
        Message projectCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectCreateInputMessage.setId("projectCreateInputMessage");
        projectCreateInputMessage.setFor("projectCreateInput");
        projectCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectCreateInputMessage);
        
        OutputLabel startDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        startDateCreateOutput.setFor("startDateCreateInput");
        startDateCreateOutput.setId("startDateCreateOutput");
        startDateCreateOutput.setValue("Start Date:");
        htmlPanelGrid.getChildren().add(startDateCreateOutput);
        
        Calendar startDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        startDateCreateInput.setId("startDateCreateInput");
        startDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.startDate}", Date.class));
        startDateCreateInput.setNavigator(true);
        startDateCreateInput.setEffect("slideDown");
        startDateCreateInput.setPattern("dd/MM/yyyy");
        startDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(startDateCreateInput);
        
        Message startDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        startDateCreateInputMessage.setId("startDateCreateInputMessage");
        startDateCreateInputMessage.setFor("startDateCreateInput");
        startDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(startDateCreateInputMessage);
        
        OutputLabel endDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        endDateCreateOutput.setFor("endDateCreateInput");
        endDateCreateOutput.setId("endDateCreateOutput");
        endDateCreateOutput.setValue("End Date:");
        htmlPanelGrid.getChildren().add(endDateCreateOutput);
        
        Calendar endDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        endDateCreateInput.setId("endDateCreateInput");
        endDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.endDate}", Date.class));
        endDateCreateInput.setNavigator(true);
        endDateCreateInput.setEffect("slideDown");
        endDateCreateInput.setPattern("dd/MM/yyyy");
        endDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(endDateCreateInput);
        
        Message endDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        endDateCreateInputMessage.setId("endDateCreateInputMessage");
        endDateCreateInputMessage.setFor("endDateCreateInput");
        endDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(endDateCreateInputMessage);
        
        OutputLabel chapterCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        chapterCreateOutput.setFor("chapterCreateInput");
        chapterCreateOutput.setId("chapterCreateOutput");
        chapterCreateOutput.setValue("Chapter:");
        htmlPanelGrid.getChildren().add(chapterCreateOutput);
        
        AutoComplete chapterCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        chapterCreateInput.setId("chapterCreateInput");
        chapterCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.chapter}", JJChapter.class));
        chapterCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeChapter}", List.class, new Class[] { String.class }));
        chapterCreateInput.setDropdown(true);
        chapterCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "chapter", String.class));
        chapterCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{chapter.name} #{chapter.description} #{chapter.creationDate} #{chapter.updatedDate}", String.class));
        chapterCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{chapter}", JJChapter.class));
        chapterCreateInput.setConverter(new JJChapterConverter());
        chapterCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(chapterCreateInput);
        
        Message chapterCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        chapterCreateInputMessage.setId("chapterCreateInputMessage");
        chapterCreateInputMessage.setFor("chapterCreateInput");
        chapterCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(chapterCreateInputMessage);
        
        OutputLabel versioningCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        versioningCreateOutput.setFor("versioningCreateInput");
        versioningCreateOutput.setId("versioningCreateOutput");
        versioningCreateOutput.setValue("Versioning:");
        htmlPanelGrid.getChildren().add(versioningCreateOutput);
        
        AutoComplete versioningCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        versioningCreateInput.setId("versioningCreateInput");
        versioningCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.versioning}", JJVersion.class));
        versioningCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeVersioning}", List.class, new Class[] { String.class }));
        versioningCreateInput.setDropdown(true);
        versioningCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "versioning", String.class));
        versioningCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{versioning.name} #{versioning.description} #{versioning.creationDate} #{versioning.updatedDate}", String.class));
        versioningCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{versioning}", JJVersion.class));
        versioningCreateInput.setConverter(new JJVersionConverter());
        versioningCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(versioningCreateInput);
        
        Message versioningCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        versioningCreateInputMessage.setId("versioningCreateInputMessage");
        versioningCreateInputMessage.setFor("versioningCreateInput");
        versioningCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(versioningCreateInputMessage);
        
        OutputLabel productCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        productCreateOutput.setFor("productCreateInput");
        productCreateOutput.setId("productCreateOutput");
        productCreateOutput.setValue("Product:");
        htmlPanelGrid.getChildren().add(productCreateOutput);
        
        AutoComplete productCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        productCreateInput.setId("productCreateInput");
        productCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.product}", JJProduct.class));
        productCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeProduct}", List.class, new Class[] { String.class }));
        productCreateInput.setDropdown(true);
        productCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "product", String.class));
        productCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{product.name} #{product.description} #{product.creationDate} #{product.updatedDate}", String.class));
        productCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{product}", JJProduct.class));
        productCreateInput.setConverter(new JJProductConverter());
        productCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(productCreateInput);
        
        Message productCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productCreateInputMessage.setId("productCreateInputMessage");
        productCreateInputMessage.setFor("productCreateInput");
        productCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productCreateInputMessage);
        
        OutputLabel categoryCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        categoryCreateOutput.setFor("categoryCreateInput");
        categoryCreateOutput.setId("categoryCreateOutput");
        categoryCreateOutput.setValue("Category:");
        htmlPanelGrid.getChildren().add(categoryCreateOutput);
        
        AutoComplete categoryCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoryCreateInput.setId("categoryCreateInput");
        categoryCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.category}", JJCategory.class));
        categoryCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeCategory}", List.class, new Class[] { String.class }));
        categoryCreateInput.setDropdown(true);
        categoryCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "category", String.class));
        categoryCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{category.name} #{category.description} #{category.creationDate} #{category.updatedDate}", String.class));
        categoryCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{category}", JJCategory.class));
        categoryCreateInput.setConverter(new JJCategoryConverter());
        categoryCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoryCreateInput);
        
        Message categoryCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoryCreateInputMessage.setId("categoryCreateInputMessage");
        categoryCreateInputMessage.setFor("categoryCreateInput");
        categoryCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoryCreateInputMessage);
        
        OutputLabel criticityCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        criticityCreateOutput.setFor("criticityCreateInput");
        criticityCreateOutput.setId("criticityCreateOutput");
        criticityCreateOutput.setValue("Criticity:");
        htmlPanelGrid.getChildren().add(criticityCreateOutput);
        
        AutoComplete criticityCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        criticityCreateInput.setId("criticityCreateInput");
        criticityCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.criticity}", JJCriticity.class));
        criticityCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeCriticity}", List.class, new Class[] { String.class }));
        criticityCreateInput.setDropdown(true);
        criticityCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "criticity", String.class));
        criticityCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{criticity.name} #{criticity.description} #{criticity.creationDate} #{criticity.updatedDate}", String.class));
        criticityCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{criticity}", JJCriticity.class));
        criticityCreateInput.setConverter(new JJCriticityConverter());
        criticityCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(criticityCreateInput);
        
        Message criticityCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        criticityCreateInputMessage.setId("criticityCreateInputMessage");
        criticityCreateInputMessage.setFor("criticityCreateInput");
        criticityCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(criticityCreateInputMessage);
        
        OutputLabel importanceCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        importanceCreateOutput.setFor("importanceCreateInput");
        importanceCreateOutput.setId("importanceCreateOutput");
        importanceCreateOutput.setValue("Importance:");
        htmlPanelGrid.getChildren().add(importanceCreateOutput);
        
        AutoComplete importanceCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        importanceCreateInput.setId("importanceCreateInput");
        importanceCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.importance}", JJImportance.class));
        importanceCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeImportance}", List.class, new Class[] { String.class }));
        importanceCreateInput.setDropdown(true);
        importanceCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "importance", String.class));
        importanceCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{importance.name} #{importance.description} #{importance.creationDate} #{importance.updatedDate}", String.class));
        importanceCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{importance}", JJImportance.class));
        importanceCreateInput.setConverter(new JJImportanceConverter());
        importanceCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(importanceCreateInput);
        
        Message importanceCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        importanceCreateInputMessage.setId("importanceCreateInputMessage");
        importanceCreateInputMessage.setFor("importanceCreateInput");
        importanceCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(importanceCreateInputMessage);
        
        OutputLabel statusCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusCreateOutput.setFor("statusCreateInput");
        statusCreateOutput.setId("statusCreateOutput");
        statusCreateOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusCreateOutput);
        
        AutoComplete statusCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        statusCreateInput.setId("statusCreateInput");
        statusCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.status}", JJStatus.class));
        statusCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeStatus}", List.class, new Class[] { String.class }));
        statusCreateInput.setDropdown(true);
        statusCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "status", String.class));
        statusCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{status.name} #{status.description} #{status.creationDate} #{status.updatedDate}", String.class));
        statusCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{status}", JJStatus.class));
        statusCreateInput.setConverter(new JJStatusConverter());
        statusCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(statusCreateInput);
        
        Message statusCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusCreateInputMessage.setId("statusCreateInputMessage");
        statusCreateInputMessage.setFor("statusCreateInput");
        statusCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusCreateInputMessage);
        
        OutputLabel sprintCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        sprintCreateOutput.setFor("sprintCreateInput");
        sprintCreateOutput.setId("sprintCreateOutput");
        sprintCreateOutput.setValue("Sprint:");
        htmlPanelGrid.getChildren().add(sprintCreateOutput);
        
        AutoComplete sprintCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        sprintCreateInput.setId("sprintCreateInput");
        sprintCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.sprint}", JJSprint.class));
        sprintCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeSprint}", List.class, new Class[] { String.class }));
        sprintCreateInput.setDropdown(true);
        sprintCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "sprint", String.class));
        sprintCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{sprint.name} #{sprint.description} #{sprint.creationDate} #{sprint.updatedDate}", String.class));
        sprintCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{sprint}", JJSprint.class));
        sprintCreateInput.setConverter(new JJSprintConverter());
        sprintCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(sprintCreateInput);
        
        Message sprintCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        sprintCreateInputMessage.setId("sprintCreateInputMessage");
        sprintCreateInputMessage.setFor("sprintCreateInput");
        sprintCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(sprintCreateInputMessage);
        
        OutputLabel impactCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        impactCreateOutput.setFor("impactCreateInput");
        impactCreateOutput.setId("impactCreateOutput");
        impactCreateOutput.setValue("Impact:");
        htmlPanelGrid.getChildren().add(impactCreateOutput);
        
        InputTextarea impactCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        impactCreateInput.setId("impactCreateInput");
        impactCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.impact}", String.class));
        LengthValidator impactCreateInputValidator = new LengthValidator();
        impactCreateInputValidator.setMaximum(100);
        impactCreateInput.addValidator(impactCreateInputValidator);
        impactCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(impactCreateInput);
        
        Message impactCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        impactCreateInputMessage.setId("impactCreateInputMessage");
        impactCreateInputMessage.setFor("impactCreateInput");
        impactCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(impactCreateInputMessage);
        
        OutputLabel relationCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        relationCreateOutput.setFor("relationCreateInput");
        relationCreateOutput.setId("relationCreateOutput");
        relationCreateOutput.setValue("Relation:");
        htmlPanelGrid.getChildren().add(relationCreateOutput);
        
        AutoComplete relationCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        relationCreateInput.setId("relationCreateInput");
        relationCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.relation}", JJRelationship.class));
        relationCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeRelation}", List.class, new Class[] { String.class }));
        relationCreateInput.setDropdown(true);
        relationCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(relationCreateInput);
        
        Message relationCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        relationCreateInputMessage.setId("relationCreateInputMessage");
        relationCreateInputMessage.setFor("relationCreateInput");
        relationCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(relationCreateInputMessage);
        
        HtmlOutputText bugsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugsCreateOutput.setId("bugsCreateOutput");
        bugsCreateOutput.setValue("Bugs:");
        htmlPanelGrid.getChildren().add(bugsCreateOutput);
        
        HtmlOutputText bugsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugsCreateInput.setId("bugsCreateInput");
        bugsCreateInput.setValue("This relationship is managed from the JJBug side");
        htmlPanelGrid.getChildren().add(bugsCreateInput);
        
        Message bugsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bugsCreateInputMessage.setId("bugsCreateInputMessage");
        bugsCreateInputMessage.setFor("bugsCreateInput");
        bugsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bugsCreateInputMessage);
        
        HtmlOutputText tasksCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksCreateOutput.setId("tasksCreateOutput");
        tasksCreateOutput.setValue("Tasks:");
        htmlPanelGrid.getChildren().add(tasksCreateOutput);
        
        HtmlOutputText tasksCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksCreateInput.setId("tasksCreateInput");
        tasksCreateInput.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(tasksCreateInput);
        
        Message tasksCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tasksCreateInputMessage.setId("tasksCreateInputMessage");
        tasksCreateInputMessage.setFor("tasksCreateInput");
        tasksCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tasksCreateInputMessage);
        
        OutputLabel assignedToCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        assignedToCreateOutput.setFor("assignedToCreateInput");
        assignedToCreateOutput.setId("assignedToCreateOutput");
        assignedToCreateOutput.setValue("Assigned To:");
        htmlPanelGrid.getChildren().add(assignedToCreateOutput);
        
        AutoComplete assignedToCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        assignedToCreateInput.setId("assignedToCreateInput");
        assignedToCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.assignedTo}", JJContact.class));
        assignedToCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeAssignedTo}", List.class, new Class[] { String.class }));
        assignedToCreateInput.setDropdown(true);
        assignedToCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "assignedTo", String.class));
        assignedToCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{assignedTo.name} #{assignedTo.description} #{assignedTo.creationDate} #{assignedTo.updatedDate}", String.class));
        assignedToCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{assignedTo}", JJContact.class));
        assignedToCreateInput.setConverter(new JJContactConverter());
        assignedToCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(assignedToCreateInput);
        
        Message assignedToCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        assignedToCreateInputMessage.setId("assignedToCreateInputMessage");
        assignedToCreateInputMessage.setFor("assignedToCreateInput");
        assignedToCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(assignedToCreateInputMessage);
        
        HtmlOutputText messagesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesCreateOutput.setId("messagesCreateOutput");
        messagesCreateOutput.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesCreateOutput);
        
        HtmlOutputText messagesCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesCreateInput.setId("messagesCreateInput");
        messagesCreateInput.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesCreateInput);
        
        Message messagesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messagesCreateInputMessage.setId("messagesCreateInputMessage");
        messagesCreateInputMessage.setFor("messagesCreateInput");
        messagesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messagesCreateInputMessage);
        
        OutputLabel noteCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        noteCreateOutput.setFor("noteCreateInput");
        noteCreateOutput.setId("noteCreateOutput");
        noteCreateOutput.setValue("Note:");
        htmlPanelGrid.getChildren().add(noteCreateOutput);
        
        InputTextarea noteCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        noteCreateInput.setId("noteCreateInput");
        noteCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.note}", String.class));
        noteCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(noteCreateInput);
        
        Message noteCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        noteCreateInputMessage.setId("noteCreateInputMessage");
        noteCreateInputMessage.setFor("noteCreateInput");
        noteCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(noteCreateInputMessage);
        
        HtmlOutputText requirementLinkDownCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementLinkDownCreateOutput.setId("requirementLinkDownCreateOutput");
        requirementLinkDownCreateOutput.setValue("Requirement Link Down:");
        htmlPanelGrid.getChildren().add(requirementLinkDownCreateOutput);
        
        HtmlOutputText requirementLinkDownCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementLinkDownCreateInput.setId("requirementLinkDownCreateInput");
        requirementLinkDownCreateInput.setValue("This relationship is managed from the JJRequirement side");
        htmlPanelGrid.getChildren().add(requirementLinkDownCreateInput);
        
        Message requirementLinkDownCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementLinkDownCreateInputMessage.setId("requirementLinkDownCreateInputMessage");
        requirementLinkDownCreateInputMessage.setFor("requirementLinkDownCreateInput");
        requirementLinkDownCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementLinkDownCreateInputMessage);
        
        OutputLabel requirementLinkUpCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        requirementLinkUpCreateOutput.setFor("requirementLinkUpCreateInput");
        requirementLinkUpCreateOutput.setId("requirementLinkUpCreateOutput");
        requirementLinkUpCreateOutput.setValue("Requirement Link Up:");
        htmlPanelGrid.getChildren().add(requirementLinkUpCreateOutput);
        
        SelectManyMenu requirementLinkUpCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        requirementLinkUpCreateInput.setId("requirementLinkUpCreateInput");
        requirementLinkUpCreateInput.setConverter(new JJRequirementConverter());
        requirementLinkUpCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.selectedRequirementLinkUp}", List.class));
        UISelectItems requirementLinkUpCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        requirementLinkUpCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.allJJRequirements}", List.class));
        requirementLinkUpCreateInput.setRequired(false);
        requirementLinkUpCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJRequirement", String.class));
        requirementLinkUpCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJRequirement}", String.class));
        requirementLinkUpCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJRequirement}", JJRequirement.class));
        requirementLinkUpCreateInput.getChildren().add(requirementLinkUpCreateInputItems);
        htmlPanelGrid.getChildren().add(requirementLinkUpCreateInput);
        
        Message requirementLinkUpCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementLinkUpCreateInputMessage.setId("requirementLinkUpCreateInputMessage");
        requirementLinkUpCreateInputMessage.setFor("requirementLinkUpCreateInput");
        requirementLinkUpCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementLinkUpCreateInputMessage);
        
        HtmlOutputText testcasesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        testcasesCreateOutput.setId("testcasesCreateOutput");
        testcasesCreateOutput.setValue("Testcases:");
        htmlPanelGrid.getChildren().add(testcasesCreateOutput);
        
        HtmlOutputText testcasesCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        testcasesCreateInput.setId("testcasesCreateInput");
        testcasesCreateInput.setValue("This relationship is managed from the JJTestcase side");
        htmlPanelGrid.getChildren().add(testcasesCreateInput);
        
        Message testcasesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        testcasesCreateInputMessage.setId("testcasesCreateInputMessage");
        testcasesCreateInputMessage.setFor("testcasesCreateInput");
        testcasesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(testcasesCreateInputMessage);
        
        OutputLabel operationCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        operationCreateOutput.setFor("operationCreateInput");
        operationCreateOutput.setId("operationCreateOutput");
        operationCreateOutput.setValue("Operation:");
        htmlPanelGrid.getChildren().add(operationCreateOutput);
        
        SelectBooleanCheckbox operationCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        operationCreateInput.setId("operationCreateInput");
        operationCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.operation}", Boolean.class));
        operationCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(operationCreateInput);
        
        Message operationCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        operationCreateInputMessage.setId("operationCreateInputMessage");
        operationCreateInputMessage.setFor("operationCreateInput");
        operationCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(operationCreateInputMessage);
        
        OutputLabel completionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        completionCreateOutput.setFor("completionCreateInput");
        completionCreateOutput.setId("completionCreateOutput");
        completionCreateOutput.setValue("Completion:");
        htmlPanelGrid.getChildren().add(completionCreateOutput);
        
        SelectBooleanCheckbox completionCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        completionCreateInput.setId("completionCreateInput");
        completionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.completion}", Boolean.class));
        completionCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(completionCreateInput);
        
        Message completionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        completionCreateInputMessage.setId("completionCreateInputMessage");
        completionCreateInputMessage.setFor("completionCreateInput");
        completionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(completionCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJRequirementBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputTextarea nameEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMaximum(100);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel descriptionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionEditOutput.setFor("descriptionEditInput");
        descriptionEditOutput.setId("descriptionEditOutput");
        descriptionEditOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionEditOutput);
        
        InputTextarea descriptionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionEditInput.setId("descriptionEditInput");
        descriptionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.description}", String.class));
        descriptionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionEditInput);
        
        Message descriptionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionEditInputMessage.setId("descriptionEditInputMessage");
        descriptionEditInputMessage.setFor("descriptionEditInput");
        descriptionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionEditInputMessage);
        
        OutputLabel creationDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateEditOutput.setFor("creationDateEditInput");
        creationDateEditOutput.setId("creationDateEditOutput");
        creationDateEditOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateEditOutput);
        
        Calendar creationDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateEditInput.setId("creationDateEditInput");
        creationDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.creationDate}", Date.class));
        creationDateEditInput.setNavigator(true);
        creationDateEditInput.setEffect("slideDown");
        creationDateEditInput.setPattern("dd/MM/yyyy");
        creationDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateEditInput);
        
        Message creationDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateEditInputMessage.setId("creationDateEditInputMessage");
        creationDateEditInputMessage.setFor("creationDateEditInput");
        creationDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateEditInputMessage);
        
        OutputLabel createdByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByEditOutput.setFor("createdByEditInput");
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.createdBy}", JJContact.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByEditInput.setConverter(new JJContactConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        OutputLabel updatedDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateEditOutput.setFor("updatedDateEditInput");
        updatedDateEditOutput.setId("updatedDateEditOutput");
        updatedDateEditOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateEditOutput);
        
        Calendar updatedDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateEditInput.setId("updatedDateEditInput");
        updatedDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.updatedDate}", Date.class));
        updatedDateEditInput.setNavigator(true);
        updatedDateEditInput.setEffect("slideDown");
        updatedDateEditInput.setPattern("dd/MM/yyyy");
        updatedDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateEditInput);
        
        Message updatedDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateEditInputMessage.setId("updatedDateEditInputMessage");
        updatedDateEditInputMessage.setFor("updatedDateEditInput");
        updatedDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateEditInputMessage);
        
        OutputLabel updatedByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByEditOutput.setFor("updatedByEditInput");
        updatedByEditOutput.setId("updatedByEditOutput");
        updatedByEditOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByEditOutput);
        
        AutoComplete updatedByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByEditInput.setId("updatedByEditInput");
        updatedByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.updatedBy}", JJContact.class));
        updatedByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByEditInput.setDropdown(true);
        updatedByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByEditInput.setConverter(new JJContactConverter());
        updatedByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByEditInput);
        
        Message updatedByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByEditInputMessage.setId("updatedByEditInputMessage");
        updatedByEditInputMessage.setFor("updatedByEditInput");
        updatedByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByEditInputMessage);
        
        OutputLabel enabledEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledEditOutput.setFor("enabledEditInput");
        enabledEditOutput.setId("enabledEditOutput");
        enabledEditOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledEditOutput);
        
        SelectBooleanCheckbox enabledEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledEditInput.setId("enabledEditInput");
        enabledEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.enabled}", Boolean.class));
        enabledEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledEditInput);
        
        Message enabledEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledEditInputMessage.setId("enabledEditInputMessage");
        enabledEditInputMessage.setFor("enabledEditInput");
        enabledEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledEditInputMessage);
        
        OutputLabel orderingEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        orderingEditOutput.setFor("orderingEditInput");
        orderingEditOutput.setId("orderingEditOutput");
        orderingEditOutput.setValue("Ordering:");
        htmlPanelGrid.getChildren().add(orderingEditOutput);
        
        Spinner orderingEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        orderingEditInput.setId("orderingEditInput");
        orderingEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.ordering}", Integer.class));
        orderingEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(orderingEditInput);
        
        Message orderingEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        orderingEditInputMessage.setId("orderingEditInputMessage");
        orderingEditInputMessage.setFor("orderingEditInput");
        orderingEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(orderingEditInputMessage);
        
        OutputLabel numeroEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        numeroEditOutput.setFor("numeroEditInput");
        numeroEditOutput.setId("numeroEditOutput");
        numeroEditOutput.setValue("Numero:");
        htmlPanelGrid.getChildren().add(numeroEditOutput);
        
        Spinner numeroEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        numeroEditInput.setId("numeroEditInput");
        numeroEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.numero}", Integer.class));
        numeroEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(numeroEditInput);
        
        Message numeroEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        numeroEditInputMessage.setId("numeroEditInputMessage");
        numeroEditInputMessage.setFor("numeroEditInput");
        numeroEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(numeroEditInputMessage);
        
        OutputLabel projectEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        projectEditOutput.setFor("projectEditInput");
        projectEditOutput.setId("projectEditOutput");
        projectEditOutput.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectEditOutput);
        
        AutoComplete projectEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        projectEditInput.setId("projectEditInput");
        projectEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.project}", JJProject.class));
        projectEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeProject}", List.class, new Class[] { String.class }));
        projectEditInput.setDropdown(true);
        projectEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "project", String.class));
        projectEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{project.name} #{project.description} #{project.creationDate} #{project.updatedDate}", String.class));
        projectEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{project}", JJProject.class));
        projectEditInput.setConverter(new JJProjectConverter());
        projectEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(projectEditInput);
        
        Message projectEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectEditInputMessage.setId("projectEditInputMessage");
        projectEditInputMessage.setFor("projectEditInput");
        projectEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectEditInputMessage);
        
        OutputLabel startDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        startDateEditOutput.setFor("startDateEditInput");
        startDateEditOutput.setId("startDateEditOutput");
        startDateEditOutput.setValue("Start Date:");
        htmlPanelGrid.getChildren().add(startDateEditOutput);
        
        Calendar startDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        startDateEditInput.setId("startDateEditInput");
        startDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.startDate}", Date.class));
        startDateEditInput.setNavigator(true);
        startDateEditInput.setEffect("slideDown");
        startDateEditInput.setPattern("dd/MM/yyyy");
        startDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(startDateEditInput);
        
        Message startDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        startDateEditInputMessage.setId("startDateEditInputMessage");
        startDateEditInputMessage.setFor("startDateEditInput");
        startDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(startDateEditInputMessage);
        
        OutputLabel endDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        endDateEditOutput.setFor("endDateEditInput");
        endDateEditOutput.setId("endDateEditOutput");
        endDateEditOutput.setValue("End Date:");
        htmlPanelGrid.getChildren().add(endDateEditOutput);
        
        Calendar endDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        endDateEditInput.setId("endDateEditInput");
        endDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.endDate}", Date.class));
        endDateEditInput.setNavigator(true);
        endDateEditInput.setEffect("slideDown");
        endDateEditInput.setPattern("dd/MM/yyyy");
        endDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(endDateEditInput);
        
        Message endDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        endDateEditInputMessage.setId("endDateEditInputMessage");
        endDateEditInputMessage.setFor("endDateEditInput");
        endDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(endDateEditInputMessage);
        
        OutputLabel chapterEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        chapterEditOutput.setFor("chapterEditInput");
        chapterEditOutput.setId("chapterEditOutput");
        chapterEditOutput.setValue("Chapter:");
        htmlPanelGrid.getChildren().add(chapterEditOutput);
        
        AutoComplete chapterEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        chapterEditInput.setId("chapterEditInput");
        chapterEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.chapter}", JJChapter.class));
        chapterEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeChapter}", List.class, new Class[] { String.class }));
        chapterEditInput.setDropdown(true);
        chapterEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "chapter", String.class));
        chapterEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{chapter.name} #{chapter.description} #{chapter.creationDate} #{chapter.updatedDate}", String.class));
        chapterEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{chapter}", JJChapter.class));
        chapterEditInput.setConverter(new JJChapterConverter());
        chapterEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(chapterEditInput);
        
        Message chapterEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        chapterEditInputMessage.setId("chapterEditInputMessage");
        chapterEditInputMessage.setFor("chapterEditInput");
        chapterEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(chapterEditInputMessage);
        
        OutputLabel versioningEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        versioningEditOutput.setFor("versioningEditInput");
        versioningEditOutput.setId("versioningEditOutput");
        versioningEditOutput.setValue("Versioning:");
        htmlPanelGrid.getChildren().add(versioningEditOutput);
        
        AutoComplete versioningEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        versioningEditInput.setId("versioningEditInput");
        versioningEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.versioning}", JJVersion.class));
        versioningEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeVersioning}", List.class, new Class[] { String.class }));
        versioningEditInput.setDropdown(true);
        versioningEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "versioning", String.class));
        versioningEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{versioning.name} #{versioning.description} #{versioning.creationDate} #{versioning.updatedDate}", String.class));
        versioningEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{versioning}", JJVersion.class));
        versioningEditInput.setConverter(new JJVersionConverter());
        versioningEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(versioningEditInput);
        
        Message versioningEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        versioningEditInputMessage.setId("versioningEditInputMessage");
        versioningEditInputMessage.setFor("versioningEditInput");
        versioningEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(versioningEditInputMessage);
        
        OutputLabel productEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        productEditOutput.setFor("productEditInput");
        productEditOutput.setId("productEditOutput");
        productEditOutput.setValue("Product:");
        htmlPanelGrid.getChildren().add(productEditOutput);
        
        AutoComplete productEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        productEditInput.setId("productEditInput");
        productEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.product}", JJProduct.class));
        productEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeProduct}", List.class, new Class[] { String.class }));
        productEditInput.setDropdown(true);
        productEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "product", String.class));
        productEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{product.name} #{product.description} #{product.creationDate} #{product.updatedDate}", String.class));
        productEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{product}", JJProduct.class));
        productEditInput.setConverter(new JJProductConverter());
        productEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(productEditInput);
        
        Message productEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productEditInputMessage.setId("productEditInputMessage");
        productEditInputMessage.setFor("productEditInput");
        productEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productEditInputMessage);
        
        OutputLabel categoryEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        categoryEditOutput.setFor("categoryEditInput");
        categoryEditOutput.setId("categoryEditOutput");
        categoryEditOutput.setValue("Category:");
        htmlPanelGrid.getChildren().add(categoryEditOutput);
        
        AutoComplete categoryEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoryEditInput.setId("categoryEditInput");
        categoryEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.category}", JJCategory.class));
        categoryEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeCategory}", List.class, new Class[] { String.class }));
        categoryEditInput.setDropdown(true);
        categoryEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "category", String.class));
        categoryEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{category.name} #{category.description} #{category.creationDate} #{category.updatedDate}", String.class));
        categoryEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{category}", JJCategory.class));
        categoryEditInput.setConverter(new JJCategoryConverter());
        categoryEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoryEditInput);
        
        Message categoryEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoryEditInputMessage.setId("categoryEditInputMessage");
        categoryEditInputMessage.setFor("categoryEditInput");
        categoryEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoryEditInputMessage);
        
        OutputLabel criticityEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        criticityEditOutput.setFor("criticityEditInput");
        criticityEditOutput.setId("criticityEditOutput");
        criticityEditOutput.setValue("Criticity:");
        htmlPanelGrid.getChildren().add(criticityEditOutput);
        
        AutoComplete criticityEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        criticityEditInput.setId("criticityEditInput");
        criticityEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.criticity}", JJCriticity.class));
        criticityEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeCriticity}", List.class, new Class[] { String.class }));
        criticityEditInput.setDropdown(true);
        criticityEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "criticity", String.class));
        criticityEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{criticity.name} #{criticity.description} #{criticity.creationDate} #{criticity.updatedDate}", String.class));
        criticityEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{criticity}", JJCriticity.class));
        criticityEditInput.setConverter(new JJCriticityConverter());
        criticityEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(criticityEditInput);
        
        Message criticityEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        criticityEditInputMessage.setId("criticityEditInputMessage");
        criticityEditInputMessage.setFor("criticityEditInput");
        criticityEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(criticityEditInputMessage);
        
        OutputLabel importanceEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        importanceEditOutput.setFor("importanceEditInput");
        importanceEditOutput.setId("importanceEditOutput");
        importanceEditOutput.setValue("Importance:");
        htmlPanelGrid.getChildren().add(importanceEditOutput);
        
        AutoComplete importanceEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        importanceEditInput.setId("importanceEditInput");
        importanceEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.importance}", JJImportance.class));
        importanceEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeImportance}", List.class, new Class[] { String.class }));
        importanceEditInput.setDropdown(true);
        importanceEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "importance", String.class));
        importanceEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{importance.name} #{importance.description} #{importance.creationDate} #{importance.updatedDate}", String.class));
        importanceEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{importance}", JJImportance.class));
        importanceEditInput.setConverter(new JJImportanceConverter());
        importanceEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(importanceEditInput);
        
        Message importanceEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        importanceEditInputMessage.setId("importanceEditInputMessage");
        importanceEditInputMessage.setFor("importanceEditInput");
        importanceEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(importanceEditInputMessage);
        
        OutputLabel statusEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusEditOutput.setFor("statusEditInput");
        statusEditOutput.setId("statusEditOutput");
        statusEditOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusEditOutput);
        
        AutoComplete statusEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        statusEditInput.setId("statusEditInput");
        statusEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.status}", JJStatus.class));
        statusEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeStatus}", List.class, new Class[] { String.class }));
        statusEditInput.setDropdown(true);
        statusEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "status", String.class));
        statusEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{status.name} #{status.description} #{status.creationDate} #{status.updatedDate}", String.class));
        statusEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{status}", JJStatus.class));
        statusEditInput.setConverter(new JJStatusConverter());
        statusEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(statusEditInput);
        
        Message statusEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusEditInputMessage.setId("statusEditInputMessage");
        statusEditInputMessage.setFor("statusEditInput");
        statusEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusEditInputMessage);
        
        OutputLabel sprintEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        sprintEditOutput.setFor("sprintEditInput");
        sprintEditOutput.setId("sprintEditOutput");
        sprintEditOutput.setValue("Sprint:");
        htmlPanelGrid.getChildren().add(sprintEditOutput);
        
        AutoComplete sprintEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        sprintEditInput.setId("sprintEditInput");
        sprintEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.sprint}", JJSprint.class));
        sprintEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeSprint}", List.class, new Class[] { String.class }));
        sprintEditInput.setDropdown(true);
        sprintEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "sprint", String.class));
        sprintEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{sprint.name} #{sprint.description} #{sprint.creationDate} #{sprint.updatedDate}", String.class));
        sprintEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{sprint}", JJSprint.class));
        sprintEditInput.setConverter(new JJSprintConverter());
        sprintEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(sprintEditInput);
        
        Message sprintEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        sprintEditInputMessage.setId("sprintEditInputMessage");
        sprintEditInputMessage.setFor("sprintEditInput");
        sprintEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(sprintEditInputMessage);
        
        OutputLabel impactEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        impactEditOutput.setFor("impactEditInput");
        impactEditOutput.setId("impactEditOutput");
        impactEditOutput.setValue("Impact:");
        htmlPanelGrid.getChildren().add(impactEditOutput);
        
        InputTextarea impactEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        impactEditInput.setId("impactEditInput");
        impactEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.impact}", String.class));
        LengthValidator impactEditInputValidator = new LengthValidator();
        impactEditInputValidator.setMaximum(100);
        impactEditInput.addValidator(impactEditInputValidator);
        impactEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(impactEditInput);
        
        Message impactEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        impactEditInputMessage.setId("impactEditInputMessage");
        impactEditInputMessage.setFor("impactEditInput");
        impactEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(impactEditInputMessage);
        
        OutputLabel relationEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        relationEditOutput.setFor("relationEditInput");
        relationEditOutput.setId("relationEditOutput");
        relationEditOutput.setValue("Relation:");
        htmlPanelGrid.getChildren().add(relationEditOutput);
        
        AutoComplete relationEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        relationEditInput.setId("relationEditInput");
        relationEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.relation}", JJRelationship.class));
        relationEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeRelation}", List.class, new Class[] { String.class }));
        relationEditInput.setDropdown(true);
        relationEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(relationEditInput);
        
        Message relationEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        relationEditInputMessage.setId("relationEditInputMessage");
        relationEditInputMessage.setFor("relationEditInput");
        relationEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(relationEditInputMessage);
        
        HtmlOutputText bugsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugsEditOutput.setId("bugsEditOutput");
        bugsEditOutput.setValue("Bugs:");
        htmlPanelGrid.getChildren().add(bugsEditOutput);
        
        HtmlOutputText bugsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugsEditInput.setId("bugsEditInput");
        bugsEditInput.setValue("This relationship is managed from the JJBug side");
        htmlPanelGrid.getChildren().add(bugsEditInput);
        
        Message bugsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bugsEditInputMessage.setId("bugsEditInputMessage");
        bugsEditInputMessage.setFor("bugsEditInput");
        bugsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bugsEditInputMessage);
        
        HtmlOutputText tasksEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksEditOutput.setId("tasksEditOutput");
        tasksEditOutput.setValue("Tasks:");
        htmlPanelGrid.getChildren().add(tasksEditOutput);
        
        HtmlOutputText tasksEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksEditInput.setId("tasksEditInput");
        tasksEditInput.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(tasksEditInput);
        
        Message tasksEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tasksEditInputMessage.setId("tasksEditInputMessage");
        tasksEditInputMessage.setFor("tasksEditInput");
        tasksEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tasksEditInputMessage);
        
        OutputLabel assignedToEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        assignedToEditOutput.setFor("assignedToEditInput");
        assignedToEditOutput.setId("assignedToEditOutput");
        assignedToEditOutput.setValue("Assigned To:");
        htmlPanelGrid.getChildren().add(assignedToEditOutput);
        
        AutoComplete assignedToEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        assignedToEditInput.setId("assignedToEditInput");
        assignedToEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.assignedTo}", JJContact.class));
        assignedToEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeAssignedTo}", List.class, new Class[] { String.class }));
        assignedToEditInput.setDropdown(true);
        assignedToEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "assignedTo", String.class));
        assignedToEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{assignedTo.name} #{assignedTo.description} #{assignedTo.creationDate} #{assignedTo.updatedDate}", String.class));
        assignedToEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{assignedTo}", JJContact.class));
        assignedToEditInput.setConverter(new JJContactConverter());
        assignedToEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(assignedToEditInput);
        
        Message assignedToEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        assignedToEditInputMessage.setId("assignedToEditInputMessage");
        assignedToEditInputMessage.setFor("assignedToEditInput");
        assignedToEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(assignedToEditInputMessage);
        
        HtmlOutputText messagesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesEditOutput.setId("messagesEditOutput");
        messagesEditOutput.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesEditOutput);
        
        HtmlOutputText messagesEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesEditInput.setId("messagesEditInput");
        messagesEditInput.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesEditInput);
        
        Message messagesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messagesEditInputMessage.setId("messagesEditInputMessage");
        messagesEditInputMessage.setFor("messagesEditInput");
        messagesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messagesEditInputMessage);
        
        OutputLabel noteEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        noteEditOutput.setFor("noteEditInput");
        noteEditOutput.setId("noteEditOutput");
        noteEditOutput.setValue("Note:");
        htmlPanelGrid.getChildren().add(noteEditOutput);
        
        InputTextarea noteEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        noteEditInput.setId("noteEditInput");
        noteEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.note}", String.class));
        noteEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(noteEditInput);
        
        Message noteEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        noteEditInputMessage.setId("noteEditInputMessage");
        noteEditInputMessage.setFor("noteEditInput");
        noteEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(noteEditInputMessage);
        
        HtmlOutputText requirementLinkDownEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementLinkDownEditOutput.setId("requirementLinkDownEditOutput");
        requirementLinkDownEditOutput.setValue("Requirement Link Down:");
        htmlPanelGrid.getChildren().add(requirementLinkDownEditOutput);
        
        HtmlOutputText requirementLinkDownEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementLinkDownEditInput.setId("requirementLinkDownEditInput");
        requirementLinkDownEditInput.setValue("This relationship is managed from the JJRequirement side");
        htmlPanelGrid.getChildren().add(requirementLinkDownEditInput);
        
        Message requirementLinkDownEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementLinkDownEditInputMessage.setId("requirementLinkDownEditInputMessage");
        requirementLinkDownEditInputMessage.setFor("requirementLinkDownEditInput");
        requirementLinkDownEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementLinkDownEditInputMessage);
        
        OutputLabel requirementLinkUpEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        requirementLinkUpEditOutput.setFor("requirementLinkUpEditInput");
        requirementLinkUpEditOutput.setId("requirementLinkUpEditOutput");
        requirementLinkUpEditOutput.setValue("Requirement Link Up:");
        htmlPanelGrid.getChildren().add(requirementLinkUpEditOutput);
        
        SelectManyMenu requirementLinkUpEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        requirementLinkUpEditInput.setId("requirementLinkUpEditInput");
        requirementLinkUpEditInput.setConverter(new JJRequirementConverter());
        requirementLinkUpEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.selectedRequirementLinkUp}", List.class));
        UISelectItems requirementLinkUpEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        requirementLinkUpEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.allJJRequirements}", List.class));
        requirementLinkUpEditInput.setRequired(false);
        requirementLinkUpEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJRequirement", String.class));
        requirementLinkUpEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJRequirement}", String.class));
        requirementLinkUpEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJRequirement}", JJRequirement.class));
        requirementLinkUpEditInput.getChildren().add(requirementLinkUpEditInputItems);
        htmlPanelGrid.getChildren().add(requirementLinkUpEditInput);
        
        Message requirementLinkUpEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementLinkUpEditInputMessage.setId("requirementLinkUpEditInputMessage");
        requirementLinkUpEditInputMessage.setFor("requirementLinkUpEditInput");
        requirementLinkUpEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementLinkUpEditInputMessage);
        
        HtmlOutputText testcasesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        testcasesEditOutput.setId("testcasesEditOutput");
        testcasesEditOutput.setValue("Testcases:");
        htmlPanelGrid.getChildren().add(testcasesEditOutput);
        
        HtmlOutputText testcasesEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        testcasesEditInput.setId("testcasesEditInput");
        testcasesEditInput.setValue("This relationship is managed from the JJTestcase side");
        htmlPanelGrid.getChildren().add(testcasesEditInput);
        
        Message testcasesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        testcasesEditInputMessage.setId("testcasesEditInputMessage");
        testcasesEditInputMessage.setFor("testcasesEditInput");
        testcasesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(testcasesEditInputMessage);
        
        OutputLabel operationEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        operationEditOutput.setFor("operationEditInput");
        operationEditOutput.setId("operationEditOutput");
        operationEditOutput.setValue("Operation:");
        htmlPanelGrid.getChildren().add(operationEditOutput);
        
        SelectBooleanCheckbox operationEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        operationEditInput.setId("operationEditInput");
        operationEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.operation}", Boolean.class));
        operationEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(operationEditInput);
        
        Message operationEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        operationEditInputMessage.setId("operationEditInputMessage");
        operationEditInputMessage.setFor("operationEditInput");
        operationEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(operationEditInputMessage);
        
        OutputLabel completionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        completionEditOutput.setFor("completionEditInput");
        completionEditOutput.setId("completionEditOutput");
        completionEditOutput.setValue("Completion:");
        htmlPanelGrid.getChildren().add(completionEditOutput);
        
        SelectBooleanCheckbox completionEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        completionEditInput.setId("completionEditInput");
        completionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.completion}", Boolean.class));
        completionEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(completionEditInput);
        
        Message completionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        completionEditInputMessage.setId("completionEditInputMessage");
        completionEditInputMessage.setFor("completionEditInput");
        completionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(completionEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJRequirementBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        InputTextarea nameValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.name}", String.class));
        nameValue.setReadonly(true);
        nameValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText descriptionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionLabel.setId("descriptionLabel");
        descriptionLabel.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionLabel);
        
        InputTextarea descriptionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionValue.setId("descriptionValue");
        descriptionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.description}", String.class));
        descriptionValue.setReadonly(true);
        descriptionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descriptionValue);
        
        HtmlOutputText creationDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateLabel.setId("creationDateLabel");
        creationDateLabel.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateLabel);
        
        HtmlOutputText creationDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.creationDate}", Date.class));
        DateTimeConverter creationDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationDateValueConverter.setPattern("dd/MM/yyyy");
        creationDateValue.setConverter(creationDateValueConverter);
        htmlPanelGrid.getChildren().add(creationDateValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.createdBy}", JJContact.class));
        createdByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        HtmlOutputText updatedDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateLabel.setId("updatedDateLabel");
        updatedDateLabel.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateLabel);
        
        HtmlOutputText updatedDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.updatedDate}", Date.class));
        DateTimeConverter updatedDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updatedDateValueConverter.setPattern("dd/MM/yyyy");
        updatedDateValue.setConverter(updatedDateValueConverter);
        htmlPanelGrid.getChildren().add(updatedDateValue);
        
        HtmlOutputText updatedByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByLabel.setId("updatedByLabel");
        updatedByLabel.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByLabel);
        
        HtmlOutputText updatedByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.updatedBy}", JJContact.class));
        updatedByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(updatedByValue);
        
        HtmlOutputText enabledLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledLabel.setId("enabledLabel");
        enabledLabel.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledLabel);
        
        HtmlOutputText enabledValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.enabled}", String.class));
        htmlPanelGrid.getChildren().add(enabledValue);
        
        HtmlOutputText orderingLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        orderingLabel.setId("orderingLabel");
        orderingLabel.setValue("Ordering:");
        htmlPanelGrid.getChildren().add(orderingLabel);
        
        HtmlOutputText orderingValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        orderingValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.ordering}", String.class));
        htmlPanelGrid.getChildren().add(orderingValue);
        
        HtmlOutputText numeroLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numeroLabel.setId("numeroLabel");
        numeroLabel.setValue("Numero:");
        htmlPanelGrid.getChildren().add(numeroLabel);
        
        HtmlOutputText numeroValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numeroValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.numero}", String.class));
        htmlPanelGrid.getChildren().add(numeroValue);
        
        HtmlOutputText projectLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectLabel.setId("projectLabel");
        projectLabel.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectLabel);
        
        HtmlOutputText projectValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.project}", JJProject.class));
        projectValue.setConverter(new JJProjectConverter());
        htmlPanelGrid.getChildren().add(projectValue);
        
        HtmlOutputText startDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        startDateLabel.setId("startDateLabel");
        startDateLabel.setValue("Start Date:");
        htmlPanelGrid.getChildren().add(startDateLabel);
        
        HtmlOutputText startDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        startDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.startDate}", Date.class));
        DateTimeConverter startDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        startDateValueConverter.setPattern("dd/MM/yyyy");
        startDateValue.setConverter(startDateValueConverter);
        htmlPanelGrid.getChildren().add(startDateValue);
        
        HtmlOutputText endDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endDateLabel.setId("endDateLabel");
        endDateLabel.setValue("End Date:");
        htmlPanelGrid.getChildren().add(endDateLabel);
        
        HtmlOutputText endDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.endDate}", Date.class));
        DateTimeConverter endDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        endDateValueConverter.setPattern("dd/MM/yyyy");
        endDateValue.setConverter(endDateValueConverter);
        htmlPanelGrid.getChildren().add(endDateValue);
        
        HtmlOutputText chapterLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        chapterLabel.setId("chapterLabel");
        chapterLabel.setValue("Chapter:");
        htmlPanelGrid.getChildren().add(chapterLabel);
        
        HtmlOutputText chapterValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        chapterValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.chapter}", JJChapter.class));
        chapterValue.setConverter(new JJChapterConverter());
        htmlPanelGrid.getChildren().add(chapterValue);
        
        HtmlOutputText versioningLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        versioningLabel.setId("versioningLabel");
        versioningLabel.setValue("Versioning:");
        htmlPanelGrid.getChildren().add(versioningLabel);
        
        HtmlOutputText versioningValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        versioningValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.versioning}", JJVersion.class));
        versioningValue.setConverter(new JJVersionConverter());
        htmlPanelGrid.getChildren().add(versioningValue);
        
        HtmlOutputText productLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productLabel.setId("productLabel");
        productLabel.setValue("Product:");
        htmlPanelGrid.getChildren().add(productLabel);
        
        HtmlOutputText productValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.product}", JJProduct.class));
        productValue.setConverter(new JJProductConverter());
        htmlPanelGrid.getChildren().add(productValue);
        
        HtmlOutputText categoryLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoryLabel.setId("categoryLabel");
        categoryLabel.setValue("Category:");
        htmlPanelGrid.getChildren().add(categoryLabel);
        
        HtmlOutputText categoryValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoryValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.category}", JJCategory.class));
        categoryValue.setConverter(new JJCategoryConverter());
        htmlPanelGrid.getChildren().add(categoryValue);
        
        HtmlOutputText criticityLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        criticityLabel.setId("criticityLabel");
        criticityLabel.setValue("Criticity:");
        htmlPanelGrid.getChildren().add(criticityLabel);
        
        HtmlOutputText criticityValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        criticityValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.criticity}", JJCriticity.class));
        criticityValue.setConverter(new JJCriticityConverter());
        htmlPanelGrid.getChildren().add(criticityValue);
        
        HtmlOutputText importanceLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        importanceLabel.setId("importanceLabel");
        importanceLabel.setValue("Importance:");
        htmlPanelGrid.getChildren().add(importanceLabel);
        
        HtmlOutputText importanceValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        importanceValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.importance}", JJImportance.class));
        importanceValue.setConverter(new JJImportanceConverter());
        htmlPanelGrid.getChildren().add(importanceValue);
        
        HtmlOutputText statusLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusLabel.setId("statusLabel");
        statusLabel.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusLabel);
        
        HtmlOutputText statusValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.status}", JJStatus.class));
        statusValue.setConverter(new JJStatusConverter());
        htmlPanelGrid.getChildren().add(statusValue);
        
        HtmlOutputText sprintLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sprintLabel.setId("sprintLabel");
        sprintLabel.setValue("Sprint:");
        htmlPanelGrid.getChildren().add(sprintLabel);
        
        HtmlOutputText sprintValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sprintValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.sprint}", JJSprint.class));
        sprintValue.setConverter(new JJSprintConverter());
        htmlPanelGrid.getChildren().add(sprintValue);
        
        HtmlOutputText impactLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        impactLabel.setId("impactLabel");
        impactLabel.setValue("Impact:");
        htmlPanelGrid.getChildren().add(impactLabel);
        
        InputTextarea impactValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        impactValue.setId("impactValue");
        impactValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.impact}", String.class));
        impactValue.setReadonly(true);
        impactValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(impactValue);
        
        HtmlOutputText relationLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        relationLabel.setId("relationLabel");
        relationLabel.setValue("Relation:");
        htmlPanelGrid.getChildren().add(relationLabel);
        
        HtmlOutputText relationValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        relationValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.relation}", String.class));
        htmlPanelGrid.getChildren().add(relationValue);
        
        HtmlOutputText bugsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugsLabel.setId("bugsLabel");
        bugsLabel.setValue("Bugs:");
        htmlPanelGrid.getChildren().add(bugsLabel);
        
        HtmlOutputText bugsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugsValue.setId("bugsValue");
        bugsValue.setValue("This relationship is managed from the JJBug side");
        htmlPanelGrid.getChildren().add(bugsValue);
        
        HtmlOutputText tasksLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksLabel.setId("tasksLabel");
        tasksLabel.setValue("Tasks:");
        htmlPanelGrid.getChildren().add(tasksLabel);
        
        HtmlOutputText tasksValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksValue.setId("tasksValue");
        tasksValue.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(tasksValue);
        
        HtmlOutputText assignedToLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedToLabel.setId("assignedToLabel");
        assignedToLabel.setValue("Assigned To:");
        htmlPanelGrid.getChildren().add(assignedToLabel);
        
        HtmlOutputText assignedToValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedToValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.assignedTo}", JJContact.class));
        assignedToValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(assignedToValue);
        
        HtmlOutputText messagesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesLabel.setId("messagesLabel");
        messagesLabel.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesLabel);
        
        HtmlOutputText messagesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesValue.setId("messagesValue");
        messagesValue.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesValue);
        
        HtmlOutputText noteLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        noteLabel.setId("noteLabel");
        noteLabel.setValue("Note:");
        htmlPanelGrid.getChildren().add(noteLabel);
        
        InputTextarea noteValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        noteValue.setId("noteValue");
        noteValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.note}", String.class));
        noteValue.setReadonly(true);
        noteValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(noteValue);
        
        HtmlOutputText requirementLinkDownLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementLinkDownLabel.setId("requirementLinkDownLabel");
        requirementLinkDownLabel.setValue("Requirement Link Down:");
        htmlPanelGrid.getChildren().add(requirementLinkDownLabel);
        
        HtmlOutputText requirementLinkDownValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementLinkDownValue.setId("requirementLinkDownValue");
        requirementLinkDownValue.setValue("This relationship is managed from the JJRequirement side");
        htmlPanelGrid.getChildren().add(requirementLinkDownValue);
        
        HtmlOutputText requirementLinkUpLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementLinkUpLabel.setId("requirementLinkUpLabel");
        requirementLinkUpLabel.setValue("Requirement Link Up:");
        htmlPanelGrid.getChildren().add(requirementLinkUpLabel);
        
        SelectManyMenu requirementLinkUpValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        requirementLinkUpValue.setId("requirementLinkUpValue");
        requirementLinkUpValue.setConverter(new JJRequirementConverter());
        requirementLinkUpValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.selectedRequirementLinkUp}", List.class));
        UISelectItems requirementLinkUpValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        requirementLinkUpValue.setReadonly(true);
        requirementLinkUpValue.setDisabled(true);
        requirementLinkUpValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.requirementLinkUp}", Set.class));
        requirementLinkUpValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJRequirement", String.class));
        requirementLinkUpValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJRequirement}", String.class));
        requirementLinkUpValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJRequirement}", JJRequirement.class));
        requirementLinkUpValue.getChildren().add(requirementLinkUpValueItems);
        htmlPanelGrid.getChildren().add(requirementLinkUpValue);
        
        HtmlOutputText testcasesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        testcasesLabel.setId("testcasesLabel");
        testcasesLabel.setValue("Testcases:");
        htmlPanelGrid.getChildren().add(testcasesLabel);
        
        HtmlOutputText testcasesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        testcasesValue.setId("testcasesValue");
        testcasesValue.setValue("This relationship is managed from the JJTestcase side");
        htmlPanelGrid.getChildren().add(testcasesValue);
        
        HtmlOutputText operationLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        operationLabel.setId("operationLabel");
        operationLabel.setValue("Operation:");
        htmlPanelGrid.getChildren().add(operationLabel);
        
        HtmlOutputText operationValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        operationValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.operation}", String.class));
        htmlPanelGrid.getChildren().add(operationValue);
        
        HtmlOutputText completionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        completionLabel.setId("completionLabel");
        completionLabel.setValue("Completion:");
        htmlPanelGrid.getChildren().add(completionLabel);
        
        HtmlOutputText completionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        completionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.completion}", String.class));
        htmlPanelGrid.getChildren().add(completionValue);
        
        return htmlPanelGrid;
    }
    
    public JJRequirement JJRequirementBean.getJJRequirement_() {
        if (JJRequirement_ == null) {
            JJRequirement_ = new JJRequirement();
        }
        return JJRequirement_;
    }
    
    public void JJRequirementBean.setJJRequirement_(JJRequirement JJRequirement_) {
        this.JJRequirement_ = JJRequirement_;
    }
    
    public List<JJContact> JJRequirementBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJRequirementBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJProject> JJRequirementBean.completeProject(String query) {
        List<JJProject> suggestions = new ArrayList<JJProject>();
        for (JJProject jJProject : jJProjectService.findAllJJProjects()) {
            String jJProjectStr = String.valueOf(jJProject.getName() +  " "  + jJProject.getDescription() +  " "  + jJProject.getCreationDate() +  " "  + jJProject.getUpdatedDate());
            if (jJProjectStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJProject);
            }
        }
        return suggestions;
    }
    
    public List<JJChapter> JJRequirementBean.completeChapter(String query) {
        List<JJChapter> suggestions = new ArrayList<JJChapter>();
        for (JJChapter jJChapter : jJChapterService.findAllJJChapters()) {
            String jJChapterStr = String.valueOf(jJChapter.getName() +  " "  + jJChapter.getDescription() +  " "  + jJChapter.getCreationDate() +  " "  + jJChapter.getUpdatedDate());
            if (jJChapterStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJChapter);
            }
        }
        return suggestions;
    }
    
    public List<JJVersion> JJRequirementBean.completeVersioning(String query) {
        List<JJVersion> suggestions = new ArrayList<JJVersion>();
        for (JJVersion jJVersion : jJVersionService.findAllJJVersions()) {
            String jJVersionStr = String.valueOf(jJVersion.getName() +  " "  + jJVersion.getDescription() +  " "  + jJVersion.getCreationDate() +  " "  + jJVersion.getUpdatedDate());
            if (jJVersionStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJVersion);
            }
        }
        return suggestions;
    }
    
    public List<JJProduct> JJRequirementBean.completeProduct(String query) {
        List<JJProduct> suggestions = new ArrayList<JJProduct>();
        for (JJProduct jJProduct : jJProductService.findAllJJProducts()) {
            String jJProductStr = String.valueOf(jJProduct.getName() +  " "  + jJProduct.getDescription() +  " "  + jJProduct.getCreationDate() +  " "  + jJProduct.getUpdatedDate());
            if (jJProductStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJProduct);
            }
        }
        return suggestions;
    }
    
    public List<JJCategory> JJRequirementBean.completeCategory(String query) {
        List<JJCategory> suggestions = new ArrayList<JJCategory>();
        for (JJCategory jJCategory : jJCategoryService.findAllJJCategorys()) {
            String jJCategoryStr = String.valueOf(jJCategory.getName() +  " "  + jJCategory.getDescription() +  " "  + jJCategory.getCreationDate() +  " "  + jJCategory.getUpdatedDate());
            if (jJCategoryStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJCategory);
            }
        }
        return suggestions;
    }
    
    public List<JJCriticity> JJRequirementBean.completeCriticity(String query) {
        List<JJCriticity> suggestions = new ArrayList<JJCriticity>();
        for (JJCriticity jJCriticity : jJCriticityService.findAllJJCriticitys()) {
            String jJCriticityStr = String.valueOf(jJCriticity.getName() +  " "  + jJCriticity.getDescription() +  " "  + jJCriticity.getCreationDate() +  " "  + jJCriticity.getUpdatedDate());
            if (jJCriticityStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJCriticity);
            }
        }
        return suggestions;
    }
    
    public List<JJImportance> JJRequirementBean.completeImportance(String query) {
        List<JJImportance> suggestions = new ArrayList<JJImportance>();
        for (JJImportance jJImportance : jJImportanceService.findAllJJImportances()) {
            String jJImportanceStr = String.valueOf(jJImportance.getName() +  " "  + jJImportance.getDescription() +  " "  + jJImportance.getCreationDate() +  " "  + jJImportance.getUpdatedDate());
            if (jJImportanceStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJImportance);
            }
        }
        return suggestions;
    }
    
    public List<JJStatus> JJRequirementBean.completeStatus(String query) {
        List<JJStatus> suggestions = new ArrayList<JJStatus>();
        for (JJStatus jJStatus : jJStatusService.findAllJJStatuses()) {
            String jJStatusStr = String.valueOf(jJStatus.getName() +  " "  + jJStatus.getDescription() +  " "  + jJStatus.getCreationDate() +  " "  + jJStatus.getUpdatedDate());
            if (jJStatusStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJStatus);
            }
        }
        return suggestions;
    }
    
    public List<JJSprint> JJRequirementBean.completeSprint(String query) {
        List<JJSprint> suggestions = new ArrayList<JJSprint>();
        for (JJSprint jJSprint : jJSprintService.findAllJJSprints()) {
            String jJSprintStr = String.valueOf(jJSprint.getName() +  " "  + jJSprint.getDescription() +  " "  + jJSprint.getCreationDate() +  " "  + jJSprint.getUpdatedDate());
            if (jJSprintStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJSprint);
            }
        }
        return suggestions;
    }
    
    public List<JJRelationship> JJRequirementBean.completeRelation(String query) {
        List<JJRelationship> suggestions = new ArrayList<JJRelationship>();
        for (JJRelationship jJRelationship : JJRelationship.values()) {
            if (jJRelationship.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJRelationship);
            }
        }
        return suggestions;
    }
    
    public List<JJBug> JJRequirementBean.getSelectedBugs() {
        return selectedBugs;
    }
    
    public void JJRequirementBean.setSelectedBugs(List<JJBug> selectedBugs) {
        if (selectedBugs != null) {
            JJRequirement_.setBugs(new HashSet<JJBug>(selectedBugs));
        }
        this.selectedBugs = selectedBugs;
    }
    
    public List<JJTask> JJRequirementBean.getSelectedTasks() {
        return selectedTasks;
    }
    
    public void JJRequirementBean.setSelectedTasks(List<JJTask> selectedTasks) {
        if (selectedTasks != null) {
            JJRequirement_.setTasks(new HashSet<JJTask>(selectedTasks));
        }
        this.selectedTasks = selectedTasks;
    }
    
    public List<JJContact> JJRequirementBean.completeAssignedTo(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJMessage> JJRequirementBean.getSelectedMessages() {
        return selectedMessages;
    }
    
    public void JJRequirementBean.setSelectedMessages(List<JJMessage> selectedMessages) {
        if (selectedMessages != null) {
            JJRequirement_.setMessages(new HashSet<JJMessage>(selectedMessages));
        }
        this.selectedMessages = selectedMessages;
    }
    
    public List<JJRequirement> JJRequirementBean.getSelectedRequirementLinkDown() {
        return selectedRequirementLinkDown;
    }
    
    public void JJRequirementBean.setSelectedRequirementLinkDown(List<JJRequirement> selectedRequirementLinkDown) {
        if (selectedRequirementLinkDown != null) {
            JJRequirement_.setRequirementLinkDown(new HashSet<JJRequirement>(selectedRequirementLinkDown));
        }
        this.selectedRequirementLinkDown = selectedRequirementLinkDown;
    }
    
    public List<JJRequirement> JJRequirementBean.getSelectedRequirementLinkUp() {
        return selectedRequirementLinkUp;
    }
    
    public void JJRequirementBean.setSelectedRequirementLinkUp(List<JJRequirement> selectedRequirementLinkUp) {
        if (selectedRequirementLinkUp != null) {
            JJRequirement_.setRequirementLinkUp(new HashSet<JJRequirement>(selectedRequirementLinkUp));
        }
        this.selectedRequirementLinkUp = selectedRequirementLinkUp;
    }
    
    public List<JJTestcase> JJRequirementBean.getSelectedTestcases() {
        return selectedTestcases;
    }
    
    public void JJRequirementBean.setSelectedTestcases(List<JJTestcase> selectedTestcases) {
        if (selectedTestcases != null) {
            JJRequirement_.setTestcases(new HashSet<JJTestcase>(selectedTestcases));
        }
        this.selectedTestcases = selectedTestcases;
    }
    
    public String JJRequirementBean.onEdit() {
        if (JJRequirement_ != null && JJRequirement_.getBugs() != null) {
            selectedBugs = new ArrayList<JJBug>(JJRequirement_.getBugs());
        }
        if (JJRequirement_ != null && JJRequirement_.getTasks() != null) {
            selectedTasks = new ArrayList<JJTask>(JJRequirement_.getTasks());
        }
        if (JJRequirement_ != null && JJRequirement_.getMessages() != null) {
            selectedMessages = new ArrayList<JJMessage>(JJRequirement_.getMessages());
        }
        if (JJRequirement_ != null && JJRequirement_.getRequirementLinkDown() != null) {
            selectedRequirementLinkDown = new ArrayList<JJRequirement>(JJRequirement_.getRequirementLinkDown());
        }
        if (JJRequirement_ != null && JJRequirement_.getRequirementLinkUp() != null) {
            selectedRequirementLinkUp = new ArrayList<JJRequirement>(JJRequirement_.getRequirementLinkUp());
        }
        if (JJRequirement_ != null && JJRequirement_.getTestcases() != null) {
            selectedTestcases = new ArrayList<JJTestcase>(JJRequirement_.getTestcases());
        }
        return null;
    }
    
    public boolean JJRequirementBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJRequirementBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJRequirementBean.displayList() {
        createDialogVisible = false;
        findAllJJRequirements();
        return "JJRequirement_";
    }
    
    public String JJRequirementBean.displayCreateDialog() {
        JJRequirement_ = new JJRequirement();
        createDialogVisible = true;
        return "JJRequirement_";
    }
    
    public String JJRequirementBean.persist() {
        String message = "";
        if (JJRequirement_.getId() != null) {
            jJRequirementService.updateJJRequirement(JJRequirement_);
            message = "message_successfully_updated";
        } else {
            jJRequirementService.saveJJRequirement(JJRequirement_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJRequirement");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJRequirements();
    }
    
    public String JJRequirementBean.delete() {
        jJRequirementService.deleteJJRequirement(JJRequirement_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJRequirement");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJRequirements();
    }
    
    public void JJRequirementBean.reset() {
        JJRequirement_ = null;
        selectedBugs = null;
        selectedTasks = null;
        selectedMessages = null;
        selectedRequirementLinkDown = null;
        selectedRequirementLinkUp = null;
        selectedTestcases = null;
        createDialogVisible = false;
    }
    
    public void JJRequirementBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

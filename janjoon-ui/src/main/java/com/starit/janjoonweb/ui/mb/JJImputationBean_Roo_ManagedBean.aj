// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;

import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

import com.starit.janjoonweb.domain.JJContact;
import com.starit.janjoonweb.domain.JJContactService;
import com.starit.janjoonweb.domain.JJImputation;
import com.starit.janjoonweb.domain.JJImputationService;
import com.starit.janjoonweb.domain.JJTask;
import com.starit.janjoonweb.domain.JJTaskService;
import com.starit.janjoonweb.ui.mb.converter.JJContactConverter;
import com.starit.janjoonweb.ui.mb.converter.JJTaskConverter;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;

privileged aspect JJImputationBean_Roo_ManagedBean {
    
    declare @type: JJImputationBean: @ManagedBean(name = "jJImputationBean");
    
    declare @type: JJImputationBean: @SessionScoped;
    
    @Autowired
    JJImputationService JJImputationBean.jJImputationService;
    
    @Autowired
    JJContactService JJImputationBean.jJContactService;
    
    @Autowired
    JJTaskService JJImputationBean.jJTaskService;
    
    private String JJImputationBean.name = "JJImputations";
    
    private JJImputation JJImputationBean.JJImputation_;
    
    private List<JJImputation> JJImputationBean.allJJImputations;
    
    private boolean JJImputationBean.dataVisible = false;
    
    private List<String> JJImputationBean.columns;
    
    private HtmlPanelGrid JJImputationBean.createPanelGrid;
    
    private HtmlPanelGrid JJImputationBean.editPanelGrid;
    
    private HtmlPanelGrid JJImputationBean.viewPanelGrid;
    
    private boolean JJImputationBean.createDialogVisible = false;
    
    @PostConstruct
    public void JJImputationBean.init() {
        columns = new ArrayList<String>();
        columns.add("imputationDate");
        columns.add("startAction");
        columns.add("endAction");
        columns.add("workloadRemaining");
    }
    
    public String JJImputationBean.getName() {
        return name;
    }
    
    public List<String> JJImputationBean.getColumns() {
        return columns;
    }
    
    public List<JJImputation> JJImputationBean.getAllJJImputations() {
        return allJJImputations;
    }
    
    public void JJImputationBean.setAllJJImputations(List<JJImputation> allJJImputations) {
        this.allJJImputations = allJJImputations;
    }
    
    public String JJImputationBean.findAllJJImputations() {
        allJJImputations = jJImputationService.findAllJJImputations();
        dataVisible = !allJJImputations.isEmpty();
        return null;
    }
    
    public boolean JJImputationBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJImputationBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJImputationBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJImputationBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJImputationBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJImputationBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJImputationBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJImputationBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJImputationBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel imputationDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        imputationDateCreateOutput.setFor("imputationDateCreateInput");
        imputationDateCreateOutput.setId("imputationDateCreateOutput");
        imputationDateCreateOutput.setValue("Imputation Date:");
        htmlPanelGrid.getChildren().add(imputationDateCreateOutput);
        
        Calendar imputationDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        imputationDateCreateInput.setId("imputationDateCreateInput");
        imputationDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJImputationBean.JJImputation_.imputationDate}", Date.class));
        imputationDateCreateInput.setNavigator(true);
        imputationDateCreateInput.setEffect("slideDown");
        imputationDateCreateInput.setPattern("dd/MM/yyyy");
        imputationDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(imputationDateCreateInput);
        
        Message imputationDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        imputationDateCreateInputMessage.setId("imputationDateCreateInputMessage");
        imputationDateCreateInputMessage.setFor("imputationDateCreateInput");
        imputationDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(imputationDateCreateInputMessage);
        
        OutputLabel contactCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        contactCreateOutput.setFor("contactCreateInput");
        contactCreateOutput.setId("contactCreateOutput");
        contactCreateOutput.setValue("Contact:");
        htmlPanelGrid.getChildren().add(contactCreateOutput);
        
        AutoComplete contactCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        contactCreateInput.setId("contactCreateInput");
        contactCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJImputationBean.JJImputation_.contact}", JJContact.class));
        contactCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJImputationBean.completeContact}", List.class, new Class[] { String.class }));
        contactCreateInput.setDropdown(true);
        contactCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "contact", String.class));
        contactCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{contact.name} #{contact.description} #{contact.creationDate} #{contact.updatedDate}", String.class));
        contactCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{contact}", JJContact.class));
        contactCreateInput.setConverter(new JJContactConverter());
        contactCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(contactCreateInput);
        
        Message contactCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        contactCreateInputMessage.setId("contactCreateInputMessage");
        contactCreateInputMessage.setFor("contactCreateInput");
        contactCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(contactCreateInputMessage);
        
        OutputLabel taskCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        taskCreateOutput.setFor("taskCreateInput");
        taskCreateOutput.setId("taskCreateOutput");
        taskCreateOutput.setValue("Task:");
        htmlPanelGrid.getChildren().add(taskCreateOutput);
        
        AutoComplete taskCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        taskCreateInput.setId("taskCreateInput");
        taskCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJImputationBean.JJImputation_.task}", JJTask.class));
        taskCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJImputationBean.completeTask}", List.class, new Class[] { String.class }));
        taskCreateInput.setDropdown(true);
        taskCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "task", String.class));
        taskCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{task.name} #{task.description} #{task.creationDate} #{task.updatedDate}", String.class));
        taskCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{task}", JJTask.class));
        taskCreateInput.setConverter(new JJTaskConverter());
        taskCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(taskCreateInput);
        
        Message taskCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        taskCreateInputMessage.setId("taskCreateInputMessage");
        taskCreateInputMessage.setFor("taskCreateInput");
        taskCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(taskCreateInputMessage);
        
        OutputLabel startActionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        startActionCreateOutput.setFor("startActionCreateInput");
        startActionCreateOutput.setId("startActionCreateOutput");
        startActionCreateOutput.setValue("Start Action:");
        htmlPanelGrid.getChildren().add(startActionCreateOutput);
        
        Calendar startActionCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        startActionCreateInput.setId("startActionCreateInput");
        startActionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJImputationBean.JJImputation_.startAction}", Date.class));
        startActionCreateInput.setNavigator(true);
        startActionCreateInput.setEffect("slideDown");
        startActionCreateInput.setPattern("dd/MM/yyyy");
        startActionCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(startActionCreateInput);
        
        Message startActionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        startActionCreateInputMessage.setId("startActionCreateInputMessage");
        startActionCreateInputMessage.setFor("startActionCreateInput");
        startActionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(startActionCreateInputMessage);
        
        OutputLabel endActionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        endActionCreateOutput.setFor("endActionCreateInput");
        endActionCreateOutput.setId("endActionCreateOutput");
        endActionCreateOutput.setValue("End Action:");
        htmlPanelGrid.getChildren().add(endActionCreateOutput);
        
        Calendar endActionCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        endActionCreateInput.setId("endActionCreateInput");
        endActionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJImputationBean.JJImputation_.endAction}", Date.class));
        endActionCreateInput.setNavigator(true);
        endActionCreateInput.setEffect("slideDown");
        endActionCreateInput.setPattern("dd/MM/yyyy");
        endActionCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(endActionCreateInput);
        
        Message endActionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        endActionCreateInputMessage.setId("endActionCreateInputMessage");
        endActionCreateInputMessage.setFor("endActionCreateInput");
        endActionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(endActionCreateInputMessage);
        
        OutputLabel workloadRemainingCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadRemainingCreateOutput.setFor("workloadRemainingCreateInput");
        workloadRemainingCreateOutput.setId("workloadRemainingCreateOutput");
        workloadRemainingCreateOutput.setValue("Workload Remaining:");
        htmlPanelGrid.getChildren().add(workloadRemainingCreateOutput);
        
        Spinner workloadRemainingCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadRemainingCreateInput.setId("workloadRemainingCreateInput");
        workloadRemainingCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJImputationBean.JJImputation_.workloadRemaining}", Integer.class));
        workloadRemainingCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadRemainingCreateInput);
        
        Message workloadRemainingCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadRemainingCreateInputMessage.setId("workloadRemainingCreateInputMessage");
        workloadRemainingCreateInputMessage.setFor("workloadRemainingCreateInput");
        workloadRemainingCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadRemainingCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJImputationBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel imputationDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        imputationDateEditOutput.setFor("imputationDateEditInput");
        imputationDateEditOutput.setId("imputationDateEditOutput");
        imputationDateEditOutput.setValue("Imputation Date:");
        htmlPanelGrid.getChildren().add(imputationDateEditOutput);
        
        Calendar imputationDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        imputationDateEditInput.setId("imputationDateEditInput");
        imputationDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJImputationBean.JJImputation_.imputationDate}", Date.class));
        imputationDateEditInput.setNavigator(true);
        imputationDateEditInput.setEffect("slideDown");
        imputationDateEditInput.setPattern("dd/MM/yyyy");
        imputationDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(imputationDateEditInput);
        
        Message imputationDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        imputationDateEditInputMessage.setId("imputationDateEditInputMessage");
        imputationDateEditInputMessage.setFor("imputationDateEditInput");
        imputationDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(imputationDateEditInputMessage);
        
        OutputLabel contactEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        contactEditOutput.setFor("contactEditInput");
        contactEditOutput.setId("contactEditOutput");
        contactEditOutput.setValue("Contact:");
        htmlPanelGrid.getChildren().add(contactEditOutput);
        
        AutoComplete contactEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        contactEditInput.setId("contactEditInput");
        contactEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJImputationBean.JJImputation_.contact}", JJContact.class));
        contactEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJImputationBean.completeContact}", List.class, new Class[] { String.class }));
        contactEditInput.setDropdown(true);
        contactEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "contact", String.class));
        contactEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{contact.name} #{contact.description} #{contact.creationDate} #{contact.updatedDate}", String.class));
        contactEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{contact}", JJContact.class));
        contactEditInput.setConverter(new JJContactConverter());
        contactEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(contactEditInput);
        
        Message contactEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        contactEditInputMessage.setId("contactEditInputMessage");
        contactEditInputMessage.setFor("contactEditInput");
        contactEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(contactEditInputMessage);
        
        OutputLabel taskEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        taskEditOutput.setFor("taskEditInput");
        taskEditOutput.setId("taskEditOutput");
        taskEditOutput.setValue("Task:");
        htmlPanelGrid.getChildren().add(taskEditOutput);
        
        AutoComplete taskEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        taskEditInput.setId("taskEditInput");
        taskEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJImputationBean.JJImputation_.task}", JJTask.class));
        taskEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJImputationBean.completeTask}", List.class, new Class[] { String.class }));
        taskEditInput.setDropdown(true);
        taskEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "task", String.class));
        taskEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{task.name} #{task.description} #{task.creationDate} #{task.updatedDate}", String.class));
        taskEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{task}", JJTask.class));
        taskEditInput.setConverter(new JJTaskConverter());
        taskEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(taskEditInput);
        
        Message taskEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        taskEditInputMessage.setId("taskEditInputMessage");
        taskEditInputMessage.setFor("taskEditInput");
        taskEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(taskEditInputMessage);
        
        OutputLabel startActionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        startActionEditOutput.setFor("startActionEditInput");
        startActionEditOutput.setId("startActionEditOutput");
        startActionEditOutput.setValue("Start Action:");
        htmlPanelGrid.getChildren().add(startActionEditOutput);
        
        Calendar startActionEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        startActionEditInput.setId("startActionEditInput");
        startActionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJImputationBean.JJImputation_.startAction}", Date.class));
        startActionEditInput.setNavigator(true);
        startActionEditInput.setEffect("slideDown");
        startActionEditInput.setPattern("dd/MM/yyyy");
        startActionEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(startActionEditInput);
        
        Message startActionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        startActionEditInputMessage.setId("startActionEditInputMessage");
        startActionEditInputMessage.setFor("startActionEditInput");
        startActionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(startActionEditInputMessage);
        
        OutputLabel endActionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        endActionEditOutput.setFor("endActionEditInput");
        endActionEditOutput.setId("endActionEditOutput");
        endActionEditOutput.setValue("End Action:");
        htmlPanelGrid.getChildren().add(endActionEditOutput);
        
        Calendar endActionEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        endActionEditInput.setId("endActionEditInput");
        endActionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJImputationBean.JJImputation_.endAction}", Date.class));
        endActionEditInput.setNavigator(true);
        endActionEditInput.setEffect("slideDown");
        endActionEditInput.setPattern("dd/MM/yyyy");
        endActionEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(endActionEditInput);
        
        Message endActionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        endActionEditInputMessage.setId("endActionEditInputMessage");
        endActionEditInputMessage.setFor("endActionEditInput");
        endActionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(endActionEditInputMessage);
        
        OutputLabel workloadRemainingEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadRemainingEditOutput.setFor("workloadRemainingEditInput");
        workloadRemainingEditOutput.setId("workloadRemainingEditOutput");
        workloadRemainingEditOutput.setValue("Workload Remaining:");
        htmlPanelGrid.getChildren().add(workloadRemainingEditOutput);
        
        Spinner workloadRemainingEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadRemainingEditInput.setId("workloadRemainingEditInput");
        workloadRemainingEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJImputationBean.JJImputation_.workloadRemaining}", Integer.class));
        workloadRemainingEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadRemainingEditInput);
        
        Message workloadRemainingEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadRemainingEditInputMessage.setId("workloadRemainingEditInputMessage");
        workloadRemainingEditInputMessage.setFor("workloadRemainingEditInput");
        workloadRemainingEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadRemainingEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJImputationBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText imputationDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        imputationDateLabel.setId("imputationDateLabel");
        imputationDateLabel.setValue("Imputation Date:");
        htmlPanelGrid.getChildren().add(imputationDateLabel);
        
        HtmlOutputText imputationDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        imputationDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJImputationBean.JJImputation_.imputationDate}", Date.class));
        DateTimeConverter imputationDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        imputationDateValueConverter.setPattern("dd/MM/yyyy");
        imputationDateValue.setConverter(imputationDateValueConverter);
        htmlPanelGrid.getChildren().add(imputationDateValue);
        
        HtmlOutputText contactLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contactLabel.setId("contactLabel");
        contactLabel.setValue("Contact:");
        htmlPanelGrid.getChildren().add(contactLabel);
        
        HtmlOutputText contactValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contactValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJImputationBean.JJImputation_.contact}", JJContact.class));
        contactValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(contactValue);
        
        HtmlOutputText taskLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        taskLabel.setId("taskLabel");
        taskLabel.setValue("Task:");
        htmlPanelGrid.getChildren().add(taskLabel);
        
        HtmlOutputText taskValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        taskValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJImputationBean.JJImputation_.task}", JJTask.class));
        taskValue.setConverter(new JJTaskConverter());
        htmlPanelGrid.getChildren().add(taskValue);
        
        HtmlOutputText startActionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        startActionLabel.setId("startActionLabel");
        startActionLabel.setValue("Start Action:");
        htmlPanelGrid.getChildren().add(startActionLabel);
        
        HtmlOutputText startActionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        startActionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJImputationBean.JJImputation_.startAction}", Date.class));
        DateTimeConverter startActionValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        startActionValueConverter.setPattern("dd/MM/yyyy");
        startActionValue.setConverter(startActionValueConverter);
        htmlPanelGrid.getChildren().add(startActionValue);
        
        HtmlOutputText endActionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endActionLabel.setId("endActionLabel");
        endActionLabel.setValue("End Action:");
        htmlPanelGrid.getChildren().add(endActionLabel);
        
        HtmlOutputText endActionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endActionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJImputationBean.JJImputation_.endAction}", Date.class));
        DateTimeConverter endActionValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        endActionValueConverter.setPattern("dd/MM/yyyy");
        endActionValue.setConverter(endActionValueConverter);
        htmlPanelGrid.getChildren().add(endActionValue);
        
        HtmlOutputText workloadRemainingLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadRemainingLabel.setId("workloadRemainingLabel");
        workloadRemainingLabel.setValue("Workload Remaining:");
        htmlPanelGrid.getChildren().add(workloadRemainingLabel);
        
        HtmlOutputText workloadRemainingValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadRemainingValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJImputationBean.JJImputation_.workloadRemaining}", String.class));
        htmlPanelGrid.getChildren().add(workloadRemainingValue);
        
        return htmlPanelGrid;
    }
    
    public JJImputation JJImputationBean.getJJImputation_() {
        if (JJImputation_ == null) {
            JJImputation_ = new JJImputation();
        }
        return JJImputation_;
    }
    
    public void JJImputationBean.setJJImputation_(JJImputation JJImputation_) {
        this.JJImputation_ = JJImputation_;
    }
    
    public List<JJContact> JJImputationBean.completeContact(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJTask> JJImputationBean.completeTask(String query) {
        List<JJTask> suggestions = new ArrayList<JJTask>();
        for (JJTask jJTask : jJTaskService.findAllJJTasks()) {
            String jJTaskStr = String.valueOf(jJTask.getName() +  " "  + jJTask.getDescription() +  " "  + jJTask.getCreationDate() +  " "  + jJTask.getUpdatedDate());
            if (jJTaskStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJTask);
            }
        }
        return suggestions;
    }
    
    public String JJImputationBean.onEdit() {
        return null;
    }
    
    public boolean JJImputationBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJImputationBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJImputationBean.displayList() {
        createDialogVisible = false;
        findAllJJImputations();
        return "JJImputation_";
    }
    
    public String JJImputationBean.displayCreateDialog() {
        JJImputation_ = new JJImputation();
        createDialogVisible = true;
        return "JJImputation_";
    }
    
    public String JJImputationBean.persist() {
        String message = "";
        if (JJImputation_.getId() != null) {
            jJImputationService.updateJJImputation(JJImputation_);
            message = "message_successfully_updated";
        } else {
            jJImputationService.saveJJImputation(JJImputation_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJImputation");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJImputations();
    }
    
    public String JJImputationBean.delete() {
        jJImputationService.deleteJJImputation(JJImputation_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJImputation");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJImputations();
    }
    
    public void JJImputationBean.reset() {
        JJImputation_ = null;
        createDialogVisible = false;
    }
    
    public void JJImputationBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

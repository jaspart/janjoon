// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import com.starit.janjoonweb.domain.JJBug;
import com.starit.janjoonweb.domain.JJBugService;
import com.starit.janjoonweb.domain.JJBuild;
import com.starit.janjoonweb.domain.JJContact;
import com.starit.janjoonweb.domain.JJContactService;
import com.starit.janjoonweb.domain.JJRequirement;
import com.starit.janjoonweb.domain.JJRequirementService;
import com.starit.janjoonweb.domain.JJSprint;
import com.starit.janjoonweb.domain.JJSprintService;
import com.starit.janjoonweb.domain.JJStatus;
import com.starit.janjoonweb.domain.JJStatusService;
import com.starit.janjoonweb.domain.JJTask;
import com.starit.janjoonweb.domain.JJTaskService;
import com.starit.janjoonweb.domain.JJTestcase;
import com.starit.janjoonweb.domain.JJTestcaseService;
import com.starit.janjoonweb.domain.JJVersion;
import com.starit.janjoonweb.domain.JJVersionService;
import com.starit.janjoonweb.ui.mb.JJTaskBean;
import com.starit.janjoonweb.ui.mb.converter.JJBugConverter;
import com.starit.janjoonweb.ui.mb.converter.JJContactConverter;
import com.starit.janjoonweb.ui.mb.converter.JJRequirementConverter;
import com.starit.janjoonweb.ui.mb.converter.JJSprintConverter;
import com.starit.janjoonweb.ui.mb.converter.JJStatusConverter;
import com.starit.janjoonweb.ui.mb.converter.JJTaskConverter;
import com.starit.janjoonweb.ui.mb.converter.JJTestcaseConverter;
import com.starit.janjoonweb.ui.mb.converter.JJVersionConverter;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJTaskBean_Roo_ManagedBean {
    
    declare @type: JJTaskBean: @ManagedBean(name = "jJTaskBean");
    
    declare @type: JJTaskBean: @SessionScoped;
    
    @Autowired
    JJTaskService JJTaskBean.jJTaskService;
    
    @Autowired
    JJContactService JJTaskBean.jJContactService;
    
    @Autowired
    JJVersionService JJTaskBean.jJVersionService;
    
    @Autowired
    JJBugService JJTaskBean.jJBugService;
    
    @Autowired
    JJRequirementService JJTaskBean.jJRequirementService;
    
    @Autowired
    JJTestcaseService JJTaskBean.jJTestcaseService;
    
    @Autowired
    JJSprintService JJTaskBean.jJSprintService;
    
    @Autowired
    JJStatusService JJTaskBean.jJStatusService;
    
    private String JJTaskBean.name = "JJTasks";
    
    private JJTask JJTaskBean.JJTask_;
    
    private List<JJTask> JJTaskBean.allJJTasks;
    
    private boolean JJTaskBean.dataVisible = false;
    
    private List<String> JJTaskBean.columns;
    
    private HtmlPanelGrid JJTaskBean.createPanelGrid;
    
    private HtmlPanelGrid JJTaskBean.editPanelGrid;
    
    private HtmlPanelGrid JJTaskBean.viewPanelGrid;
    
    private boolean JJTaskBean.createDialogVisible = false;
    
    private List<JJTask> JJTaskBean.selectedTasks;
    
    private List<JJTask> JJTaskBean.selectedAfterTasks;
    
    private List<JJBuild> JJTaskBean.selectedBuilds;
    
    private List<JJTask> JJTaskBean.selectedBeforeTasks;
    
    @PostConstruct
    public void JJTaskBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
        columns.add("startDatePlanned");
    }
    
    public String JJTaskBean.getName() {
        return name;
    }
    
    public List<String> JJTaskBean.getColumns() {
        return columns;
    }
    
    public List<JJTask> JJTaskBean.getAllJJTasks() {
        return allJJTasks;
    }
    
    public void JJTaskBean.setAllJJTasks(List<JJTask> allJJTasks) {
        this.allJJTasks = allJJTasks;
    }
    
    public String JJTaskBean.findAllJJTasks() {
        allJJTasks = jJTaskService.findAllJJTasks();
        dataVisible = !allJJTasks.isEmpty();
        return null;
    }
    
    public boolean JJTaskBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJTaskBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJTaskBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJTaskBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJTaskBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJTaskBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJTaskBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJTaskBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJTaskBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputTextarea nameCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMaximum(100);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel descriptionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionCreateOutput.setFor("descriptionCreateInput");
        descriptionCreateOutput.setId("descriptionCreateOutput");
        descriptionCreateOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionCreateOutput);
        
        InputTextarea descriptionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionCreateInput.setId("descriptionCreateInput");
        descriptionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.description}", String.class));
        descriptionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionCreateInput);
        
        Message descriptionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionCreateInputMessage.setId("descriptionCreateInputMessage");
        descriptionCreateInputMessage.setFor("descriptionCreateInput");
        descriptionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionCreateInputMessage);
        
        OutputLabel creationDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateCreateOutput.setFor("creationDateCreateInput");
        creationDateCreateOutput.setId("creationDateCreateOutput");
        creationDateCreateOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateCreateOutput);
        
        Calendar creationDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateCreateInput.setId("creationDateCreateInput");
        creationDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.creationDate}", Date.class));
        creationDateCreateInput.setNavigator(true);
        creationDateCreateInput.setEffect("slideDown");
        creationDateCreateInput.setPattern("dd/MM/yyyy");
        creationDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateCreateInput);
        
        Message creationDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateCreateInputMessage.setId("creationDateCreateInputMessage");
        creationDateCreateInputMessage.setFor("creationDateCreateInput");
        creationDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateCreateInputMessage);
        
        OutputLabel createdByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByCreateOutput.setFor("createdByCreateInput");
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.createdBy}", JJContact.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByCreateInput.setConverter(new JJContactConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        OutputLabel updatedDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateCreateOutput.setFor("updatedDateCreateInput");
        updatedDateCreateOutput.setId("updatedDateCreateOutput");
        updatedDateCreateOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateCreateOutput);
        
        Calendar updatedDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateCreateInput.setId("updatedDateCreateInput");
        updatedDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.updatedDate}", Date.class));
        updatedDateCreateInput.setNavigator(true);
        updatedDateCreateInput.setEffect("slideDown");
        updatedDateCreateInput.setPattern("dd/MM/yyyy");
        updatedDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateCreateInput);
        
        Message updatedDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateCreateInputMessage.setId("updatedDateCreateInputMessage");
        updatedDateCreateInputMessage.setFor("updatedDateCreateInput");
        updatedDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateCreateInputMessage);
        
        OutputLabel updatedByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByCreateOutput.setFor("updatedByCreateInput");
        updatedByCreateOutput.setId("updatedByCreateOutput");
        updatedByCreateOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByCreateOutput);
        
        AutoComplete updatedByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByCreateInput.setId("updatedByCreateInput");
        updatedByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.updatedBy}", JJContact.class));
        updatedByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByCreateInput.setDropdown(true);
        updatedByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByCreateInput.setConverter(new JJContactConverter());
        updatedByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByCreateInput);
        
        Message updatedByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByCreateInputMessage.setId("updatedByCreateInputMessage");
        updatedByCreateInputMessage.setFor("updatedByCreateInput");
        updatedByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByCreateInputMessage);
        
        OutputLabel enabledCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledCreateOutput.setFor("enabledCreateInput");
        enabledCreateOutput.setId("enabledCreateOutput");
        enabledCreateOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledCreateOutput);
        
        SelectBooleanCheckbox enabledCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledCreateInput.setId("enabledCreateInput");
        enabledCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.enabled}", Boolean.class));
        enabledCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledCreateInput);
        
        Message enabledCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledCreateInputMessage.setId("enabledCreateInputMessage");
        enabledCreateInputMessage.setFor("enabledCreateInput");
        enabledCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledCreateInputMessage);
        
        OutputLabel specificationCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        specificationCreateOutput.setFor("specificationCreateInput");
        specificationCreateOutput.setId("specificationCreateOutput");
        specificationCreateOutput.setValue("Specification:");
        htmlPanelGrid.getChildren().add(specificationCreateOutput);
        
        SelectBooleanCheckbox specificationCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        specificationCreateInput.setId("specificationCreateInput");
        specificationCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.specification}", Boolean.class));
        specificationCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(specificationCreateInput);
        
        Message specificationCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        specificationCreateInputMessage.setId("specificationCreateInputMessage");
        specificationCreateInputMessage.setFor("specificationCreateInput");
        specificationCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(specificationCreateInputMessage);
        
        OutputLabel startDatePlannedCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        startDatePlannedCreateOutput.setFor("startDatePlannedCreateInput");
        startDatePlannedCreateOutput.setId("startDatePlannedCreateOutput");
        startDatePlannedCreateOutput.setValue("Start Date Planned:");
        htmlPanelGrid.getChildren().add(startDatePlannedCreateOutput);
        
        Calendar startDatePlannedCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        startDatePlannedCreateInput.setId("startDatePlannedCreateInput");
        startDatePlannedCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.startDatePlanned}", Date.class));
        startDatePlannedCreateInput.setNavigator(true);
        startDatePlannedCreateInput.setEffect("slideDown");
        startDatePlannedCreateInput.setPattern("dd/MM/yyyy");
        startDatePlannedCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(startDatePlannedCreateInput);
        
        Message startDatePlannedCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        startDatePlannedCreateInputMessage.setId("startDatePlannedCreateInputMessage");
        startDatePlannedCreateInputMessage.setFor("startDatePlannedCreateInput");
        startDatePlannedCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(startDatePlannedCreateInputMessage);
        
        OutputLabel endDatePlannedCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        endDatePlannedCreateOutput.setFor("endDatePlannedCreateInput");
        endDatePlannedCreateOutput.setId("endDatePlannedCreateOutput");
        endDatePlannedCreateOutput.setValue("End Date Planned:");
        htmlPanelGrid.getChildren().add(endDatePlannedCreateOutput);
        
        Calendar endDatePlannedCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        endDatePlannedCreateInput.setId("endDatePlannedCreateInput");
        endDatePlannedCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.endDatePlanned}", Date.class));
        endDatePlannedCreateInput.setNavigator(true);
        endDatePlannedCreateInput.setEffect("slideDown");
        endDatePlannedCreateInput.setPattern("dd/MM/yyyy");
        endDatePlannedCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(endDatePlannedCreateInput);
        
        Message endDatePlannedCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        endDatePlannedCreateInputMessage.setId("endDatePlannedCreateInputMessage");
        endDatePlannedCreateInputMessage.setFor("endDatePlannedCreateInput");
        endDatePlannedCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(endDatePlannedCreateInputMessage);
        
        OutputLabel workloadPlannedCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadPlannedCreateOutput.setFor("workloadPlannedCreateInput");
        workloadPlannedCreateOutput.setId("workloadPlannedCreateOutput");
        workloadPlannedCreateOutput.setValue("Workload Planned:");
        htmlPanelGrid.getChildren().add(workloadPlannedCreateOutput);
        
        Spinner workloadPlannedCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadPlannedCreateInput.setId("workloadPlannedCreateInput");
        workloadPlannedCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workloadPlanned}", Integer.class));
        workloadPlannedCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadPlannedCreateInput);
        
        Message workloadPlannedCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadPlannedCreateInputMessage.setId("workloadPlannedCreateInputMessage");
        workloadPlannedCreateInputMessage.setFor("workloadPlannedCreateInput");
        workloadPlannedCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadPlannedCreateInputMessage);
        
        OutputLabel startDateRevisedCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        startDateRevisedCreateOutput.setFor("startDateRevisedCreateInput");
        startDateRevisedCreateOutput.setId("startDateRevisedCreateOutput");
        startDateRevisedCreateOutput.setValue("Start Date Revised:");
        htmlPanelGrid.getChildren().add(startDateRevisedCreateOutput);
        
        Calendar startDateRevisedCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        startDateRevisedCreateInput.setId("startDateRevisedCreateInput");
        startDateRevisedCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.startDateRevised}", Date.class));
        startDateRevisedCreateInput.setNavigator(true);
        startDateRevisedCreateInput.setEffect("slideDown");
        startDateRevisedCreateInput.setPattern("dd/MM/yyyy");
        startDateRevisedCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(startDateRevisedCreateInput);
        
        Message startDateRevisedCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        startDateRevisedCreateInputMessage.setId("startDateRevisedCreateInputMessage");
        startDateRevisedCreateInputMessage.setFor("startDateRevisedCreateInput");
        startDateRevisedCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(startDateRevisedCreateInputMessage);
        
        OutputLabel endDateRevisedCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        endDateRevisedCreateOutput.setFor("endDateRevisedCreateInput");
        endDateRevisedCreateOutput.setId("endDateRevisedCreateOutput");
        endDateRevisedCreateOutput.setValue("End Date Revised:");
        htmlPanelGrid.getChildren().add(endDateRevisedCreateOutput);
        
        Calendar endDateRevisedCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        endDateRevisedCreateInput.setId("endDateRevisedCreateInput");
        endDateRevisedCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.endDateRevised}", Date.class));
        endDateRevisedCreateInput.setNavigator(true);
        endDateRevisedCreateInput.setEffect("slideDown");
        endDateRevisedCreateInput.setPattern("dd/MM/yyyy");
        endDateRevisedCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(endDateRevisedCreateInput);
        
        Message endDateRevisedCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        endDateRevisedCreateInputMessage.setId("endDateRevisedCreateInputMessage");
        endDateRevisedCreateInputMessage.setFor("endDateRevisedCreateInput");
        endDateRevisedCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(endDateRevisedCreateInputMessage);
        
        OutputLabel workloadRevisedCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadRevisedCreateOutput.setFor("workloadRevisedCreateInput");
        workloadRevisedCreateOutput.setId("workloadRevisedCreateOutput");
        workloadRevisedCreateOutput.setValue("Workload Revised:");
        htmlPanelGrid.getChildren().add(workloadRevisedCreateOutput);
        
        Spinner workloadRevisedCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadRevisedCreateInput.setId("workloadRevisedCreateInput");
        workloadRevisedCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workloadRevised}", Integer.class));
        workloadRevisedCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadRevisedCreateInput);
        
        Message workloadRevisedCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadRevisedCreateInputMessage.setId("workloadRevisedCreateInputMessage");
        workloadRevisedCreateInputMessage.setFor("workloadRevisedCreateInput");
        workloadRevisedCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadRevisedCreateInputMessage);
        
        OutputLabel startDateRealCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        startDateRealCreateOutput.setFor("startDateRealCreateInput");
        startDateRealCreateOutput.setId("startDateRealCreateOutput");
        startDateRealCreateOutput.setValue("Start Date Real:");
        htmlPanelGrid.getChildren().add(startDateRealCreateOutput);
        
        Calendar startDateRealCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        startDateRealCreateInput.setId("startDateRealCreateInput");
        startDateRealCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.startDateReal}", Date.class));
        startDateRealCreateInput.setNavigator(true);
        startDateRealCreateInput.setEffect("slideDown");
        startDateRealCreateInput.setPattern("dd/MM/yyyy");
        startDateRealCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(startDateRealCreateInput);
        
        Message startDateRealCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        startDateRealCreateInputMessage.setId("startDateRealCreateInputMessage");
        startDateRealCreateInputMessage.setFor("startDateRealCreateInput");
        startDateRealCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(startDateRealCreateInputMessage);
        
        OutputLabel endDateRealCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        endDateRealCreateOutput.setFor("endDateRealCreateInput");
        endDateRealCreateOutput.setId("endDateRealCreateOutput");
        endDateRealCreateOutput.setValue("End Date Real:");
        htmlPanelGrid.getChildren().add(endDateRealCreateOutput);
        
        Calendar endDateRealCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        endDateRealCreateInput.setId("endDateRealCreateInput");
        endDateRealCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.endDateReal}", Date.class));
        endDateRealCreateInput.setNavigator(true);
        endDateRealCreateInput.setEffect("slideDown");
        endDateRealCreateInput.setPattern("dd/MM/yyyy");
        endDateRealCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(endDateRealCreateInput);
        
        Message endDateRealCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        endDateRealCreateInputMessage.setId("endDateRealCreateInputMessage");
        endDateRealCreateInputMessage.setFor("endDateRealCreateInput");
        endDateRealCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(endDateRealCreateInputMessage);
        
        OutputLabel workloadRealCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadRealCreateOutput.setFor("workloadRealCreateInput");
        workloadRealCreateOutput.setId("workloadRealCreateOutput");
        workloadRealCreateOutput.setValue("Workload Real:");
        htmlPanelGrid.getChildren().add(workloadRealCreateOutput);
        
        Spinner workloadRealCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadRealCreateInput.setId("workloadRealCreateInput");
        workloadRealCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workloadReal}", Integer.class));
        workloadRealCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadRealCreateInput);
        
        Message workloadRealCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadRealCreateInputMessage.setId("workloadRealCreateInputMessage");
        workloadRealCreateInputMessage.setFor("workloadRealCreateInput");
        workloadRealCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadRealCreateInputMessage);
        
        OutputLabel soldDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        soldDateCreateOutput.setFor("soldDateCreateInput");
        soldDateCreateOutput.setId("soldDateCreateOutput");
        soldDateCreateOutput.setValue("Sold Date:");
        htmlPanelGrid.getChildren().add(soldDateCreateOutput);
        
        Calendar soldDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        soldDateCreateInput.setId("soldDateCreateInput");
        soldDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.soldDate}", Date.class));
        soldDateCreateInput.setNavigator(true);
        soldDateCreateInput.setEffect("slideDown");
        soldDateCreateInput.setPattern("dd/MM/yyyy");
        soldDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(soldDateCreateInput);
        
        Message soldDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        soldDateCreateInputMessage.setId("soldDateCreateInputMessage");
        soldDateCreateInputMessage.setFor("soldDateCreateInput");
        soldDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(soldDateCreateInputMessage);
        
        OutputLabel warrantyDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        warrantyDateCreateOutput.setFor("warrantyDateCreateInput");
        warrantyDateCreateOutput.setId("warrantyDateCreateOutput");
        warrantyDateCreateOutput.setValue("Warranty Date:");
        htmlPanelGrid.getChildren().add(warrantyDateCreateOutput);
        
        Calendar warrantyDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        warrantyDateCreateInput.setId("warrantyDateCreateInput");
        warrantyDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.warrantyDate}", Date.class));
        warrantyDateCreateInput.setNavigator(true);
        warrantyDateCreateInput.setEffect("slideDown");
        warrantyDateCreateInput.setPattern("dd/MM/yyyy");
        warrantyDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(warrantyDateCreateInput);
        
        Message warrantyDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        warrantyDateCreateInputMessage.setId("warrantyDateCreateInputMessage");
        warrantyDateCreateInputMessage.setFor("warrantyDateCreateInput");
        warrantyDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(warrantyDateCreateInputMessage);
        
        OutputLabel workloadSoldCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadSoldCreateOutput.setFor("workloadSoldCreateInput");
        workloadSoldCreateOutput.setId("workloadSoldCreateOutput");
        workloadSoldCreateOutput.setValue("Workload Sold:");
        htmlPanelGrid.getChildren().add(workloadSoldCreateOutput);
        
        Spinner workloadSoldCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadSoldCreateInput.setId("workloadSoldCreateInput");
        workloadSoldCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workloadSold}", Integer.class));
        workloadSoldCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadSoldCreateInput);
        
        Message workloadSoldCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadSoldCreateInputMessage.setId("workloadSoldCreateInputMessage");
        workloadSoldCreateInputMessage.setFor("workloadSoldCreateInput");
        workloadSoldCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadSoldCreateInputMessage);
        
        OutputLabel workloadRiskCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadRiskCreateOutput.setFor("workloadRiskCreateInput");
        workloadRiskCreateOutput.setId("workloadRiskCreateOutput");
        workloadRiskCreateOutput.setValue("Workload Risk:");
        htmlPanelGrid.getChildren().add(workloadRiskCreateOutput);
        
        Spinner workloadRiskCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadRiskCreateInput.setId("workloadRiskCreateInput");
        workloadRiskCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workloadRisk}", Integer.class));
        workloadRiskCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadRiskCreateInput);
        
        Message workloadRiskCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadRiskCreateInputMessage.setId("workloadRiskCreateInputMessage");
        workloadRiskCreateInputMessage.setFor("workloadRiskCreateInput");
        workloadRiskCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadRiskCreateInputMessage);
        
        OutputLabel workloadWarrantyCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadWarrantyCreateOutput.setFor("workloadWarrantyCreateInput");
        workloadWarrantyCreateOutput.setId("workloadWarrantyCreateOutput");
        workloadWarrantyCreateOutput.setValue("Workload Warranty:");
        htmlPanelGrid.getChildren().add(workloadWarrantyCreateOutput);
        
        Spinner workloadWarrantyCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadWarrantyCreateInput.setId("workloadWarrantyCreateInput");
        workloadWarrantyCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workloadWarranty}", Integer.class));
        workloadWarrantyCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadWarrantyCreateInput);
        
        Message workloadWarrantyCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadWarrantyCreateInputMessage.setId("workloadWarrantyCreateInputMessage");
        workloadWarrantyCreateInputMessage.setFor("workloadWarrantyCreateInput");
        workloadWarrantyCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadWarrantyCreateInputMessage);
        
        OutputLabel consumedCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        consumedCreateOutput.setFor("consumedCreateInput");
        consumedCreateOutput.setId("consumedCreateOutput");
        consumedCreateOutput.setValue("Consumed:");
        htmlPanelGrid.getChildren().add(consumedCreateOutput);
        
        Spinner consumedCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        consumedCreateInput.setId("consumedCreateInput");
        consumedCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.consumed}", Integer.class));
        consumedCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(consumedCreateInput);
        
        Message consumedCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        consumedCreateInputMessage.setId("consumedCreateInputMessage");
        consumedCreateInputMessage.setFor("consumedCreateInput");
        consumedCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(consumedCreateInputMessage);
        
        OutputLabel versioningCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        versioningCreateOutput.setFor("versioningCreateInput");
        versioningCreateOutput.setId("versioningCreateOutput");
        versioningCreateOutput.setValue("Versioning:");
        htmlPanelGrid.getChildren().add(versioningCreateOutput);
        
        AutoComplete versioningCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        versioningCreateInput.setId("versioningCreateInput");
        versioningCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.versioning}", JJVersion.class));
        versioningCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeVersioning}", List.class, new Class[] { String.class }));
        versioningCreateInput.setDropdown(true);
        versioningCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "versioning", String.class));
        versioningCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{versioning.name} #{versioning.description} #{versioning.creationDate} #{versioning.updatedDate}", String.class));
        versioningCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{versioning}", JJVersion.class));
        versioningCreateInput.setConverter(new JJVersionConverter());
        versioningCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(versioningCreateInput);
        
        Message versioningCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        versioningCreateInputMessage.setId("versioningCreateInputMessage");
        versioningCreateInputMessage.setFor("versioningCreateInput");
        versioningCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(versioningCreateInputMessage);
        
        OutputLabel bugCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        bugCreateOutput.setFor("bugCreateInput");
        bugCreateOutput.setId("bugCreateOutput");
        bugCreateOutput.setValue("Bug:");
        htmlPanelGrid.getChildren().add(bugCreateOutput);
        
        AutoComplete bugCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        bugCreateInput.setId("bugCreateInput");
        bugCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.bug}", JJBug.class));
        bugCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeBug}", List.class, new Class[] { String.class }));
        bugCreateInput.setDropdown(true);
        bugCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "bug", String.class));
        bugCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{bug.name} #{bug.description} #{bug.creationDate} #{bug.updatedDate}", String.class));
        bugCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{bug}", JJBug.class));
        bugCreateInput.setConverter(new JJBugConverter());
        bugCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(bugCreateInput);
        
        Message bugCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bugCreateInputMessage.setId("bugCreateInputMessage");
        bugCreateInputMessage.setFor("bugCreateInput");
        bugCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bugCreateInputMessage);
        
        OutputLabel requirementCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        requirementCreateOutput.setFor("requirementCreateInput");
        requirementCreateOutput.setId("requirementCreateOutput");
        requirementCreateOutput.setValue("Requirement:");
        htmlPanelGrid.getChildren().add(requirementCreateOutput);
        
        AutoComplete requirementCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        requirementCreateInput.setId("requirementCreateInput");
        requirementCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.requirement}", JJRequirement.class));
        requirementCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeRequirement}", List.class, new Class[] { String.class }));
        requirementCreateInput.setDropdown(true);
        requirementCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "requirement", String.class));
        requirementCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{requirement.name} #{requirement.description} #{requirement.creationDate} #{requirement.updatedDate}", String.class));
        requirementCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{requirement}", JJRequirement.class));
        requirementCreateInput.setConverter(new JJRequirementConverter());
        requirementCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(requirementCreateInput);
        
        Message requirementCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementCreateInputMessage.setId("requirementCreateInputMessage");
        requirementCreateInputMessage.setFor("requirementCreateInput");
        requirementCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementCreateInputMessage);
        
        OutputLabel testcaseCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        testcaseCreateOutput.setFor("testcaseCreateInput");
        testcaseCreateOutput.setId("testcaseCreateOutput");
        testcaseCreateOutput.setValue("Testcase:");
        htmlPanelGrid.getChildren().add(testcaseCreateOutput);
        
        AutoComplete testcaseCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        testcaseCreateInput.setId("testcaseCreateInput");
        testcaseCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.testcase}", JJTestcase.class));
        testcaseCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeTestcase}", List.class, new Class[] { String.class }));
        testcaseCreateInput.setDropdown(true);
        testcaseCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "testcase", String.class));
        testcaseCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{testcase.name} #{testcase.description} #{testcase.creationDate} #{testcase.updatedDate}", String.class));
        testcaseCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{testcase}", JJTestcase.class));
        testcaseCreateInput.setConverter(new JJTestcaseConverter());
        testcaseCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(testcaseCreateInput);
        
        Message testcaseCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        testcaseCreateInputMessage.setId("testcaseCreateInputMessage");
        testcaseCreateInputMessage.setFor("testcaseCreateInput");
        testcaseCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(testcaseCreateInputMessage);
        
        OutputLabel sprintCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        sprintCreateOutput.setFor("sprintCreateInput");
        sprintCreateOutput.setId("sprintCreateOutput");
        sprintCreateOutput.setValue("Sprint:");
        htmlPanelGrid.getChildren().add(sprintCreateOutput);
        
        AutoComplete sprintCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        sprintCreateInput.setId("sprintCreateInput");
        sprintCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.sprint}", JJSprint.class));
        sprintCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeSprint}", List.class, new Class[] { String.class }));
        sprintCreateInput.setDropdown(true);
        sprintCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "sprint", String.class));
        sprintCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{sprint.name} #{sprint.description} #{sprint.creationDate} #{sprint.updatedDate}", String.class));
        sprintCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{sprint}", JJSprint.class));
        sprintCreateInput.setConverter(new JJSprintConverter());
        sprintCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(sprintCreateInput);
        
        Message sprintCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        sprintCreateInputMessage.setId("sprintCreateInputMessage");
        sprintCreateInputMessage.setFor("sprintCreateInput");
        sprintCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(sprintCreateInputMessage);
        
        OutputLabel assignedToCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        assignedToCreateOutput.setFor("assignedToCreateInput");
        assignedToCreateOutput.setId("assignedToCreateOutput");
        assignedToCreateOutput.setValue("Assigned To:");
        htmlPanelGrid.getChildren().add(assignedToCreateOutput);
        
        AutoComplete assignedToCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        assignedToCreateInput.setId("assignedToCreateInput");
        assignedToCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.assignedTo}", JJContact.class));
        assignedToCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeAssignedTo}", List.class, new Class[] { String.class }));
        assignedToCreateInput.setDropdown(true);
        assignedToCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "assignedTo", String.class));
        assignedToCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{assignedTo.name} #{assignedTo.description} #{assignedTo.creationDate} #{assignedTo.updatedDate}", String.class));
        assignedToCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{assignedTo}", JJContact.class));
        assignedToCreateInput.setConverter(new JJContactConverter());
        assignedToCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(assignedToCreateInput);
        
        Message assignedToCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        assignedToCreateInputMessage.setId("assignedToCreateInputMessage");
        assignedToCreateInputMessage.setFor("assignedToCreateInput");
        assignedToCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(assignedToCreateInputMessage);
        
        OutputLabel statusCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusCreateOutput.setFor("statusCreateInput");
        statusCreateOutput.setId("statusCreateOutput");
        statusCreateOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusCreateOutput);
        
        AutoComplete statusCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        statusCreateInput.setId("statusCreateInput");
        statusCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.status}", JJStatus.class));
        statusCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeStatus}", List.class, new Class[] { String.class }));
        statusCreateInput.setDropdown(true);
        statusCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "status", String.class));
        statusCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{status.name} #{status.description} #{status.creationDate} #{status.updatedDate}", String.class));
        statusCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{status}", JJStatus.class));
        statusCreateInput.setConverter(new JJStatusConverter());
        statusCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(statusCreateInput);
        
        Message statusCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusCreateInputMessage.setId("statusCreateInputMessage");
        statusCreateInputMessage.setFor("statusCreateInput");
        statusCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusCreateInputMessage);
        
        OutputLabel messagesCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        messagesCreateOutput.setFor("messagesCreateInput");
        messagesCreateOutput.setId("messagesCreateOutput");
        messagesCreateOutput.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesCreateOutput);
        
        InputText messagesCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        messagesCreateInput.setId("messagesCreateInput");
        messagesCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.messages}", Set.class));
        messagesCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(messagesCreateInput);
        
        Message messagesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messagesCreateInputMessage.setId("messagesCreateInputMessage");
        messagesCreateInputMessage.setFor("messagesCreateInput");
        messagesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messagesCreateInputMessage);
        
        OutputLabel completedCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        completedCreateOutput.setFor("completedCreateInput");
        completedCreateOutput.setId("completedCreateOutput");
        completedCreateOutput.setValue("Completed:");
        htmlPanelGrid.getChildren().add(completedCreateOutput);
        
        SelectBooleanCheckbox completedCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        completedCreateInput.setId("completedCreateInput");
        completedCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.completed}", Boolean.class));
        completedCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(completedCreateInput);
        
        Message completedCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        completedCreateInputMessage.setId("completedCreateInputMessage");
        completedCreateInputMessage.setFor("completedCreateInput");
        completedCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(completedCreateInputMessage);
        
        OutputLabel parentCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        parentCreateOutput.setFor("parentCreateInput");
        parentCreateOutput.setId("parentCreateOutput");
        parentCreateOutput.setValue("Parent:");
        htmlPanelGrid.getChildren().add(parentCreateOutput);
        
        AutoComplete parentCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        parentCreateInput.setId("parentCreateInput");
        parentCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.parent}", JJTask.class));
        parentCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeParent}", List.class, new Class[] { String.class }));
        parentCreateInput.setDropdown(true);
        parentCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "parent", String.class));
        parentCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{parent.name} #{parent.description} #{parent.creationDate} #{parent.updatedDate}", String.class));
        parentCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{parent}", JJTask.class));
        parentCreateInput.setConverter(new JJTaskConverter());
        parentCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(parentCreateInput);
        
        Message parentCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        parentCreateInputMessage.setId("parentCreateInputMessage");
        parentCreateInputMessage.setFor("parentCreateInput");
        parentCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(parentCreateInputMessage);
        
        HtmlOutputText tasksCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksCreateOutput.setId("tasksCreateOutput");
        tasksCreateOutput.setValue("Tasks:");
        htmlPanelGrid.getChildren().add(tasksCreateOutput);
        
        HtmlOutputText tasksCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksCreateInput.setId("tasksCreateInput");
        tasksCreateInput.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(tasksCreateInput);
        
        Message tasksCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tasksCreateInputMessage.setId("tasksCreateInputMessage");
        tasksCreateInputMessage.setFor("tasksCreateInput");
        tasksCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tasksCreateInputMessage);
        
        HtmlOutputText afterTasksCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        afterTasksCreateOutput.setId("afterTasksCreateOutput");
        afterTasksCreateOutput.setValue("After Tasks:");
        htmlPanelGrid.getChildren().add(afterTasksCreateOutput);
        
        HtmlOutputText afterTasksCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        afterTasksCreateInput.setId("afterTasksCreateInput");
        afterTasksCreateInput.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(afterTasksCreateInput);
        
        Message afterTasksCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        afterTasksCreateInputMessage.setId("afterTasksCreateInputMessage");
        afterTasksCreateInputMessage.setFor("afterTasksCreateInput");
        afterTasksCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(afterTasksCreateInputMessage);
        
        HtmlOutputText buildsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        buildsCreateOutput.setId("buildsCreateOutput");
        buildsCreateOutput.setValue("Builds:");
        htmlPanelGrid.getChildren().add(buildsCreateOutput);
        
        HtmlOutputText buildsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        buildsCreateInput.setId("buildsCreateInput");
        buildsCreateInput.setValue("This relationship is managed from the JJBuild side");
        htmlPanelGrid.getChildren().add(buildsCreateInput);
        
        Message buildsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        buildsCreateInputMessage.setId("buildsCreateInputMessage");
        buildsCreateInputMessage.setFor("buildsCreateInput");
        buildsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(buildsCreateInputMessage);
        
        OutputLabel beforeTasksCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        beforeTasksCreateOutput.setFor("beforeTasksCreateInput");
        beforeTasksCreateOutput.setId("beforeTasksCreateOutput");
        beforeTasksCreateOutput.setValue("Before Tasks:");
        htmlPanelGrid.getChildren().add(beforeTasksCreateOutput);
        
        SelectManyMenu beforeTasksCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        beforeTasksCreateInput.setId("beforeTasksCreateInput");
        beforeTasksCreateInput.setConverter(new JJTaskConverter());
        beforeTasksCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.selectedBeforeTasks}", List.class));
        UISelectItems beforeTasksCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        beforeTasksCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.allJJTasks}", List.class));
        beforeTasksCreateInput.setRequired(false);
        beforeTasksCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJTask", String.class));
        beforeTasksCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJTask}", String.class));
        beforeTasksCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJTask}", JJTask.class));
        beforeTasksCreateInput.getChildren().add(beforeTasksCreateInputItems);
        htmlPanelGrid.getChildren().add(beforeTasksCreateInput);
        
        Message beforeTasksCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        beforeTasksCreateInputMessage.setId("beforeTasksCreateInputMessage");
        beforeTasksCreateInputMessage.setFor("beforeTasksCreateInput");
        beforeTasksCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(beforeTasksCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJTaskBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputTextarea nameEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMaximum(100);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel descriptionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionEditOutput.setFor("descriptionEditInput");
        descriptionEditOutput.setId("descriptionEditOutput");
        descriptionEditOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionEditOutput);
        
        InputTextarea descriptionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionEditInput.setId("descriptionEditInput");
        descriptionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.description}", String.class));
        descriptionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionEditInput);
        
        Message descriptionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionEditInputMessage.setId("descriptionEditInputMessage");
        descriptionEditInputMessage.setFor("descriptionEditInput");
        descriptionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionEditInputMessage);
        
        OutputLabel creationDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateEditOutput.setFor("creationDateEditInput");
        creationDateEditOutput.setId("creationDateEditOutput");
        creationDateEditOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateEditOutput);
        
        Calendar creationDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateEditInput.setId("creationDateEditInput");
        creationDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.creationDate}", Date.class));
        creationDateEditInput.setNavigator(true);
        creationDateEditInput.setEffect("slideDown");
        creationDateEditInput.setPattern("dd/MM/yyyy");
        creationDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateEditInput);
        
        Message creationDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateEditInputMessage.setId("creationDateEditInputMessage");
        creationDateEditInputMessage.setFor("creationDateEditInput");
        creationDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateEditInputMessage);
        
        OutputLabel createdByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByEditOutput.setFor("createdByEditInput");
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.createdBy}", JJContact.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByEditInput.setConverter(new JJContactConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        OutputLabel updatedDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateEditOutput.setFor("updatedDateEditInput");
        updatedDateEditOutput.setId("updatedDateEditOutput");
        updatedDateEditOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateEditOutput);
        
        Calendar updatedDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateEditInput.setId("updatedDateEditInput");
        updatedDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.updatedDate}", Date.class));
        updatedDateEditInput.setNavigator(true);
        updatedDateEditInput.setEffect("slideDown");
        updatedDateEditInput.setPattern("dd/MM/yyyy");
        updatedDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateEditInput);
        
        Message updatedDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateEditInputMessage.setId("updatedDateEditInputMessage");
        updatedDateEditInputMessage.setFor("updatedDateEditInput");
        updatedDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateEditInputMessage);
        
        OutputLabel updatedByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByEditOutput.setFor("updatedByEditInput");
        updatedByEditOutput.setId("updatedByEditOutput");
        updatedByEditOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByEditOutput);
        
        AutoComplete updatedByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByEditInput.setId("updatedByEditInput");
        updatedByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.updatedBy}", JJContact.class));
        updatedByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByEditInput.setDropdown(true);
        updatedByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByEditInput.setConverter(new JJContactConverter());
        updatedByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByEditInput);
        
        Message updatedByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByEditInputMessage.setId("updatedByEditInputMessage");
        updatedByEditInputMessage.setFor("updatedByEditInput");
        updatedByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByEditInputMessage);
        
        OutputLabel enabledEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledEditOutput.setFor("enabledEditInput");
        enabledEditOutput.setId("enabledEditOutput");
        enabledEditOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledEditOutput);
        
        SelectBooleanCheckbox enabledEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledEditInput.setId("enabledEditInput");
        enabledEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.enabled}", Boolean.class));
        enabledEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledEditInput);
        
        Message enabledEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledEditInputMessage.setId("enabledEditInputMessage");
        enabledEditInputMessage.setFor("enabledEditInput");
        enabledEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledEditInputMessage);
        
        OutputLabel specificationEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        specificationEditOutput.setFor("specificationEditInput");
        specificationEditOutput.setId("specificationEditOutput");
        specificationEditOutput.setValue("Specification:");
        htmlPanelGrid.getChildren().add(specificationEditOutput);
        
        SelectBooleanCheckbox specificationEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        specificationEditInput.setId("specificationEditInput");
        specificationEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.specification}", Boolean.class));
        specificationEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(specificationEditInput);
        
        Message specificationEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        specificationEditInputMessage.setId("specificationEditInputMessage");
        specificationEditInputMessage.setFor("specificationEditInput");
        specificationEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(specificationEditInputMessage);
        
        OutputLabel startDatePlannedEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        startDatePlannedEditOutput.setFor("startDatePlannedEditInput");
        startDatePlannedEditOutput.setId("startDatePlannedEditOutput");
        startDatePlannedEditOutput.setValue("Start Date Planned:");
        htmlPanelGrid.getChildren().add(startDatePlannedEditOutput);
        
        Calendar startDatePlannedEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        startDatePlannedEditInput.setId("startDatePlannedEditInput");
        startDatePlannedEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.startDatePlanned}", Date.class));
        startDatePlannedEditInput.setNavigator(true);
        startDatePlannedEditInput.setEffect("slideDown");
        startDatePlannedEditInput.setPattern("dd/MM/yyyy");
        startDatePlannedEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(startDatePlannedEditInput);
        
        Message startDatePlannedEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        startDatePlannedEditInputMessage.setId("startDatePlannedEditInputMessage");
        startDatePlannedEditInputMessage.setFor("startDatePlannedEditInput");
        startDatePlannedEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(startDatePlannedEditInputMessage);
        
        OutputLabel endDatePlannedEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        endDatePlannedEditOutput.setFor("endDatePlannedEditInput");
        endDatePlannedEditOutput.setId("endDatePlannedEditOutput");
        endDatePlannedEditOutput.setValue("End Date Planned:");
        htmlPanelGrid.getChildren().add(endDatePlannedEditOutput);
        
        Calendar endDatePlannedEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        endDatePlannedEditInput.setId("endDatePlannedEditInput");
        endDatePlannedEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.endDatePlanned}", Date.class));
        endDatePlannedEditInput.setNavigator(true);
        endDatePlannedEditInput.setEffect("slideDown");
        endDatePlannedEditInput.setPattern("dd/MM/yyyy");
        endDatePlannedEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(endDatePlannedEditInput);
        
        Message endDatePlannedEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        endDatePlannedEditInputMessage.setId("endDatePlannedEditInputMessage");
        endDatePlannedEditInputMessage.setFor("endDatePlannedEditInput");
        endDatePlannedEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(endDatePlannedEditInputMessage);
        
        OutputLabel workloadPlannedEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadPlannedEditOutput.setFor("workloadPlannedEditInput");
        workloadPlannedEditOutput.setId("workloadPlannedEditOutput");
        workloadPlannedEditOutput.setValue("Workload Planned:");
        htmlPanelGrid.getChildren().add(workloadPlannedEditOutput);
        
        Spinner workloadPlannedEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadPlannedEditInput.setId("workloadPlannedEditInput");
        workloadPlannedEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workloadPlanned}", Integer.class));
        workloadPlannedEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadPlannedEditInput);
        
        Message workloadPlannedEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadPlannedEditInputMessage.setId("workloadPlannedEditInputMessage");
        workloadPlannedEditInputMessage.setFor("workloadPlannedEditInput");
        workloadPlannedEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadPlannedEditInputMessage);
        
        OutputLabel startDateRevisedEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        startDateRevisedEditOutput.setFor("startDateRevisedEditInput");
        startDateRevisedEditOutput.setId("startDateRevisedEditOutput");
        startDateRevisedEditOutput.setValue("Start Date Revised:");
        htmlPanelGrid.getChildren().add(startDateRevisedEditOutput);
        
        Calendar startDateRevisedEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        startDateRevisedEditInput.setId("startDateRevisedEditInput");
        startDateRevisedEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.startDateRevised}", Date.class));
        startDateRevisedEditInput.setNavigator(true);
        startDateRevisedEditInput.setEffect("slideDown");
        startDateRevisedEditInput.setPattern("dd/MM/yyyy");
        startDateRevisedEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(startDateRevisedEditInput);
        
        Message startDateRevisedEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        startDateRevisedEditInputMessage.setId("startDateRevisedEditInputMessage");
        startDateRevisedEditInputMessage.setFor("startDateRevisedEditInput");
        startDateRevisedEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(startDateRevisedEditInputMessage);
        
        OutputLabel endDateRevisedEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        endDateRevisedEditOutput.setFor("endDateRevisedEditInput");
        endDateRevisedEditOutput.setId("endDateRevisedEditOutput");
        endDateRevisedEditOutput.setValue("End Date Revised:");
        htmlPanelGrid.getChildren().add(endDateRevisedEditOutput);
        
        Calendar endDateRevisedEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        endDateRevisedEditInput.setId("endDateRevisedEditInput");
        endDateRevisedEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.endDateRevised}", Date.class));
        endDateRevisedEditInput.setNavigator(true);
        endDateRevisedEditInput.setEffect("slideDown");
        endDateRevisedEditInput.setPattern("dd/MM/yyyy");
        endDateRevisedEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(endDateRevisedEditInput);
        
        Message endDateRevisedEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        endDateRevisedEditInputMessage.setId("endDateRevisedEditInputMessage");
        endDateRevisedEditInputMessage.setFor("endDateRevisedEditInput");
        endDateRevisedEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(endDateRevisedEditInputMessage);
        
        OutputLabel workloadRevisedEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadRevisedEditOutput.setFor("workloadRevisedEditInput");
        workloadRevisedEditOutput.setId("workloadRevisedEditOutput");
        workloadRevisedEditOutput.setValue("Workload Revised:");
        htmlPanelGrid.getChildren().add(workloadRevisedEditOutput);
        
        Spinner workloadRevisedEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadRevisedEditInput.setId("workloadRevisedEditInput");
        workloadRevisedEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workloadRevised}", Integer.class));
        workloadRevisedEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadRevisedEditInput);
        
        Message workloadRevisedEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadRevisedEditInputMessage.setId("workloadRevisedEditInputMessage");
        workloadRevisedEditInputMessage.setFor("workloadRevisedEditInput");
        workloadRevisedEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadRevisedEditInputMessage);
        
        OutputLabel startDateRealEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        startDateRealEditOutput.setFor("startDateRealEditInput");
        startDateRealEditOutput.setId("startDateRealEditOutput");
        startDateRealEditOutput.setValue("Start Date Real:");
        htmlPanelGrid.getChildren().add(startDateRealEditOutput);
        
        Calendar startDateRealEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        startDateRealEditInput.setId("startDateRealEditInput");
        startDateRealEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.startDateReal}", Date.class));
        startDateRealEditInput.setNavigator(true);
        startDateRealEditInput.setEffect("slideDown");
        startDateRealEditInput.setPattern("dd/MM/yyyy");
        startDateRealEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(startDateRealEditInput);
        
        Message startDateRealEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        startDateRealEditInputMessage.setId("startDateRealEditInputMessage");
        startDateRealEditInputMessage.setFor("startDateRealEditInput");
        startDateRealEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(startDateRealEditInputMessage);
        
        OutputLabel endDateRealEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        endDateRealEditOutput.setFor("endDateRealEditInput");
        endDateRealEditOutput.setId("endDateRealEditOutput");
        endDateRealEditOutput.setValue("End Date Real:");
        htmlPanelGrid.getChildren().add(endDateRealEditOutput);
        
        Calendar endDateRealEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        endDateRealEditInput.setId("endDateRealEditInput");
        endDateRealEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.endDateReal}", Date.class));
        endDateRealEditInput.setNavigator(true);
        endDateRealEditInput.setEffect("slideDown");
        endDateRealEditInput.setPattern("dd/MM/yyyy");
        endDateRealEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(endDateRealEditInput);
        
        Message endDateRealEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        endDateRealEditInputMessage.setId("endDateRealEditInputMessage");
        endDateRealEditInputMessage.setFor("endDateRealEditInput");
        endDateRealEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(endDateRealEditInputMessage);
        
        OutputLabel workloadRealEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadRealEditOutput.setFor("workloadRealEditInput");
        workloadRealEditOutput.setId("workloadRealEditOutput");
        workloadRealEditOutput.setValue("Workload Real:");
        htmlPanelGrid.getChildren().add(workloadRealEditOutput);
        
        Spinner workloadRealEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadRealEditInput.setId("workloadRealEditInput");
        workloadRealEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workloadReal}", Integer.class));
        workloadRealEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadRealEditInput);
        
        Message workloadRealEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadRealEditInputMessage.setId("workloadRealEditInputMessage");
        workloadRealEditInputMessage.setFor("workloadRealEditInput");
        workloadRealEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadRealEditInputMessage);
        
        OutputLabel soldDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        soldDateEditOutput.setFor("soldDateEditInput");
        soldDateEditOutput.setId("soldDateEditOutput");
        soldDateEditOutput.setValue("Sold Date:");
        htmlPanelGrid.getChildren().add(soldDateEditOutput);
        
        Calendar soldDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        soldDateEditInput.setId("soldDateEditInput");
        soldDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.soldDate}", Date.class));
        soldDateEditInput.setNavigator(true);
        soldDateEditInput.setEffect("slideDown");
        soldDateEditInput.setPattern("dd/MM/yyyy");
        soldDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(soldDateEditInput);
        
        Message soldDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        soldDateEditInputMessage.setId("soldDateEditInputMessage");
        soldDateEditInputMessage.setFor("soldDateEditInput");
        soldDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(soldDateEditInputMessage);
        
        OutputLabel warrantyDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        warrantyDateEditOutput.setFor("warrantyDateEditInput");
        warrantyDateEditOutput.setId("warrantyDateEditOutput");
        warrantyDateEditOutput.setValue("Warranty Date:");
        htmlPanelGrid.getChildren().add(warrantyDateEditOutput);
        
        Calendar warrantyDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        warrantyDateEditInput.setId("warrantyDateEditInput");
        warrantyDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.warrantyDate}", Date.class));
        warrantyDateEditInput.setNavigator(true);
        warrantyDateEditInput.setEffect("slideDown");
        warrantyDateEditInput.setPattern("dd/MM/yyyy");
        warrantyDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(warrantyDateEditInput);
        
        Message warrantyDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        warrantyDateEditInputMessage.setId("warrantyDateEditInputMessage");
        warrantyDateEditInputMessage.setFor("warrantyDateEditInput");
        warrantyDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(warrantyDateEditInputMessage);
        
        OutputLabel workloadSoldEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadSoldEditOutput.setFor("workloadSoldEditInput");
        workloadSoldEditOutput.setId("workloadSoldEditOutput");
        workloadSoldEditOutput.setValue("Workload Sold:");
        htmlPanelGrid.getChildren().add(workloadSoldEditOutput);
        
        Spinner workloadSoldEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadSoldEditInput.setId("workloadSoldEditInput");
        workloadSoldEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workloadSold}", Integer.class));
        workloadSoldEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadSoldEditInput);
        
        Message workloadSoldEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadSoldEditInputMessage.setId("workloadSoldEditInputMessage");
        workloadSoldEditInputMessage.setFor("workloadSoldEditInput");
        workloadSoldEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadSoldEditInputMessage);
        
        OutputLabel workloadRiskEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadRiskEditOutput.setFor("workloadRiskEditInput");
        workloadRiskEditOutput.setId("workloadRiskEditOutput");
        workloadRiskEditOutput.setValue("Workload Risk:");
        htmlPanelGrid.getChildren().add(workloadRiskEditOutput);
        
        Spinner workloadRiskEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadRiskEditInput.setId("workloadRiskEditInput");
        workloadRiskEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workloadRisk}", Integer.class));
        workloadRiskEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadRiskEditInput);
        
        Message workloadRiskEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadRiskEditInputMessage.setId("workloadRiskEditInputMessage");
        workloadRiskEditInputMessage.setFor("workloadRiskEditInput");
        workloadRiskEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadRiskEditInputMessage);
        
        OutputLabel workloadWarrantyEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadWarrantyEditOutput.setFor("workloadWarrantyEditInput");
        workloadWarrantyEditOutput.setId("workloadWarrantyEditOutput");
        workloadWarrantyEditOutput.setValue("Workload Warranty:");
        htmlPanelGrid.getChildren().add(workloadWarrantyEditOutput);
        
        Spinner workloadWarrantyEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadWarrantyEditInput.setId("workloadWarrantyEditInput");
        workloadWarrantyEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workloadWarranty}", Integer.class));
        workloadWarrantyEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadWarrantyEditInput);
        
        Message workloadWarrantyEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadWarrantyEditInputMessage.setId("workloadWarrantyEditInputMessage");
        workloadWarrantyEditInputMessage.setFor("workloadWarrantyEditInput");
        workloadWarrantyEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadWarrantyEditInputMessage);
        
        OutputLabel consumedEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        consumedEditOutput.setFor("consumedEditInput");
        consumedEditOutput.setId("consumedEditOutput");
        consumedEditOutput.setValue("Consumed:");
        htmlPanelGrid.getChildren().add(consumedEditOutput);
        
        Spinner consumedEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        consumedEditInput.setId("consumedEditInput");
        consumedEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.consumed}", Integer.class));
        consumedEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(consumedEditInput);
        
        Message consumedEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        consumedEditInputMessage.setId("consumedEditInputMessage");
        consumedEditInputMessage.setFor("consumedEditInput");
        consumedEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(consumedEditInputMessage);
        
        OutputLabel versioningEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        versioningEditOutput.setFor("versioningEditInput");
        versioningEditOutput.setId("versioningEditOutput");
        versioningEditOutput.setValue("Versioning:");
        htmlPanelGrid.getChildren().add(versioningEditOutput);
        
        AutoComplete versioningEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        versioningEditInput.setId("versioningEditInput");
        versioningEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.versioning}", JJVersion.class));
        versioningEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeVersioning}", List.class, new Class[] { String.class }));
        versioningEditInput.setDropdown(true);
        versioningEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "versioning", String.class));
        versioningEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{versioning.name} #{versioning.description} #{versioning.creationDate} #{versioning.updatedDate}", String.class));
        versioningEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{versioning}", JJVersion.class));
        versioningEditInput.setConverter(new JJVersionConverter());
        versioningEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(versioningEditInput);
        
        Message versioningEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        versioningEditInputMessage.setId("versioningEditInputMessage");
        versioningEditInputMessage.setFor("versioningEditInput");
        versioningEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(versioningEditInputMessage);
        
        OutputLabel bugEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        bugEditOutput.setFor("bugEditInput");
        bugEditOutput.setId("bugEditOutput");
        bugEditOutput.setValue("Bug:");
        htmlPanelGrid.getChildren().add(bugEditOutput);
        
        AutoComplete bugEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        bugEditInput.setId("bugEditInput");
        bugEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.bug}", JJBug.class));
        bugEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeBug}", List.class, new Class[] { String.class }));
        bugEditInput.setDropdown(true);
        bugEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "bug", String.class));
        bugEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{bug.name} #{bug.description} #{bug.creationDate} #{bug.updatedDate}", String.class));
        bugEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{bug}", JJBug.class));
        bugEditInput.setConverter(new JJBugConverter());
        bugEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(bugEditInput);
        
        Message bugEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bugEditInputMessage.setId("bugEditInputMessage");
        bugEditInputMessage.setFor("bugEditInput");
        bugEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bugEditInputMessage);
        
        OutputLabel requirementEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        requirementEditOutput.setFor("requirementEditInput");
        requirementEditOutput.setId("requirementEditOutput");
        requirementEditOutput.setValue("Requirement:");
        htmlPanelGrid.getChildren().add(requirementEditOutput);
        
        AutoComplete requirementEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        requirementEditInput.setId("requirementEditInput");
        requirementEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.requirement}", JJRequirement.class));
        requirementEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeRequirement}", List.class, new Class[] { String.class }));
        requirementEditInput.setDropdown(true);
        requirementEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "requirement", String.class));
        requirementEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{requirement.name} #{requirement.description} #{requirement.creationDate} #{requirement.updatedDate}", String.class));
        requirementEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{requirement}", JJRequirement.class));
        requirementEditInput.setConverter(new JJRequirementConverter());
        requirementEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(requirementEditInput);
        
        Message requirementEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementEditInputMessage.setId("requirementEditInputMessage");
        requirementEditInputMessage.setFor("requirementEditInput");
        requirementEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementEditInputMessage);
        
        OutputLabel testcaseEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        testcaseEditOutput.setFor("testcaseEditInput");
        testcaseEditOutput.setId("testcaseEditOutput");
        testcaseEditOutput.setValue("Testcase:");
        htmlPanelGrid.getChildren().add(testcaseEditOutput);
        
        AutoComplete testcaseEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        testcaseEditInput.setId("testcaseEditInput");
        testcaseEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.testcase}", JJTestcase.class));
        testcaseEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeTestcase}", List.class, new Class[] { String.class }));
        testcaseEditInput.setDropdown(true);
        testcaseEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "testcase", String.class));
        testcaseEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{testcase.name} #{testcase.description} #{testcase.creationDate} #{testcase.updatedDate}", String.class));
        testcaseEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{testcase}", JJTestcase.class));
        testcaseEditInput.setConverter(new JJTestcaseConverter());
        testcaseEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(testcaseEditInput);
        
        Message testcaseEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        testcaseEditInputMessage.setId("testcaseEditInputMessage");
        testcaseEditInputMessage.setFor("testcaseEditInput");
        testcaseEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(testcaseEditInputMessage);
        
        OutputLabel sprintEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        sprintEditOutput.setFor("sprintEditInput");
        sprintEditOutput.setId("sprintEditOutput");
        sprintEditOutput.setValue("Sprint:");
        htmlPanelGrid.getChildren().add(sprintEditOutput);
        
        AutoComplete sprintEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        sprintEditInput.setId("sprintEditInput");
        sprintEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.sprint}", JJSprint.class));
        sprintEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeSprint}", List.class, new Class[] { String.class }));
        sprintEditInput.setDropdown(true);
        sprintEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "sprint", String.class));
        sprintEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{sprint.name} #{sprint.description} #{sprint.creationDate} #{sprint.updatedDate}", String.class));
        sprintEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{sprint}", JJSprint.class));
        sprintEditInput.setConverter(new JJSprintConverter());
        sprintEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(sprintEditInput);
        
        Message sprintEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        sprintEditInputMessage.setId("sprintEditInputMessage");
        sprintEditInputMessage.setFor("sprintEditInput");
        sprintEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(sprintEditInputMessage);
        
        OutputLabel assignedToEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        assignedToEditOutput.setFor("assignedToEditInput");
        assignedToEditOutput.setId("assignedToEditOutput");
        assignedToEditOutput.setValue("Assigned To:");
        htmlPanelGrid.getChildren().add(assignedToEditOutput);
        
        AutoComplete assignedToEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        assignedToEditInput.setId("assignedToEditInput");
        assignedToEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.assignedTo}", JJContact.class));
        assignedToEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeAssignedTo}", List.class, new Class[] { String.class }));
        assignedToEditInput.setDropdown(true);
        assignedToEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "assignedTo", String.class));
        assignedToEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{assignedTo.name} #{assignedTo.description} #{assignedTo.creationDate} #{assignedTo.updatedDate}", String.class));
        assignedToEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{assignedTo}", JJContact.class));
        assignedToEditInput.setConverter(new JJContactConverter());
        assignedToEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(assignedToEditInput);
        
        Message assignedToEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        assignedToEditInputMessage.setId("assignedToEditInputMessage");
        assignedToEditInputMessage.setFor("assignedToEditInput");
        assignedToEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(assignedToEditInputMessage);
        
        OutputLabel statusEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusEditOutput.setFor("statusEditInput");
        statusEditOutput.setId("statusEditOutput");
        statusEditOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusEditOutput);
        
        AutoComplete statusEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        statusEditInput.setId("statusEditInput");
        statusEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.status}", JJStatus.class));
        statusEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeStatus}", List.class, new Class[] { String.class }));
        statusEditInput.setDropdown(true);
        statusEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "status", String.class));
        statusEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{status.name} #{status.description} #{status.creationDate} #{status.updatedDate}", String.class));
        statusEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{status}", JJStatus.class));
        statusEditInput.setConverter(new JJStatusConverter());
        statusEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(statusEditInput);
        
        Message statusEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusEditInputMessage.setId("statusEditInputMessage");
        statusEditInputMessage.setFor("statusEditInput");
        statusEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusEditInputMessage);
        
        OutputLabel messagesEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        messagesEditOutput.setFor("messagesEditInput");
        messagesEditOutput.setId("messagesEditOutput");
        messagesEditOutput.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesEditOutput);
        
        InputText messagesEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        messagesEditInput.setId("messagesEditInput");
        messagesEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.messages}", Set.class));
        messagesEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(messagesEditInput);
        
        Message messagesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messagesEditInputMessage.setId("messagesEditInputMessage");
        messagesEditInputMessage.setFor("messagesEditInput");
        messagesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messagesEditInputMessage);
        
        OutputLabel completedEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        completedEditOutput.setFor("completedEditInput");
        completedEditOutput.setId("completedEditOutput");
        completedEditOutput.setValue("Completed:");
        htmlPanelGrid.getChildren().add(completedEditOutput);
        
        SelectBooleanCheckbox completedEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        completedEditInput.setId("completedEditInput");
        completedEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.completed}", Boolean.class));
        completedEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(completedEditInput);
        
        Message completedEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        completedEditInputMessage.setId("completedEditInputMessage");
        completedEditInputMessage.setFor("completedEditInput");
        completedEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(completedEditInputMessage);
        
        OutputLabel parentEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        parentEditOutput.setFor("parentEditInput");
        parentEditOutput.setId("parentEditOutput");
        parentEditOutput.setValue("Parent:");
        htmlPanelGrid.getChildren().add(parentEditOutput);
        
        AutoComplete parentEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        parentEditInput.setId("parentEditInput");
        parentEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.parent}", JJTask.class));
        parentEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeParent}", List.class, new Class[] { String.class }));
        parentEditInput.setDropdown(true);
        parentEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "parent", String.class));
        parentEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{parent.name} #{parent.description} #{parent.creationDate} #{parent.updatedDate}", String.class));
        parentEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{parent}", JJTask.class));
        parentEditInput.setConverter(new JJTaskConverter());
        parentEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(parentEditInput);
        
        Message parentEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        parentEditInputMessage.setId("parentEditInputMessage");
        parentEditInputMessage.setFor("parentEditInput");
        parentEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(parentEditInputMessage);
        
        HtmlOutputText tasksEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksEditOutput.setId("tasksEditOutput");
        tasksEditOutput.setValue("Tasks:");
        htmlPanelGrid.getChildren().add(tasksEditOutput);
        
        HtmlOutputText tasksEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksEditInput.setId("tasksEditInput");
        tasksEditInput.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(tasksEditInput);
        
        Message tasksEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tasksEditInputMessage.setId("tasksEditInputMessage");
        tasksEditInputMessage.setFor("tasksEditInput");
        tasksEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tasksEditInputMessage);
        
        HtmlOutputText afterTasksEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        afterTasksEditOutput.setId("afterTasksEditOutput");
        afterTasksEditOutput.setValue("After Tasks:");
        htmlPanelGrid.getChildren().add(afterTasksEditOutput);
        
        HtmlOutputText afterTasksEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        afterTasksEditInput.setId("afterTasksEditInput");
        afterTasksEditInput.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(afterTasksEditInput);
        
        Message afterTasksEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        afterTasksEditInputMessage.setId("afterTasksEditInputMessage");
        afterTasksEditInputMessage.setFor("afterTasksEditInput");
        afterTasksEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(afterTasksEditInputMessage);
        
        HtmlOutputText buildsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        buildsEditOutput.setId("buildsEditOutput");
        buildsEditOutput.setValue("Builds:");
        htmlPanelGrid.getChildren().add(buildsEditOutput);
        
        HtmlOutputText buildsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        buildsEditInput.setId("buildsEditInput");
        buildsEditInput.setValue("This relationship is managed from the JJBuild side");
        htmlPanelGrid.getChildren().add(buildsEditInput);
        
        Message buildsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        buildsEditInputMessage.setId("buildsEditInputMessage");
        buildsEditInputMessage.setFor("buildsEditInput");
        buildsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(buildsEditInputMessage);
        
        OutputLabel beforeTasksEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        beforeTasksEditOutput.setFor("beforeTasksEditInput");
        beforeTasksEditOutput.setId("beforeTasksEditOutput");
        beforeTasksEditOutput.setValue("Before Tasks:");
        htmlPanelGrid.getChildren().add(beforeTasksEditOutput);
        
        SelectManyMenu beforeTasksEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        beforeTasksEditInput.setId("beforeTasksEditInput");
        beforeTasksEditInput.setConverter(new JJTaskConverter());
        beforeTasksEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.selectedBeforeTasks}", List.class));
        UISelectItems beforeTasksEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        beforeTasksEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.allJJTasks}", List.class));
        beforeTasksEditInput.setRequired(false);
        beforeTasksEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJTask", String.class));
        beforeTasksEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJTask}", String.class));
        beforeTasksEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJTask}", JJTask.class));
        beforeTasksEditInput.getChildren().add(beforeTasksEditInputItems);
        htmlPanelGrid.getChildren().add(beforeTasksEditInput);
        
        Message beforeTasksEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        beforeTasksEditInputMessage.setId("beforeTasksEditInputMessage");
        beforeTasksEditInputMessage.setFor("beforeTasksEditInput");
        beforeTasksEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(beforeTasksEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJTaskBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        InputTextarea nameValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.name}", String.class));
        nameValue.setReadonly(true);
        nameValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText descriptionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionLabel.setId("descriptionLabel");
        descriptionLabel.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionLabel);
        
        InputTextarea descriptionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionValue.setId("descriptionValue");
        descriptionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.description}", String.class));
        descriptionValue.setReadonly(true);
        descriptionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descriptionValue);
        
        HtmlOutputText creationDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateLabel.setId("creationDateLabel");
        creationDateLabel.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateLabel);
        
        HtmlOutputText creationDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.creationDate}", Date.class));
        DateTimeConverter creationDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationDateValueConverter.setPattern("dd/MM/yyyy");
        creationDateValue.setConverter(creationDateValueConverter);
        htmlPanelGrid.getChildren().add(creationDateValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.createdBy}", JJContact.class));
        createdByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        HtmlOutputText updatedDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateLabel.setId("updatedDateLabel");
        updatedDateLabel.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateLabel);
        
        HtmlOutputText updatedDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.updatedDate}", Date.class));
        DateTimeConverter updatedDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updatedDateValueConverter.setPattern("dd/MM/yyyy");
        updatedDateValue.setConverter(updatedDateValueConverter);
        htmlPanelGrid.getChildren().add(updatedDateValue);
        
        HtmlOutputText updatedByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByLabel.setId("updatedByLabel");
        updatedByLabel.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByLabel);
        
        HtmlOutputText updatedByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.updatedBy}", JJContact.class));
        updatedByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(updatedByValue);
        
        HtmlOutputText enabledLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledLabel.setId("enabledLabel");
        enabledLabel.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledLabel);
        
        HtmlOutputText enabledValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.enabled}", String.class));
        htmlPanelGrid.getChildren().add(enabledValue);
        
        HtmlOutputText specificationLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        specificationLabel.setId("specificationLabel");
        specificationLabel.setValue("Specification:");
        htmlPanelGrid.getChildren().add(specificationLabel);
        
        HtmlOutputText specificationValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        specificationValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.specification}", String.class));
        htmlPanelGrid.getChildren().add(specificationValue);
        
        HtmlOutputText startDatePlannedLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        startDatePlannedLabel.setId("startDatePlannedLabel");
        startDatePlannedLabel.setValue("Start Date Planned:");
        htmlPanelGrid.getChildren().add(startDatePlannedLabel);
        
        HtmlOutputText startDatePlannedValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        startDatePlannedValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.startDatePlanned}", Date.class));
        DateTimeConverter startDatePlannedValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        startDatePlannedValueConverter.setPattern("dd/MM/yyyy");
        startDatePlannedValue.setConverter(startDatePlannedValueConverter);
        htmlPanelGrid.getChildren().add(startDatePlannedValue);
        
        HtmlOutputText endDatePlannedLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endDatePlannedLabel.setId("endDatePlannedLabel");
        endDatePlannedLabel.setValue("End Date Planned:");
        htmlPanelGrid.getChildren().add(endDatePlannedLabel);
        
        HtmlOutputText endDatePlannedValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endDatePlannedValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.endDatePlanned}", Date.class));
        DateTimeConverter endDatePlannedValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        endDatePlannedValueConverter.setPattern("dd/MM/yyyy");
        endDatePlannedValue.setConverter(endDatePlannedValueConverter);
        htmlPanelGrid.getChildren().add(endDatePlannedValue);
        
        HtmlOutputText workloadPlannedLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadPlannedLabel.setId("workloadPlannedLabel");
        workloadPlannedLabel.setValue("Workload Planned:");
        htmlPanelGrid.getChildren().add(workloadPlannedLabel);
        
        HtmlOutputText workloadPlannedValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadPlannedValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workloadPlanned}", String.class));
        htmlPanelGrid.getChildren().add(workloadPlannedValue);
        
        HtmlOutputText startDateRevisedLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        startDateRevisedLabel.setId("startDateRevisedLabel");
        startDateRevisedLabel.setValue("Start Date Revised:");
        htmlPanelGrid.getChildren().add(startDateRevisedLabel);
        
        HtmlOutputText startDateRevisedValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        startDateRevisedValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.startDateRevised}", Date.class));
        DateTimeConverter startDateRevisedValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        startDateRevisedValueConverter.setPattern("dd/MM/yyyy");
        startDateRevisedValue.setConverter(startDateRevisedValueConverter);
        htmlPanelGrid.getChildren().add(startDateRevisedValue);
        
        HtmlOutputText endDateRevisedLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endDateRevisedLabel.setId("endDateRevisedLabel");
        endDateRevisedLabel.setValue("End Date Revised:");
        htmlPanelGrid.getChildren().add(endDateRevisedLabel);
        
        HtmlOutputText endDateRevisedValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endDateRevisedValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.endDateRevised}", Date.class));
        DateTimeConverter endDateRevisedValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        endDateRevisedValueConverter.setPattern("dd/MM/yyyy");
        endDateRevisedValue.setConverter(endDateRevisedValueConverter);
        htmlPanelGrid.getChildren().add(endDateRevisedValue);
        
        HtmlOutputText workloadRevisedLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadRevisedLabel.setId("workloadRevisedLabel");
        workloadRevisedLabel.setValue("Workload Revised:");
        htmlPanelGrid.getChildren().add(workloadRevisedLabel);
        
        HtmlOutputText workloadRevisedValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadRevisedValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workloadRevised}", String.class));
        htmlPanelGrid.getChildren().add(workloadRevisedValue);
        
        HtmlOutputText startDateRealLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        startDateRealLabel.setId("startDateRealLabel");
        startDateRealLabel.setValue("Start Date Real:");
        htmlPanelGrid.getChildren().add(startDateRealLabel);
        
        HtmlOutputText startDateRealValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        startDateRealValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.startDateReal}", Date.class));
        DateTimeConverter startDateRealValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        startDateRealValueConverter.setPattern("dd/MM/yyyy");
        startDateRealValue.setConverter(startDateRealValueConverter);
        htmlPanelGrid.getChildren().add(startDateRealValue);
        
        HtmlOutputText endDateRealLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endDateRealLabel.setId("endDateRealLabel");
        endDateRealLabel.setValue("End Date Real:");
        htmlPanelGrid.getChildren().add(endDateRealLabel);
        
        HtmlOutputText endDateRealValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endDateRealValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.endDateReal}", Date.class));
        DateTimeConverter endDateRealValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        endDateRealValueConverter.setPattern("dd/MM/yyyy");
        endDateRealValue.setConverter(endDateRealValueConverter);
        htmlPanelGrid.getChildren().add(endDateRealValue);
        
        HtmlOutputText workloadRealLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadRealLabel.setId("workloadRealLabel");
        workloadRealLabel.setValue("Workload Real:");
        htmlPanelGrid.getChildren().add(workloadRealLabel);
        
        HtmlOutputText workloadRealValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadRealValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workloadReal}", String.class));
        htmlPanelGrid.getChildren().add(workloadRealValue);
        
        HtmlOutputText soldDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        soldDateLabel.setId("soldDateLabel");
        soldDateLabel.setValue("Sold Date:");
        htmlPanelGrid.getChildren().add(soldDateLabel);
        
        HtmlOutputText soldDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        soldDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.soldDate}", Date.class));
        DateTimeConverter soldDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        soldDateValueConverter.setPattern("dd/MM/yyyy");
        soldDateValue.setConverter(soldDateValueConverter);
        htmlPanelGrid.getChildren().add(soldDateValue);
        
        HtmlOutputText warrantyDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        warrantyDateLabel.setId("warrantyDateLabel");
        warrantyDateLabel.setValue("Warranty Date:");
        htmlPanelGrid.getChildren().add(warrantyDateLabel);
        
        HtmlOutputText warrantyDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        warrantyDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.warrantyDate}", Date.class));
        DateTimeConverter warrantyDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        warrantyDateValueConverter.setPattern("dd/MM/yyyy");
        warrantyDateValue.setConverter(warrantyDateValueConverter);
        htmlPanelGrid.getChildren().add(warrantyDateValue);
        
        HtmlOutputText workloadSoldLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadSoldLabel.setId("workloadSoldLabel");
        workloadSoldLabel.setValue("Workload Sold:");
        htmlPanelGrid.getChildren().add(workloadSoldLabel);
        
        HtmlOutputText workloadSoldValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadSoldValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workloadSold}", String.class));
        htmlPanelGrid.getChildren().add(workloadSoldValue);
        
        HtmlOutputText workloadRiskLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadRiskLabel.setId("workloadRiskLabel");
        workloadRiskLabel.setValue("Workload Risk:");
        htmlPanelGrid.getChildren().add(workloadRiskLabel);
        
        HtmlOutputText workloadRiskValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadRiskValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workloadRisk}", String.class));
        htmlPanelGrid.getChildren().add(workloadRiskValue);
        
        HtmlOutputText workloadWarrantyLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadWarrantyLabel.setId("workloadWarrantyLabel");
        workloadWarrantyLabel.setValue("Workload Warranty:");
        htmlPanelGrid.getChildren().add(workloadWarrantyLabel);
        
        HtmlOutputText workloadWarrantyValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadWarrantyValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workloadWarranty}", String.class));
        htmlPanelGrid.getChildren().add(workloadWarrantyValue);
        
        HtmlOutputText consumedLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        consumedLabel.setId("consumedLabel");
        consumedLabel.setValue("Consumed:");
        htmlPanelGrid.getChildren().add(consumedLabel);
        
        HtmlOutputText consumedValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        consumedValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.consumed}", String.class));
        htmlPanelGrid.getChildren().add(consumedValue);
        
        HtmlOutputText versioningLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        versioningLabel.setId("versioningLabel");
        versioningLabel.setValue("Versioning:");
        htmlPanelGrid.getChildren().add(versioningLabel);
        
        HtmlOutputText versioningValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        versioningValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.versioning}", JJVersion.class));
        versioningValue.setConverter(new JJVersionConverter());
        htmlPanelGrid.getChildren().add(versioningValue);
        
        HtmlOutputText bugLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugLabel.setId("bugLabel");
        bugLabel.setValue("Bug:");
        htmlPanelGrid.getChildren().add(bugLabel);
        
        HtmlOutputText bugValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.bug}", JJBug.class));
        bugValue.setConverter(new JJBugConverter());
        htmlPanelGrid.getChildren().add(bugValue);
        
        HtmlOutputText requirementLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementLabel.setId("requirementLabel");
        requirementLabel.setValue("Requirement:");
        htmlPanelGrid.getChildren().add(requirementLabel);
        
        HtmlOutputText requirementValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.requirement}", JJRequirement.class));
        requirementValue.setConverter(new JJRequirementConverter());
        htmlPanelGrid.getChildren().add(requirementValue);
        
        HtmlOutputText testcaseLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        testcaseLabel.setId("testcaseLabel");
        testcaseLabel.setValue("Testcase:");
        htmlPanelGrid.getChildren().add(testcaseLabel);
        
        HtmlOutputText testcaseValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        testcaseValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.testcase}", JJTestcase.class));
        testcaseValue.setConverter(new JJTestcaseConverter());
        htmlPanelGrid.getChildren().add(testcaseValue);
        
        HtmlOutputText sprintLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sprintLabel.setId("sprintLabel");
        sprintLabel.setValue("Sprint:");
        htmlPanelGrid.getChildren().add(sprintLabel);
        
        HtmlOutputText sprintValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sprintValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.sprint}", JJSprint.class));
        sprintValue.setConverter(new JJSprintConverter());
        htmlPanelGrid.getChildren().add(sprintValue);
        
        HtmlOutputText assignedToLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedToLabel.setId("assignedToLabel");
        assignedToLabel.setValue("Assigned To:");
        htmlPanelGrid.getChildren().add(assignedToLabel);
        
        HtmlOutputText assignedToValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedToValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.assignedTo}", JJContact.class));
        assignedToValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(assignedToValue);
        
        HtmlOutputText statusLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusLabel.setId("statusLabel");
        statusLabel.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusLabel);
        
        HtmlOutputText statusValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.status}", JJStatus.class));
        statusValue.setConverter(new JJStatusConverter());
        htmlPanelGrid.getChildren().add(statusValue);
        
        HtmlOutputText messagesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesLabel.setId("messagesLabel");
        messagesLabel.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesLabel);
        
        HtmlOutputText messagesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.messages}", String.class));
        htmlPanelGrid.getChildren().add(messagesValue);
        
        HtmlOutputText completedLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        completedLabel.setId("completedLabel");
        completedLabel.setValue("Completed:");
        htmlPanelGrid.getChildren().add(completedLabel);
        
        HtmlOutputText completedValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        completedValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.completed}", String.class));
        htmlPanelGrid.getChildren().add(completedValue);
        
        HtmlOutputText parentLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        parentLabel.setId("parentLabel");
        parentLabel.setValue("Parent:");
        htmlPanelGrid.getChildren().add(parentLabel);
        
        HtmlOutputText parentValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        parentValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.parent}", JJTask.class));
        parentValue.setConverter(new JJTaskConverter());
        htmlPanelGrid.getChildren().add(parentValue);
        
        HtmlOutputText tasksLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksLabel.setId("tasksLabel");
        tasksLabel.setValue("Tasks:");
        htmlPanelGrid.getChildren().add(tasksLabel);
        
        HtmlOutputText tasksValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksValue.setId("tasksValue");
        tasksValue.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(tasksValue);
        
        HtmlOutputText afterTasksLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        afterTasksLabel.setId("afterTasksLabel");
        afterTasksLabel.setValue("After Tasks:");
        htmlPanelGrid.getChildren().add(afterTasksLabel);
        
        HtmlOutputText afterTasksValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        afterTasksValue.setId("afterTasksValue");
        afterTasksValue.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(afterTasksValue);
        
        HtmlOutputText buildsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        buildsLabel.setId("buildsLabel");
        buildsLabel.setValue("Builds:");
        htmlPanelGrid.getChildren().add(buildsLabel);
        
        HtmlOutputText buildsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        buildsValue.setId("buildsValue");
        buildsValue.setValue("This relationship is managed from the JJBuild side");
        htmlPanelGrid.getChildren().add(buildsValue);
        
        HtmlOutputText beforeTasksLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        beforeTasksLabel.setId("beforeTasksLabel");
        beforeTasksLabel.setValue("Before Tasks:");
        htmlPanelGrid.getChildren().add(beforeTasksLabel);
        
        SelectManyMenu beforeTasksValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        beforeTasksValue.setId("beforeTasksValue");
        beforeTasksValue.setConverter(new JJTaskConverter());
        beforeTasksValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.selectedBeforeTasks}", List.class));
        UISelectItems beforeTasksValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        beforeTasksValue.setReadonly(true);
        beforeTasksValue.setDisabled(true);
        beforeTasksValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.beforeTasks}", Set.class));
        beforeTasksValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJTask", String.class));
        beforeTasksValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJTask}", String.class));
        beforeTasksValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJTask}", JJTask.class));
        beforeTasksValue.getChildren().add(beforeTasksValueItems);
        htmlPanelGrid.getChildren().add(beforeTasksValue);
        
        return htmlPanelGrid;
    }
    
    public JJTask JJTaskBean.getJJTask_() {
        if (JJTask_ == null) {
            JJTask_ = new JJTask();
        }
        return JJTask_;
    }
    
    public void JJTaskBean.setJJTask_(JJTask JJTask_) {
        this.JJTask_ = JJTask_;
    }
    
    public List<JJContact> JJTaskBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJTaskBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJVersion> JJTaskBean.completeVersioning(String query) {
        List<JJVersion> suggestions = new ArrayList<JJVersion>();
        for (JJVersion jJVersion : jJVersionService.findAllJJVersions()) {
            String jJVersionStr = String.valueOf(jJVersion.getName() +  " "  + jJVersion.getDescription() +  " "  + jJVersion.getCreationDate() +  " "  + jJVersion.getUpdatedDate());
            if (jJVersionStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJVersion);
            }
        }
        return suggestions;
    }
    
    public List<JJBug> JJTaskBean.completeBug(String query) {
        List<JJBug> suggestions = new ArrayList<JJBug>();
        for (JJBug jJBug : jJBugService.findAllJJBugs()) {
            String jJBugStr = String.valueOf(jJBug.getName() +  " "  + jJBug.getDescription() +  " "  + jJBug.getCreationDate() +  " "  + jJBug.getUpdatedDate());
            if (jJBugStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJBug);
            }
        }
        return suggestions;
    }
    
    public List<JJRequirement> JJTaskBean.completeRequirement(String query) {
        List<JJRequirement> suggestions = new ArrayList<JJRequirement>();
        for (JJRequirement jJRequirement : jJRequirementService.findAllJJRequirements()) {
            String jJRequirementStr = String.valueOf(jJRequirement.getName() +  " "  + jJRequirement.getDescription() +  " "  + jJRequirement.getCreationDate() +  " "  + jJRequirement.getUpdatedDate());
            if (jJRequirementStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJRequirement);
            }
        }
        return suggestions;
    }
    
    public List<JJTestcase> JJTaskBean.completeTestcase(String query) {
        List<JJTestcase> suggestions = new ArrayList<JJTestcase>();
        for (JJTestcase jJTestcase : jJTestcaseService.findAllJJTestcases()) {
            String jJTestcaseStr = String.valueOf(jJTestcase.getName() +  " "  + jJTestcase.getDescription() +  " "  + jJTestcase.getCreationDate() +  " "  + jJTestcase.getUpdatedDate());
            if (jJTestcaseStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJTestcase);
            }
        }
        return suggestions;
    }
    
    public List<JJSprint> JJTaskBean.completeSprint(String query) {
        List<JJSprint> suggestions = new ArrayList<JJSprint>();
        for (JJSprint jJSprint : jJSprintService.findAllJJSprints()) {
            String jJSprintStr = String.valueOf(jJSprint.getName() +  " "  + jJSprint.getDescription() +  " "  + jJSprint.getCreationDate() +  " "  + jJSprint.getUpdatedDate());
            if (jJSprintStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJSprint);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJTaskBean.completeAssignedTo(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJStatus> JJTaskBean.completeStatus(String query) {
        List<JJStatus> suggestions = new ArrayList<JJStatus>();
        for (JJStatus jJStatus : jJStatusService.findAllJJStatuses()) {
            String jJStatusStr = String.valueOf(jJStatus.getName() +  " "  + jJStatus.getDescription() +  " "  + jJStatus.getCreationDate() +  " "  + jJStatus.getUpdatedDate());
            if (jJStatusStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJStatus);
            }
        }
        return suggestions;
    }
    
    public List<JJTask> JJTaskBean.completeParent(String query) {
        List<JJTask> suggestions = new ArrayList<JJTask>();
        for (JJTask jJTask : jJTaskService.findAllJJTasks()) {
            String jJTaskStr = String.valueOf(jJTask.getName() +  " "  + jJTask.getDescription() +  " "  + jJTask.getCreationDate() +  " "  + jJTask.getUpdatedDate());
            if (jJTaskStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJTask);
            }
        }
        return suggestions;
    }
    
    public List<JJTask> JJTaskBean.getSelectedTasks() {
        return selectedTasks;
    }
    
    public void JJTaskBean.setSelectedTasks(List<JJTask> selectedTasks) {
        if (selectedTasks != null) {
            JJTask_.setTasks(new HashSet<JJTask>(selectedTasks));
        }
        this.selectedTasks = selectedTasks;
    }
    
    public List<JJTask> JJTaskBean.getSelectedAfterTasks() {
        return selectedAfterTasks;
    }
    
    public void JJTaskBean.setSelectedAfterTasks(List<JJTask> selectedAfterTasks) {
        if (selectedAfterTasks != null) {
            JJTask_.setAfterTasks(new HashSet<JJTask>(selectedAfterTasks));
        }
        this.selectedAfterTasks = selectedAfterTasks;
    }
    
    public List<JJBuild> JJTaskBean.getSelectedBuilds() {
        return selectedBuilds;
    }
    
    public void JJTaskBean.setSelectedBuilds(List<JJBuild> selectedBuilds) {
        if (selectedBuilds != null) {
            JJTask_.setBuilds(new HashSet<JJBuild>(selectedBuilds));
        }
        this.selectedBuilds = selectedBuilds;
    }
    
    public List<JJTask> JJTaskBean.getSelectedBeforeTasks() {
        return selectedBeforeTasks;
    }
    
    public void JJTaskBean.setSelectedBeforeTasks(List<JJTask> selectedBeforeTasks) {
        if (selectedBeforeTasks != null) {
            JJTask_.setBeforeTasks(new HashSet<JJTask>(selectedBeforeTasks));
        }
        this.selectedBeforeTasks = selectedBeforeTasks;
    }
    
    public String JJTaskBean.onEdit() {
        if (JJTask_ != null && JJTask_.getTasks() != null) {
            selectedTasks = new ArrayList<JJTask>(JJTask_.getTasks());
        }
        if (JJTask_ != null && JJTask_.getAfterTasks() != null) {
            selectedAfterTasks = new ArrayList<JJTask>(JJTask_.getAfterTasks());
        }
        if (JJTask_ != null && JJTask_.getBuilds() != null) {
            selectedBuilds = new ArrayList<JJBuild>(JJTask_.getBuilds());
        }
        if (JJTask_ != null && JJTask_.getBeforeTasks() != null) {
            selectedBeforeTasks = new ArrayList<JJTask>(JJTask_.getBeforeTasks());
        }
        return null;
    }
    
    public boolean JJTaskBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJTaskBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJTaskBean.displayList() {
        createDialogVisible = false;
        findAllJJTasks();
        return "JJTask_";
    }
    
    public String JJTaskBean.displayCreateDialog() {
        JJTask_ = new JJTask();
        createDialogVisible = true;
        return "JJTask_";
    }
    
    public String JJTaskBean.persist() {
        String message = "";
        if (JJTask_.getId() != null) {
            jJTaskService.updateJJTask(JJTask_);
            message = "message_successfully_updated";
        } else {
            jJTaskService.saveJJTask(JJTask_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJTask");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJTasks();
    }
    
    public String JJTaskBean.delete() {
        jJTaskService.deleteJJTask(JJTask_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJTask");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJTasks();
    }
    
    public void JJTaskBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

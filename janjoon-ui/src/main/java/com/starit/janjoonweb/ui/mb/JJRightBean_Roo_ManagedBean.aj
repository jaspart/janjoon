// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.starit.janjoonweb.ui.mb;

import com.starit.janjoonweb.domain.JJCategory;
import com.starit.janjoonweb.domain.JJCategoryService;
import com.starit.janjoonweb.domain.JJProfile;
import com.starit.janjoonweb.domain.JJProfileService;
import com.starit.janjoonweb.domain.JJRight;
import com.starit.janjoonweb.domain.JJRightService;
import com.starit.janjoonweb.ui.mb.JJRightBean;
import com.starit.janjoonweb.ui.mb.converter.JJCategoryConverter;
import com.starit.janjoonweb.ui.mb.converter.JJProfileConverter;
import com.starit.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJRightBean_Roo_ManagedBean {
    
    declare @type: JJRightBean: @ManagedBean(name = "jJRightBean");
    
    declare @type: JJRightBean: @SessionScoped;
    
    @Autowired
    JJRightService JJRightBean.jJRightService;
    
    @Autowired
    JJCategoryService JJRightBean.jJCategoryService;
    
    @Autowired
    JJProfileService JJRightBean.jJProfileService;
    
    private String JJRightBean.name = "JJRights";
    
    private JJRight JJRightBean.JJRight_;
    
    private List<JJRight> JJRightBean.allJJRights;
    
    private boolean JJRightBean.dataVisible = false;
    
    private List<String> JJRightBean.columns;
    
    private HtmlPanelGrid JJRightBean.createPanelGrid;
    
    private HtmlPanelGrid JJRightBean.editPanelGrid;
    
    private HtmlPanelGrid JJRightBean.viewPanelGrid;
    
    private boolean JJRightBean.createDialogVisible = false;
    
    @PostConstruct
    public void JJRightBean.init() {
        columns = new ArrayList<String>();
        columns.add("objet");
    }
    
    public String JJRightBean.getName() {
        return name;
    }
    
    public List<String> JJRightBean.getColumns() {
        return columns;
    }
    
    public List<JJRight> JJRightBean.getAllJJRights() {
        return allJJRights;
    }
    
    public void JJRightBean.setAllJJRights(List<JJRight> allJJRights) {
        this.allJJRights = allJJRights;
    }
    
    public String JJRightBean.findAllJJRights() {
        allJJRights = jJRightService.findAllJJRights();
        dataVisible = !allJJRights.isEmpty();
        return null;
    }
    
    public boolean JJRightBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJRightBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJRightBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJRightBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJRightBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJRightBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJRightBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJRightBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJRightBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel objetCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        objetCreateOutput.setFor("objetCreateInput");
        objetCreateOutput.setId("objetCreateOutput");
        objetCreateOutput.setValue("Objet:");
        htmlPanelGrid.getChildren().add(objetCreateOutput);
        
        InputText objetCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        objetCreateInput.setId("objetCreateInput");
        objetCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.objet}", String.class));
        LengthValidator objetCreateInputValidator = new LengthValidator();
        objetCreateInputValidator.setMaximum(25);
        objetCreateInput.addValidator(objetCreateInputValidator);
        objetCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(objetCreateInput);
        
        Message objetCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        objetCreateInputMessage.setId("objetCreateInputMessage");
        objetCreateInputMessage.setFor("objetCreateInput");
        objetCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(objetCreateInputMessage);
        
        OutputLabel rCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        rCreateOutput.setFor("rCreateInput");
        rCreateOutput.setId("rCreateOutput");
        rCreateOutput.setValue("R:");
        htmlPanelGrid.getChildren().add(rCreateOutput);
        
        SelectBooleanCheckbox rCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        rCreateInput.setId("rCreateInput");
        rCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.r}", Boolean.class));
        rCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(rCreateInput);
        
        Message rCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        rCreateInputMessage.setId("rCreateInputMessage");
        rCreateInputMessage.setFor("rCreateInput");
        rCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(rCreateInputMessage);
        
        OutputLabel wCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        wCreateOutput.setFor("wCreateInput");
        wCreateOutput.setId("wCreateOutput");
        wCreateOutput.setValue("W:");
        htmlPanelGrid.getChildren().add(wCreateOutput);
        
        SelectBooleanCheckbox wCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        wCreateInput.setId("wCreateInput");
        wCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.w}", Boolean.class));
        wCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(wCreateInput);
        
        Message wCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        wCreateInputMessage.setId("wCreateInputMessage");
        wCreateInputMessage.setFor("wCreateInput");
        wCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(wCreateInputMessage);
        
        OutputLabel xCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        xCreateOutput.setFor("xCreateInput");
        xCreateOutput.setId("xCreateOutput");
        xCreateOutput.setValue("X:");
        htmlPanelGrid.getChildren().add(xCreateOutput);
        
        SelectBooleanCheckbox xCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        xCreateInput.setId("xCreateInput");
        xCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.x}", Boolean.class));
        xCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(xCreateInput);
        
        Message xCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        xCreateInputMessage.setId("xCreateInputMessage");
        xCreateInputMessage.setFor("xCreateInput");
        xCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(xCreateInputMessage);
        
        OutputLabel categoryCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        categoryCreateOutput.setFor("categoryCreateInput");
        categoryCreateOutput.setId("categoryCreateOutput");
        categoryCreateOutput.setValue("Category:");
        htmlPanelGrid.getChildren().add(categoryCreateOutput);
        
        AutoComplete categoryCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoryCreateInput.setId("categoryCreateInput");
        categoryCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.category}", JJCategory.class));
        categoryCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRightBean.completeCategory}", List.class, new Class[] { String.class }));
        categoryCreateInput.setDropdown(true);
        categoryCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "category", String.class));
        categoryCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{category.name} #{category.description} #{category.creationDate} #{category.updatedDate}", String.class));
        categoryCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{category}", JJCategory.class));
        categoryCreateInput.setConverter(new JJCategoryConverter());
        categoryCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoryCreateInput);
        
        Message categoryCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoryCreateInputMessage.setId("categoryCreateInputMessage");
        categoryCreateInputMessage.setFor("categoryCreateInput");
        categoryCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoryCreateInputMessage);
        
        OutputLabel profileCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        profileCreateOutput.setFor("profileCreateInput");
        profileCreateOutput.setId("profileCreateOutput");
        profileCreateOutput.setValue("Profile:");
        htmlPanelGrid.getChildren().add(profileCreateOutput);
        
        AutoComplete profileCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        profileCreateInput.setId("profileCreateInput");
        profileCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.profile}", JJProfile.class));
        profileCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRightBean.completeProfile}", List.class, new Class[] { String.class }));
        profileCreateInput.setDropdown(true);
        profileCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "profile", String.class));
        profileCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{profile.name}", String.class));
        profileCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{profile}", JJProfile.class));
        profileCreateInput.setConverter(new JJProfileConverter());
        profileCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(profileCreateInput);
        
        Message profileCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        profileCreateInputMessage.setId("profileCreateInputMessage");
        profileCreateInputMessage.setFor("profileCreateInput");
        profileCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(profileCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJRightBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel objetEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        objetEditOutput.setFor("objetEditInput");
        objetEditOutput.setId("objetEditOutput");
        objetEditOutput.setValue("Objet:");
        htmlPanelGrid.getChildren().add(objetEditOutput);
        
        InputText objetEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        objetEditInput.setId("objetEditInput");
        objetEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.objet}", String.class));
        LengthValidator objetEditInputValidator = new LengthValidator();
        objetEditInputValidator.setMaximum(25);
        objetEditInput.addValidator(objetEditInputValidator);
        objetEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(objetEditInput);
        
        Message objetEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        objetEditInputMessage.setId("objetEditInputMessage");
        objetEditInputMessage.setFor("objetEditInput");
        objetEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(objetEditInputMessage);
        
        OutputLabel rEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        rEditOutput.setFor("rEditInput");
        rEditOutput.setId("rEditOutput");
        rEditOutput.setValue("R:");
        htmlPanelGrid.getChildren().add(rEditOutput);
        
        SelectBooleanCheckbox rEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        rEditInput.setId("rEditInput");
        rEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.r}", Boolean.class));
        rEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(rEditInput);
        
        Message rEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        rEditInputMessage.setId("rEditInputMessage");
        rEditInputMessage.setFor("rEditInput");
        rEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(rEditInputMessage);
        
        OutputLabel wEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        wEditOutput.setFor("wEditInput");
        wEditOutput.setId("wEditOutput");
        wEditOutput.setValue("W:");
        htmlPanelGrid.getChildren().add(wEditOutput);
        
        SelectBooleanCheckbox wEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        wEditInput.setId("wEditInput");
        wEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.w}", Boolean.class));
        wEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(wEditInput);
        
        Message wEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        wEditInputMessage.setId("wEditInputMessage");
        wEditInputMessage.setFor("wEditInput");
        wEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(wEditInputMessage);
        
        OutputLabel xEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        xEditOutput.setFor("xEditInput");
        xEditOutput.setId("xEditOutput");
        xEditOutput.setValue("X:");
        htmlPanelGrid.getChildren().add(xEditOutput);
        
        SelectBooleanCheckbox xEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        xEditInput.setId("xEditInput");
        xEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.x}", Boolean.class));
        xEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(xEditInput);
        
        Message xEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        xEditInputMessage.setId("xEditInputMessage");
        xEditInputMessage.setFor("xEditInput");
        xEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(xEditInputMessage);
        
        OutputLabel categoryEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        categoryEditOutput.setFor("categoryEditInput");
        categoryEditOutput.setId("categoryEditOutput");
        categoryEditOutput.setValue("Category:");
        htmlPanelGrid.getChildren().add(categoryEditOutput);
        
        AutoComplete categoryEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoryEditInput.setId("categoryEditInput");
        categoryEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.category}", JJCategory.class));
        categoryEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRightBean.completeCategory}", List.class, new Class[] { String.class }));
        categoryEditInput.setDropdown(true);
        categoryEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "category", String.class));
        categoryEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{category.name} #{category.description} #{category.creationDate} #{category.updatedDate}", String.class));
        categoryEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{category}", JJCategory.class));
        categoryEditInput.setConverter(new JJCategoryConverter());
        categoryEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoryEditInput);
        
        Message categoryEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoryEditInputMessage.setId("categoryEditInputMessage");
        categoryEditInputMessage.setFor("categoryEditInput");
        categoryEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoryEditInputMessage);
        
        OutputLabel profileEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        profileEditOutput.setFor("profileEditInput");
        profileEditOutput.setId("profileEditOutput");
        profileEditOutput.setValue("Profile:");
        htmlPanelGrid.getChildren().add(profileEditOutput);
        
        AutoComplete profileEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        profileEditInput.setId("profileEditInput");
        profileEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.profile}", JJProfile.class));
        profileEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRightBean.completeProfile}", List.class, new Class[] { String.class }));
        profileEditInput.setDropdown(true);
        profileEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "profile", String.class));
        profileEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{profile.name}", String.class));
        profileEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{profile}", JJProfile.class));
        profileEditInput.setConverter(new JJProfileConverter());
        profileEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(profileEditInput);
        
        Message profileEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        profileEditInputMessage.setId("profileEditInputMessage");
        profileEditInputMessage.setFor("profileEditInput");
        profileEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(profileEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJRightBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText objetLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        objetLabel.setId("objetLabel");
        objetLabel.setValue("Objet:");
        htmlPanelGrid.getChildren().add(objetLabel);
        
        HtmlOutputText objetValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        objetValue.setId("objetValue");
        objetValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.objet}", String.class));
        htmlPanelGrid.getChildren().add(objetValue);
        
        HtmlOutputText rLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rLabel.setId("rLabel");
        rLabel.setValue("R:");
        htmlPanelGrid.getChildren().add(rLabel);
        
        HtmlOutputText rValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.r}", String.class));
        htmlPanelGrid.getChildren().add(rValue);
        
        HtmlOutputText wLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        wLabel.setId("wLabel");
        wLabel.setValue("W:");
        htmlPanelGrid.getChildren().add(wLabel);
        
        HtmlOutputText wValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        wValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.w}", String.class));
        htmlPanelGrid.getChildren().add(wValue);
        
        HtmlOutputText xLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        xLabel.setId("xLabel");
        xLabel.setValue("X:");
        htmlPanelGrid.getChildren().add(xLabel);
        
        HtmlOutputText xValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        xValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.x}", String.class));
        htmlPanelGrid.getChildren().add(xValue);
        
        HtmlOutputText categoryLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoryLabel.setId("categoryLabel");
        categoryLabel.setValue("Category:");
        htmlPanelGrid.getChildren().add(categoryLabel);
        
        HtmlOutputText categoryValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoryValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.category}", JJCategory.class));
        categoryValue.setConverter(new JJCategoryConverter());
        htmlPanelGrid.getChildren().add(categoryValue);
        
        HtmlOutputText profileLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        profileLabel.setId("profileLabel");
        profileLabel.setValue("Profile:");
        htmlPanelGrid.getChildren().add(profileLabel);
        
        HtmlOutputText profileValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        profileValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.profile}", JJProfile.class));
        profileValue.setConverter(new JJProfileConverter());
        htmlPanelGrid.getChildren().add(profileValue);
        
        return htmlPanelGrid;
    }
    
    public JJRight JJRightBean.getJJRight_() {
        if (JJRight_ == null) {
            JJRight_ = new JJRight();
        }
        return JJRight_;
    }
    
    public void JJRightBean.setJJRight_(JJRight JJRight_) {
        this.JJRight_ = JJRight_;
    }
    
    public List<JJCategory> JJRightBean.completeCategory(String query) {
        List<JJCategory> suggestions = new ArrayList<JJCategory>();
        for (JJCategory jJCategory : jJCategoryService.findAllJJCategorys()) {
            String jJCategoryStr = String.valueOf(jJCategory.getName() +  " "  + jJCategory.getDescription() +  " "  + jJCategory.getCreationDate() +  " "  + jJCategory.getUpdatedDate());
            if (jJCategoryStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJCategory);
            }
        }
        return suggestions;
    }
    
    public List<JJProfile> JJRightBean.completeProfile(String query) {
        List<JJProfile> suggestions = new ArrayList<JJProfile>();
        for (JJProfile jJProfile : jJProfileService.findAllJJProfiles()) {
            String jJProfileStr = String.valueOf(jJProfile.getName());
            if (jJProfileStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJProfile);
            }
        }
        return suggestions;
    }
    
    public String JJRightBean.onEdit() {
        return null;
    }
    
    public boolean JJRightBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJRightBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJRightBean.displayList() {
        createDialogVisible = false;
        findAllJJRights();
        return "JJRight_";
    }
    
    public String JJRightBean.displayCreateDialog() {
        JJRight_ = new JJRight();
        createDialogVisible = true;
        return "JJRight_";
    }
    
    public String JJRightBean.persist() {
        String message = "";
        if (JJRight_.getId() != null) {
            jJRightService.updateJJRight(JJRight_);
            message = "message_successfully_updated";
        } else {
            jJRightService.saveJJRight(JJRight_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJRight");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJRights();
    }
    
    public String JJRightBean.delete() {
        jJRightService.deleteJJRight(JJRight_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJRight");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJRights();
    }
    
    public void JJRightBean.reset() {
        JJRight_ = null;
        createDialogVisible = false;
    }
    
    public void JJRightBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

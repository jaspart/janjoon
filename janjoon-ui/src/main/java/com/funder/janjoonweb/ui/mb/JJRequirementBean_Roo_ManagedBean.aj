// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.funder.janjoonweb.ui.mb;

import com.funder.janjoonweb.domain.JJBug;
import com.funder.janjoonweb.domain.JJCategory;
import com.funder.janjoonweb.domain.JJCategoryService;
import com.funder.janjoonweb.domain.JJChapter;
import com.funder.janjoonweb.domain.JJChapterService;
import com.funder.janjoonweb.domain.JJContact;
import com.funder.janjoonweb.domain.JJContactService;
import com.funder.janjoonweb.domain.JJCriticity;
import com.funder.janjoonweb.domain.JJCriticityService;
import com.funder.janjoonweb.domain.JJImportance;
import com.funder.janjoonweb.domain.JJImportanceService;
import com.funder.janjoonweb.domain.JJMessage;
import com.funder.janjoonweb.domain.JJProject;
import com.funder.janjoonweb.domain.JJProjectService;
import com.funder.janjoonweb.domain.JJRequirement;
import com.funder.janjoonweb.domain.JJRequirementService;
import com.funder.janjoonweb.domain.JJStatus;
import com.funder.janjoonweb.domain.JJStatusService;
import com.funder.janjoonweb.domain.JJTask;
import com.funder.janjoonweb.domain.JJVersion;
import com.funder.janjoonweb.domain.JJVersionService;
import com.funder.janjoonweb.domain.reference.JJRelationship;
import com.funder.janjoonweb.ui.mb.JJRequirementBean;
import com.funder.janjoonweb.ui.mb.converter.JJCategoryConverter;
import com.funder.janjoonweb.ui.mb.converter.JJChapterConverter;
import com.funder.janjoonweb.ui.mb.converter.JJContactConverter;
import com.funder.janjoonweb.ui.mb.converter.JJCriticityConverter;
import com.funder.janjoonweb.ui.mb.converter.JJImportanceConverter;
import com.funder.janjoonweb.ui.mb.converter.JJProjectConverter;
import com.funder.janjoonweb.ui.mb.converter.JJRequirementConverter;
import com.funder.janjoonweb.ui.mb.converter.JJStatusConverter;
import com.funder.janjoonweb.ui.mb.converter.JJVersionConverter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJRequirementBean_Roo_ManagedBean {
    
    declare @type: JJRequirementBean: @ManagedBean(name = "jJRequirementBean");
    
    declare @type: JJRequirementBean: @SessionScoped;
    
    @Autowired
    JJRequirementService JJRequirementBean.jJRequirementService;
    
    @Autowired
    JJContactService JJRequirementBean.jJContactService;
    
    @Autowired
    JJProjectService JJRequirementBean.jJProjectService;
    
    @Autowired
    JJChapterService JJRequirementBean.jJChapterService;
    
    @Autowired
    JJVersionService JJRequirementBean.jJVersionService;
    
    @Autowired
    JJCategoryService JJRequirementBean.jJCategoryService;
    
    @Autowired
    JJCriticityService JJRequirementBean.jJCriticityService;
    
    @Autowired
    JJImportanceService JJRequirementBean.jJImportanceService;
    
    @Autowired
    JJStatusService JJRequirementBean.jJStatusService;
    
    private String JJRequirementBean.name = "JJRequirements";
    
    private JJRequirement JJRequirementBean.JJRequirement_;
    
    private List<JJRequirement> JJRequirementBean.allJJRequirements;
    
    private boolean JJRequirementBean.dataVisible = false;
    
    private List<String> JJRequirementBean.columns;
    
    private HtmlPanelGrid JJRequirementBean.createPanelGrid;
    
    private HtmlPanelGrid JJRequirementBean.editPanelGrid;
    
    private HtmlPanelGrid JJRequirementBean.viewPanelGrid;
    
    private boolean JJRequirementBean.createDialogVisible = false;
    
    private List<JJRequirement> JJRequirementBean.selectedRequirements;
    
    private List<JJBug> JJRequirementBean.selectedBugs;
    
    private List<JJTask> JJRequirementBean.selectedTasks;
    
    private List<JJContact> JJRequirementBean.selectedAssignedTos;
    
    private List<JJMessage> JJRequirementBean.selectedMessages;
    
    @PostConstruct
    public void JJRequirementBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
        columns.add("numero");
    }
    
    public String JJRequirementBean.getName() {
        return name;
    }
    
    public List<String> JJRequirementBean.getColumns() {
        return columns;
    }
    
    public List<JJRequirement> JJRequirementBean.getAllJJRequirements() {
        return allJJRequirements;
    }
    
    public void JJRequirementBean.setAllJJRequirements(List<JJRequirement> allJJRequirements) {
        this.allJJRequirements = allJJRequirements;
    }
    
    public String JJRequirementBean.findAllJJRequirements() {
        allJJRequirements = jJRequirementService.findAllJJRequirements();
        dataVisible = !allJJRequirements.isEmpty();
        return null;
    }
    
    public boolean JJRequirementBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJRequirementBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJRequirementBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJRequirementBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJRequirementBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJRequirementBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJRequirementBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJRequirementBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJRequirementBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name: * ");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMaximum(25);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        HtmlOutputText descriptionCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionCreateOutput.setId("descriptionCreateOutput");
        descriptionCreateOutput.setValue("Description: * ");
        htmlPanelGrid.getChildren().add(descriptionCreateOutput);
        
        InputTextarea descriptionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionCreateInput.setId("descriptionCreateInput");
        descriptionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.description}", String.class));
        LengthValidator descriptionCreateInputValidator = new LengthValidator();
        descriptionCreateInputValidator.setMaximum(250);
        descriptionCreateInput.addValidator(descriptionCreateInputValidator);
        descriptionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionCreateInput);
        
        Message descriptionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionCreateInputMessage.setId("descriptionCreateInputMessage");
        descriptionCreateInputMessage.setFor("descriptionCreateInput");
        descriptionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionCreateInputMessage);
        
        HtmlOutputText creationDateCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateCreateOutput.setId("creationDateCreateOutput");
        creationDateCreateOutput.setValue("Creation Date: * ");
        htmlPanelGrid.getChildren().add(creationDateCreateOutput);
        
        Calendar creationDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateCreateInput.setId("creationDateCreateInput");
        creationDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.creationDate}", Date.class));
        creationDateCreateInput.setNavigator(true);
        creationDateCreateInput.setEffect("slideDown");
        creationDateCreateInput.setPattern("dd/MM/yyyy");
        creationDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateCreateInput);
        
        Message creationDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateCreateInputMessage.setId("creationDateCreateInputMessage");
        creationDateCreateInputMessage.setFor("creationDateCreateInput");
        creationDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateCreateInputMessage);
        
        HtmlOutputText createdByCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.createdBy}", JJContact.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByCreateInput.setConverter(new JJContactConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        HtmlOutputText updatedDateCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateCreateOutput.setId("updatedDateCreateOutput");
        updatedDateCreateOutput.setValue("Updated Date:   ");
        htmlPanelGrid.getChildren().add(updatedDateCreateOutput);
        
        Calendar updatedDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateCreateInput.setId("updatedDateCreateInput");
        updatedDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.updatedDate}", Date.class));
        updatedDateCreateInput.setNavigator(true);
        updatedDateCreateInput.setEffect("slideDown");
        updatedDateCreateInput.setPattern("dd/MM/yyyy");
        updatedDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateCreateInput);
        
        Message updatedDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateCreateInputMessage.setId("updatedDateCreateInputMessage");
        updatedDateCreateInputMessage.setFor("updatedDateCreateInput");
        updatedDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateCreateInputMessage);
        
        HtmlOutputText updatedByCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByCreateOutput.setId("updatedByCreateOutput");
        updatedByCreateOutput.setValue("Updated By:   ");
        htmlPanelGrid.getChildren().add(updatedByCreateOutput);
        
        AutoComplete updatedByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByCreateInput.setId("updatedByCreateInput");
        updatedByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.updatedBy}", JJContact.class));
        updatedByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByCreateInput.setDropdown(true);
        updatedByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByCreateInput.setConverter(new JJContactConverter());
        updatedByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByCreateInput);
        
        Message updatedByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByCreateInputMessage.setId("updatedByCreateInputMessage");
        updatedByCreateInputMessage.setFor("updatedByCreateInput");
        updatedByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByCreateInputMessage);
        
        HtmlOutputText enabledCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledCreateOutput.setId("enabledCreateOutput");
        enabledCreateOutput.setValue("Enabled:   ");
        htmlPanelGrid.getChildren().add(enabledCreateOutput);
        
        SelectBooleanCheckbox enabledCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledCreateInput.setId("enabledCreateInput");
        enabledCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.enabled}", Boolean.class));
        enabledCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledCreateInput);
        
        Message enabledCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledCreateInputMessage.setId("enabledCreateInputMessage");
        enabledCreateInputMessage.setFor("enabledCreateInput");
        enabledCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledCreateInputMessage);
        
        HtmlOutputText numeroCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numeroCreateOutput.setId("numeroCreateOutput");
        numeroCreateOutput.setValue("Numero:   ");
        htmlPanelGrid.getChildren().add(numeroCreateOutput);
        
        Spinner numeroCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        numeroCreateInput.setId("numeroCreateInput");
        numeroCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.numero}", Integer.class));
        numeroCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(numeroCreateInput);
        
        Message numeroCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        numeroCreateInputMessage.setId("numeroCreateInputMessage");
        numeroCreateInputMessage.setFor("numeroCreateInput");
        numeroCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(numeroCreateInputMessage);
        
        HtmlOutputText projectCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectCreateOutput.setId("projectCreateOutput");
        projectCreateOutput.setValue("Project:   ");
        htmlPanelGrid.getChildren().add(projectCreateOutput);
        
        AutoComplete projectCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        projectCreateInput.setId("projectCreateInput");
        projectCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.project}", JJProject.class));
        projectCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeProject}", List.class, new Class[] { String.class }));
        projectCreateInput.setDropdown(true);
        projectCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "project", String.class));
        projectCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{project.name} #{project.description} #{project.creationDate} #{project.updatedDate}", String.class));
        projectCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{project}", JJProject.class));
        projectCreateInput.setConverter(new JJProjectConverter());
        projectCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(projectCreateInput);
        
        Message projectCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectCreateInputMessage.setId("projectCreateInputMessage");
        projectCreateInputMessage.setFor("projectCreateInput");
        projectCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectCreateInputMessage);
        
        HtmlOutputText startDateCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        startDateCreateOutput.setId("startDateCreateOutput");
        startDateCreateOutput.setValue("Start Date:   ");
        htmlPanelGrid.getChildren().add(startDateCreateOutput);
        
        Calendar startDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        startDateCreateInput.setId("startDateCreateInput");
        startDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.startDate}", Date.class));
        startDateCreateInput.setNavigator(true);
        startDateCreateInput.setEffect("slideDown");
        startDateCreateInput.setPattern("dd/MM/yyyy");
        startDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(startDateCreateInput);
        
        Message startDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        startDateCreateInputMessage.setId("startDateCreateInputMessage");
        startDateCreateInputMessage.setFor("startDateCreateInput");
        startDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(startDateCreateInputMessage);
        
        HtmlOutputText endDateCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endDateCreateOutput.setId("endDateCreateOutput");
        endDateCreateOutput.setValue("End Date:   ");
        htmlPanelGrid.getChildren().add(endDateCreateOutput);
        
        Calendar endDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        endDateCreateInput.setId("endDateCreateInput");
        endDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.endDate}", Date.class));
        endDateCreateInput.setNavigator(true);
        endDateCreateInput.setEffect("slideDown");
        endDateCreateInput.setPattern("dd/MM/yyyy");
        endDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(endDateCreateInput);
        
        Message endDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        endDateCreateInputMessage.setId("endDateCreateInputMessage");
        endDateCreateInputMessage.setFor("endDateCreateInput");
        endDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(endDateCreateInputMessage);
        
        HtmlOutputText chapterCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        chapterCreateOutput.setId("chapterCreateOutput");
        chapterCreateOutput.setValue("Chapter:   ");
        htmlPanelGrid.getChildren().add(chapterCreateOutput);
        
        AutoComplete chapterCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        chapterCreateInput.setId("chapterCreateInput");
        chapterCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.chapter}", JJChapter.class));
        chapterCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeChapter}", List.class, new Class[] { String.class }));
        chapterCreateInput.setDropdown(true);
        chapterCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "chapter", String.class));
        chapterCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{chapter.name} #{chapter.description} #{chapter.creationDate} #{chapter.updatedDate}", String.class));
        chapterCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{chapter}", JJChapter.class));
        chapterCreateInput.setConverter(new JJChapterConverter());
        chapterCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(chapterCreateInput);
        
        Message chapterCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        chapterCreateInputMessage.setId("chapterCreateInputMessage");
        chapterCreateInputMessage.setFor("chapterCreateInput");
        chapterCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(chapterCreateInputMessage);
        
        HtmlOutputText jjversionCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        jjversionCreateOutput.setId("jjversionCreateOutput");
        jjversionCreateOutput.setValue("Jjversion:   ");
        htmlPanelGrid.getChildren().add(jjversionCreateOutput);
        
        AutoComplete jjversionCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        jjversionCreateInput.setId("jjversionCreateInput");
        jjversionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.jjversion}", JJVersion.class));
        jjversionCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeJjversion}", List.class, new Class[] { String.class }));
        jjversionCreateInput.setDropdown(true);
        jjversionCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jjversion", String.class));
        jjversionCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jjversion.name} #{jjversion.description} #{jjversion.creationDate} #{jjversion.updatedDate}", String.class));
        jjversionCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jjversion}", JJVersion.class));
        jjversionCreateInput.setConverter(new JJVersionConverter());
        jjversionCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(jjversionCreateInput);
        
        Message jjversionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        jjversionCreateInputMessage.setId("jjversionCreateInputMessage");
        jjversionCreateInputMessage.setFor("jjversionCreateInput");
        jjversionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(jjversionCreateInputMessage);
        
        HtmlOutputText categoryCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoryCreateOutput.setId("categoryCreateOutput");
        categoryCreateOutput.setValue("Category:   ");
        htmlPanelGrid.getChildren().add(categoryCreateOutput);
        
        AutoComplete categoryCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoryCreateInput.setId("categoryCreateInput");
        categoryCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.category}", JJCategory.class));
        categoryCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeCategory}", List.class, new Class[] { String.class }));
        categoryCreateInput.setDropdown(true);
        categoryCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "category", String.class));
        categoryCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{category.name} #{category.description} #{category.creationDate} #{category.updatedDate}", String.class));
        categoryCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{category}", JJCategory.class));
        categoryCreateInput.setConverter(new JJCategoryConverter());
        categoryCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoryCreateInput);
        
        Message categoryCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoryCreateInputMessage.setId("categoryCreateInputMessage");
        categoryCreateInputMessage.setFor("categoryCreateInput");
        categoryCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoryCreateInputMessage);
        
        HtmlOutputText criticityCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        criticityCreateOutput.setId("criticityCreateOutput");
        criticityCreateOutput.setValue("Criticity:   ");
        htmlPanelGrid.getChildren().add(criticityCreateOutput);
        
        AutoComplete criticityCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        criticityCreateInput.setId("criticityCreateInput");
        criticityCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.criticity}", JJCriticity.class));
        criticityCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeCriticity}", List.class, new Class[] { String.class }));
        criticityCreateInput.setDropdown(true);
        criticityCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "criticity", String.class));
        criticityCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{criticity.name} #{criticity.description} #{criticity.creationDate} #{criticity.updatedDate}", String.class));
        criticityCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{criticity}", JJCriticity.class));
        criticityCreateInput.setConverter(new JJCriticityConverter());
        criticityCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(criticityCreateInput);
        
        Message criticityCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        criticityCreateInputMessage.setId("criticityCreateInputMessage");
        criticityCreateInputMessage.setFor("criticityCreateInput");
        criticityCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(criticityCreateInputMessage);
        
        HtmlOutputText importanceCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        importanceCreateOutput.setId("importanceCreateOutput");
        importanceCreateOutput.setValue("Importance:   ");
        htmlPanelGrid.getChildren().add(importanceCreateOutput);
        
        AutoComplete importanceCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        importanceCreateInput.setId("importanceCreateInput");
        importanceCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.importance}", JJImportance.class));
        importanceCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeImportance}", List.class, new Class[] { String.class }));
        importanceCreateInput.setDropdown(true);
        importanceCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "importance", String.class));
        importanceCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{importance.name} #{importance.description} #{importance.creationDate} #{importance.updatedDate}", String.class));
        importanceCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{importance}", JJImportance.class));
        importanceCreateInput.setConverter(new JJImportanceConverter());
        importanceCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(importanceCreateInput);
        
        Message importanceCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        importanceCreateInputMessage.setId("importanceCreateInputMessage");
        importanceCreateInputMessage.setFor("importanceCreateInput");
        importanceCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(importanceCreateInputMessage);
        
        HtmlOutputText statusCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusCreateOutput.setId("statusCreateOutput");
        statusCreateOutput.setValue("Status:   ");
        htmlPanelGrid.getChildren().add(statusCreateOutput);
        
        AutoComplete statusCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        statusCreateInput.setId("statusCreateInput");
        statusCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.status}", JJStatus.class));
        statusCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeStatus}", List.class, new Class[] { String.class }));
        statusCreateInput.setDropdown(true);
        statusCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "status", String.class));
        statusCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{status.name} #{status.description} #{status.creationDate} #{status.updatedDate}", String.class));
        statusCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{status}", JJStatus.class));
        statusCreateInput.setConverter(new JJStatusConverter());
        statusCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(statusCreateInput);
        
        Message statusCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusCreateInputMessage.setId("statusCreateInputMessage");
        statusCreateInputMessage.setFor("statusCreateInput");
        statusCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusCreateInputMessage);
        
        HtmlOutputText impactCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        impactCreateOutput.setId("impactCreateOutput");
        impactCreateOutput.setValue("Impact: * ");
        htmlPanelGrid.getChildren().add(impactCreateOutput);
        
        InputTextarea impactCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        impactCreateInput.setId("impactCreateInput");
        impactCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.impact}", String.class));
        LengthValidator impactCreateInputValidator = new LengthValidator();
        impactCreateInputValidator.setMaximum(100);
        impactCreateInput.addValidator(impactCreateInputValidator);
        impactCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(impactCreateInput);
        
        Message impactCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        impactCreateInputMessage.setId("impactCreateInputMessage");
        impactCreateInputMessage.setFor("impactCreateInput");
        impactCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(impactCreateInputMessage);
        
        HtmlOutputText relationCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        relationCreateOutput.setId("relationCreateOutput");
        relationCreateOutput.setValue("Relation:   ");
        htmlPanelGrid.getChildren().add(relationCreateOutput);
        
        AutoComplete relationCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        relationCreateInput.setId("relationCreateInput");
        relationCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.relation}", JJRelationship.class));
        relationCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeRelation}", List.class, new Class[] { String.class }));
        relationCreateInput.setDropdown(true);
        relationCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(relationCreateInput);
        
        Message relationCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        relationCreateInputMessage.setId("relationCreateInputMessage");
        relationCreateInputMessage.setFor("relationCreateInput");
        relationCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(relationCreateInputMessage);
        
        HtmlOutputText requirementUpCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementUpCreateOutput.setId("requirementUpCreateOutput");
        requirementUpCreateOutput.setValue("Requirement Up:   ");
        htmlPanelGrid.getChildren().add(requirementUpCreateOutput);
        
        AutoComplete requirementUpCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        requirementUpCreateInput.setId("requirementUpCreateInput");
        requirementUpCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.requirementUp}", JJRequirement.class));
        requirementUpCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeRequirementUp}", List.class, new Class[] { String.class }));
        requirementUpCreateInput.setDropdown(true);
        requirementUpCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "requirementUp", String.class));
        requirementUpCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{requirementUp.name} #{requirementUp.description} #{requirementUp.creationDate} #{requirementUp.updatedDate}", String.class));
        requirementUpCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{requirementUp}", JJRequirement.class));
        requirementUpCreateInput.setConverter(new JJRequirementConverter());
        requirementUpCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(requirementUpCreateInput);
        
        Message requirementUpCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementUpCreateInputMessage.setId("requirementUpCreateInputMessage");
        requirementUpCreateInputMessage.setFor("requirementUpCreateInput");
        requirementUpCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementUpCreateInputMessage);
        
        HtmlOutputText requirementsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementsCreateOutput.setId("requirementsCreateOutput");
        requirementsCreateOutput.setValue("Requirements:   ");
        htmlPanelGrid.getChildren().add(requirementsCreateOutput);
        
        HtmlOutputText requirementsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementsCreateInput.setId("requirementsCreateInput");
        requirementsCreateInput.setValue("This relationship is managed from the JJRequirement side");
        htmlPanelGrid.getChildren().add(requirementsCreateInput);
        
        Message requirementsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementsCreateInputMessage.setId("requirementsCreateInputMessage");
        requirementsCreateInputMessage.setFor("requirementsCreateInput");
        requirementsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementsCreateInputMessage);
        
        HtmlOutputText bugsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugsCreateOutput.setId("bugsCreateOutput");
        bugsCreateOutput.setValue("Bugs:   ");
        htmlPanelGrid.getChildren().add(bugsCreateOutput);
        
        HtmlOutputText bugsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugsCreateInput.setId("bugsCreateInput");
        bugsCreateInput.setValue("This relationship is managed from the JJBug side");
        htmlPanelGrid.getChildren().add(bugsCreateInput);
        
        Message bugsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bugsCreateInputMessage.setId("bugsCreateInputMessage");
        bugsCreateInputMessage.setFor("bugsCreateInput");
        bugsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bugsCreateInputMessage);
        
        HtmlOutputText tasksCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksCreateOutput.setId("tasksCreateOutput");
        tasksCreateOutput.setValue("Tasks:   ");
        htmlPanelGrid.getChildren().add(tasksCreateOutput);
        
        HtmlOutputText tasksCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksCreateInput.setId("tasksCreateInput");
        tasksCreateInput.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(tasksCreateInput);
        
        Message tasksCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tasksCreateInputMessage.setId("tasksCreateInputMessage");
        tasksCreateInputMessage.setFor("tasksCreateInput");
        tasksCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tasksCreateInputMessage);
        
        HtmlOutputText assignedTosCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedTosCreateOutput.setId("assignedTosCreateOutput");
        assignedTosCreateOutput.setValue("Assigned Tos:   ");
        htmlPanelGrid.getChildren().add(assignedTosCreateOutput);
        
        HtmlOutputText assignedTosCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedTosCreateInput.setId("assignedTosCreateInput");
        assignedTosCreateInput.setValue("This relationship is managed from the JJContact side");
        htmlPanelGrid.getChildren().add(assignedTosCreateInput);
        
        Message assignedTosCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        assignedTosCreateInputMessage.setId("assignedTosCreateInputMessage");
        assignedTosCreateInputMessage.setFor("assignedTosCreateInput");
        assignedTosCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(assignedTosCreateInputMessage);
        
        HtmlOutputText messagesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesCreateOutput.setId("messagesCreateOutput");
        messagesCreateOutput.setValue("Messages:   ");
        htmlPanelGrid.getChildren().add(messagesCreateOutput);
        
        HtmlOutputText messagesCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesCreateInput.setId("messagesCreateInput");
        messagesCreateInput.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesCreateInput);
        
        Message messagesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messagesCreateInputMessage.setId("messagesCreateInputMessage");
        messagesCreateInputMessage.setFor("messagesCreateInput");
        messagesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messagesCreateInputMessage);
        
        HtmlOutputText noteCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        noteCreateOutput.setId("noteCreateOutput");
        noteCreateOutput.setValue("Note: * ");
        htmlPanelGrid.getChildren().add(noteCreateOutput);
        
        InputTextarea noteCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        noteCreateInput.setId("noteCreateInput");
        noteCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.note}", String.class));
        LengthValidator noteCreateInputValidator = new LengthValidator();
        noteCreateInputValidator.setMaximum(250);
        noteCreateInput.addValidator(noteCreateInputValidator);
        noteCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(noteCreateInput);
        
        Message noteCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        noteCreateInputMessage.setId("noteCreateInputMessage");
        noteCreateInputMessage.setFor("noteCreateInput");
        noteCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(noteCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJRequirementBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name: * ");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMaximum(25);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        HtmlOutputText descriptionEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionEditOutput.setId("descriptionEditOutput");
        descriptionEditOutput.setValue("Description: * ");
        htmlPanelGrid.getChildren().add(descriptionEditOutput);
        
        InputTextarea descriptionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionEditInput.setId("descriptionEditInput");
        descriptionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.description}", String.class));
        LengthValidator descriptionEditInputValidator = new LengthValidator();
        descriptionEditInputValidator.setMaximum(250);
        descriptionEditInput.addValidator(descriptionEditInputValidator);
        descriptionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionEditInput);
        
        Message descriptionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionEditInputMessage.setId("descriptionEditInputMessage");
        descriptionEditInputMessage.setFor("descriptionEditInput");
        descriptionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionEditInputMessage);
        
        HtmlOutputText creationDateEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateEditOutput.setId("creationDateEditOutput");
        creationDateEditOutput.setValue("Creation Date: * ");
        htmlPanelGrid.getChildren().add(creationDateEditOutput);
        
        Calendar creationDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateEditInput.setId("creationDateEditInput");
        creationDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.creationDate}", Date.class));
        creationDateEditInput.setNavigator(true);
        creationDateEditInput.setEffect("slideDown");
        creationDateEditInput.setPattern("dd/MM/yyyy");
        creationDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateEditInput);
        
        Message creationDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateEditInputMessage.setId("creationDateEditInputMessage");
        creationDateEditInputMessage.setFor("creationDateEditInput");
        creationDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateEditInputMessage);
        
        HtmlOutputText createdByEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.createdBy}", JJContact.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByEditInput.setConverter(new JJContactConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        HtmlOutputText updatedDateEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateEditOutput.setId("updatedDateEditOutput");
        updatedDateEditOutput.setValue("Updated Date:   ");
        htmlPanelGrid.getChildren().add(updatedDateEditOutput);
        
        Calendar updatedDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateEditInput.setId("updatedDateEditInput");
        updatedDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.updatedDate}", Date.class));
        updatedDateEditInput.setNavigator(true);
        updatedDateEditInput.setEffect("slideDown");
        updatedDateEditInput.setPattern("dd/MM/yyyy");
        updatedDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateEditInput);
        
        Message updatedDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateEditInputMessage.setId("updatedDateEditInputMessage");
        updatedDateEditInputMessage.setFor("updatedDateEditInput");
        updatedDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateEditInputMessage);
        
        HtmlOutputText updatedByEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByEditOutput.setId("updatedByEditOutput");
        updatedByEditOutput.setValue("Updated By:   ");
        htmlPanelGrid.getChildren().add(updatedByEditOutput);
        
        AutoComplete updatedByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByEditInput.setId("updatedByEditInput");
        updatedByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.updatedBy}", JJContact.class));
        updatedByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByEditInput.setDropdown(true);
        updatedByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByEditInput.setConverter(new JJContactConverter());
        updatedByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByEditInput);
        
        Message updatedByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByEditInputMessage.setId("updatedByEditInputMessage");
        updatedByEditInputMessage.setFor("updatedByEditInput");
        updatedByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByEditInputMessage);
        
        HtmlOutputText enabledEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledEditOutput.setId("enabledEditOutput");
        enabledEditOutput.setValue("Enabled:   ");
        htmlPanelGrid.getChildren().add(enabledEditOutput);
        
        SelectBooleanCheckbox enabledEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledEditInput.setId("enabledEditInput");
        enabledEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.enabled}", Boolean.class));
        enabledEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledEditInput);
        
        Message enabledEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledEditInputMessage.setId("enabledEditInputMessage");
        enabledEditInputMessage.setFor("enabledEditInput");
        enabledEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledEditInputMessage);
        
        HtmlOutputText numeroEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numeroEditOutput.setId("numeroEditOutput");
        numeroEditOutput.setValue("Numero:   ");
        htmlPanelGrid.getChildren().add(numeroEditOutput);
        
        Spinner numeroEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        numeroEditInput.setId("numeroEditInput");
        numeroEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.numero}", Integer.class));
        numeroEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(numeroEditInput);
        
        Message numeroEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        numeroEditInputMessage.setId("numeroEditInputMessage");
        numeroEditInputMessage.setFor("numeroEditInput");
        numeroEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(numeroEditInputMessage);
        
        HtmlOutputText projectEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectEditOutput.setId("projectEditOutput");
        projectEditOutput.setValue("Project:   ");
        htmlPanelGrid.getChildren().add(projectEditOutput);
        
        AutoComplete projectEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        projectEditInput.setId("projectEditInput");
        projectEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.project}", JJProject.class));
        projectEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeProject}", List.class, new Class[] { String.class }));
        projectEditInput.setDropdown(true);
        projectEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "project", String.class));
        projectEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{project.name} #{project.description} #{project.creationDate} #{project.updatedDate}", String.class));
        projectEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{project}", JJProject.class));
        projectEditInput.setConverter(new JJProjectConverter());
        projectEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(projectEditInput);
        
        Message projectEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectEditInputMessage.setId("projectEditInputMessage");
        projectEditInputMessage.setFor("projectEditInput");
        projectEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectEditInputMessage);
        
        HtmlOutputText startDateEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        startDateEditOutput.setId("startDateEditOutput");
        startDateEditOutput.setValue("Start Date:   ");
        htmlPanelGrid.getChildren().add(startDateEditOutput);
        
        Calendar startDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        startDateEditInput.setId("startDateEditInput");
        startDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.startDate}", Date.class));
        startDateEditInput.setNavigator(true);
        startDateEditInput.setEffect("slideDown");
        startDateEditInput.setPattern("dd/MM/yyyy");
        startDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(startDateEditInput);
        
        Message startDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        startDateEditInputMessage.setId("startDateEditInputMessage");
        startDateEditInputMessage.setFor("startDateEditInput");
        startDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(startDateEditInputMessage);
        
        HtmlOutputText endDateEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endDateEditOutput.setId("endDateEditOutput");
        endDateEditOutput.setValue("End Date:   ");
        htmlPanelGrid.getChildren().add(endDateEditOutput);
        
        Calendar endDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        endDateEditInput.setId("endDateEditInput");
        endDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.endDate}", Date.class));
        endDateEditInput.setNavigator(true);
        endDateEditInput.setEffect("slideDown");
        endDateEditInput.setPattern("dd/MM/yyyy");
        endDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(endDateEditInput);
        
        Message endDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        endDateEditInputMessage.setId("endDateEditInputMessage");
        endDateEditInputMessage.setFor("endDateEditInput");
        endDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(endDateEditInputMessage);
        
        HtmlOutputText chapterEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        chapterEditOutput.setId("chapterEditOutput");
        chapterEditOutput.setValue("Chapter:   ");
        htmlPanelGrid.getChildren().add(chapterEditOutput);
        
        AutoComplete chapterEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        chapterEditInput.setId("chapterEditInput");
        chapterEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.chapter}", JJChapter.class));
        chapterEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeChapter}", List.class, new Class[] { String.class }));
        chapterEditInput.setDropdown(true);
        chapterEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "chapter", String.class));
        chapterEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{chapter.name} #{chapter.description} #{chapter.creationDate} #{chapter.updatedDate}", String.class));
        chapterEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{chapter}", JJChapter.class));
        chapterEditInput.setConverter(new JJChapterConverter());
        chapterEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(chapterEditInput);
        
        Message chapterEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        chapterEditInputMessage.setId("chapterEditInputMessage");
        chapterEditInputMessage.setFor("chapterEditInput");
        chapterEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(chapterEditInputMessage);
        
        HtmlOutputText jjversionEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        jjversionEditOutput.setId("jjversionEditOutput");
        jjversionEditOutput.setValue("Jjversion:   ");
        htmlPanelGrid.getChildren().add(jjversionEditOutput);
        
        AutoComplete jjversionEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        jjversionEditInput.setId("jjversionEditInput");
        jjversionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.jjversion}", JJVersion.class));
        jjversionEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeJjversion}", List.class, new Class[] { String.class }));
        jjversionEditInput.setDropdown(true);
        jjversionEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jjversion", String.class));
        jjversionEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jjversion.name} #{jjversion.description} #{jjversion.creationDate} #{jjversion.updatedDate}", String.class));
        jjversionEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jjversion}", JJVersion.class));
        jjversionEditInput.setConverter(new JJVersionConverter());
        jjversionEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(jjversionEditInput);
        
        Message jjversionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        jjversionEditInputMessage.setId("jjversionEditInputMessage");
        jjversionEditInputMessage.setFor("jjversionEditInput");
        jjversionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(jjversionEditInputMessage);
        
        HtmlOutputText categoryEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoryEditOutput.setId("categoryEditOutput");
        categoryEditOutput.setValue("Category:   ");
        htmlPanelGrid.getChildren().add(categoryEditOutput);
        
        AutoComplete categoryEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoryEditInput.setId("categoryEditInput");
        categoryEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.category}", JJCategory.class));
        categoryEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeCategory}", List.class, new Class[] { String.class }));
        categoryEditInput.setDropdown(true);
        categoryEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "category", String.class));
        categoryEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{category.name} #{category.description} #{category.creationDate} #{category.updatedDate}", String.class));
        categoryEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{category}", JJCategory.class));
        categoryEditInput.setConverter(new JJCategoryConverter());
        categoryEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoryEditInput);
        
        Message categoryEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoryEditInputMessage.setId("categoryEditInputMessage");
        categoryEditInputMessage.setFor("categoryEditInput");
        categoryEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoryEditInputMessage);
        
        HtmlOutputText criticityEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        criticityEditOutput.setId("criticityEditOutput");
        criticityEditOutput.setValue("Criticity:   ");
        htmlPanelGrid.getChildren().add(criticityEditOutput);
        
        AutoComplete criticityEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        criticityEditInput.setId("criticityEditInput");
        criticityEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.criticity}", JJCriticity.class));
        criticityEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeCriticity}", List.class, new Class[] { String.class }));
        criticityEditInput.setDropdown(true);
        criticityEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "criticity", String.class));
        criticityEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{criticity.name} #{criticity.description} #{criticity.creationDate} #{criticity.updatedDate}", String.class));
        criticityEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{criticity}", JJCriticity.class));
        criticityEditInput.setConverter(new JJCriticityConverter());
        criticityEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(criticityEditInput);
        
        Message criticityEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        criticityEditInputMessage.setId("criticityEditInputMessage");
        criticityEditInputMessage.setFor("criticityEditInput");
        criticityEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(criticityEditInputMessage);
        
        HtmlOutputText importanceEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        importanceEditOutput.setId("importanceEditOutput");
        importanceEditOutput.setValue("Importance:   ");
        htmlPanelGrid.getChildren().add(importanceEditOutput);
        
        AutoComplete importanceEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        importanceEditInput.setId("importanceEditInput");
        importanceEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.importance}", JJImportance.class));
        importanceEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeImportance}", List.class, new Class[] { String.class }));
        importanceEditInput.setDropdown(true);
        importanceEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "importance", String.class));
        importanceEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{importance.name} #{importance.description} #{importance.creationDate} #{importance.updatedDate}", String.class));
        importanceEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{importance}", JJImportance.class));
        importanceEditInput.setConverter(new JJImportanceConverter());
        importanceEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(importanceEditInput);
        
        Message importanceEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        importanceEditInputMessage.setId("importanceEditInputMessage");
        importanceEditInputMessage.setFor("importanceEditInput");
        importanceEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(importanceEditInputMessage);
        
        HtmlOutputText statusEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusEditOutput.setId("statusEditOutput");
        statusEditOutput.setValue("Status:   ");
        htmlPanelGrid.getChildren().add(statusEditOutput);
        
        AutoComplete statusEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        statusEditInput.setId("statusEditInput");
        statusEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.status}", JJStatus.class));
        statusEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeStatus}", List.class, new Class[] { String.class }));
        statusEditInput.setDropdown(true);
        statusEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "status", String.class));
        statusEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{status.name} #{status.description} #{status.creationDate} #{status.updatedDate}", String.class));
        statusEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{status}", JJStatus.class));
        statusEditInput.setConverter(new JJStatusConverter());
        statusEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(statusEditInput);
        
        Message statusEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusEditInputMessage.setId("statusEditInputMessage");
        statusEditInputMessage.setFor("statusEditInput");
        statusEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusEditInputMessage);
        
        HtmlOutputText impactEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        impactEditOutput.setId("impactEditOutput");
        impactEditOutput.setValue("Impact: * ");
        htmlPanelGrid.getChildren().add(impactEditOutput);
        
        InputTextarea impactEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        impactEditInput.setId("impactEditInput");
        impactEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.impact}", String.class));
        LengthValidator impactEditInputValidator = new LengthValidator();
        impactEditInputValidator.setMaximum(100);
        impactEditInput.addValidator(impactEditInputValidator);
        impactEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(impactEditInput);
        
        Message impactEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        impactEditInputMessage.setId("impactEditInputMessage");
        impactEditInputMessage.setFor("impactEditInput");
        impactEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(impactEditInputMessage);
        
        HtmlOutputText relationEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        relationEditOutput.setId("relationEditOutput");
        relationEditOutput.setValue("Relation:   ");
        htmlPanelGrid.getChildren().add(relationEditOutput);
        
        AutoComplete relationEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        relationEditInput.setId("relationEditInput");
        relationEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.relation}", JJRelationship.class));
        relationEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeRelation}", List.class, new Class[] { String.class }));
        relationEditInput.setDropdown(true);
        relationEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(relationEditInput);
        
        Message relationEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        relationEditInputMessage.setId("relationEditInputMessage");
        relationEditInputMessage.setFor("relationEditInput");
        relationEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(relationEditInputMessage);
        
        HtmlOutputText requirementUpEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementUpEditOutput.setId("requirementUpEditOutput");
        requirementUpEditOutput.setValue("Requirement Up:   ");
        htmlPanelGrid.getChildren().add(requirementUpEditOutput);
        
        AutoComplete requirementUpEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        requirementUpEditInput.setId("requirementUpEditInput");
        requirementUpEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.requirementUp}", JJRequirement.class));
        requirementUpEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRequirementBean.completeRequirementUp}", List.class, new Class[] { String.class }));
        requirementUpEditInput.setDropdown(true);
        requirementUpEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "requirementUp", String.class));
        requirementUpEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{requirementUp.name} #{requirementUp.description} #{requirementUp.creationDate} #{requirementUp.updatedDate}", String.class));
        requirementUpEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{requirementUp}", JJRequirement.class));
        requirementUpEditInput.setConverter(new JJRequirementConverter());
        requirementUpEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(requirementUpEditInput);
        
        Message requirementUpEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementUpEditInputMessage.setId("requirementUpEditInputMessage");
        requirementUpEditInputMessage.setFor("requirementUpEditInput");
        requirementUpEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementUpEditInputMessage);
        
        HtmlOutputText requirementsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementsEditOutput.setId("requirementsEditOutput");
        requirementsEditOutput.setValue("Requirements:   ");
        htmlPanelGrid.getChildren().add(requirementsEditOutput);
        
        HtmlOutputText requirementsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementsEditInput.setId("requirementsEditInput");
        requirementsEditInput.setValue("This relationship is managed from the JJRequirement side");
        htmlPanelGrid.getChildren().add(requirementsEditInput);
        
        Message requirementsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementsEditInputMessage.setId("requirementsEditInputMessage");
        requirementsEditInputMessage.setFor("requirementsEditInput");
        requirementsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementsEditInputMessage);
        
        HtmlOutputText bugsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugsEditOutput.setId("bugsEditOutput");
        bugsEditOutput.setValue("Bugs:   ");
        htmlPanelGrid.getChildren().add(bugsEditOutput);
        
        HtmlOutputText bugsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugsEditInput.setId("bugsEditInput");
        bugsEditInput.setValue("This relationship is managed from the JJBug side");
        htmlPanelGrid.getChildren().add(bugsEditInput);
        
        Message bugsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bugsEditInputMessage.setId("bugsEditInputMessage");
        bugsEditInputMessage.setFor("bugsEditInput");
        bugsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bugsEditInputMessage);
        
        HtmlOutputText tasksEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksEditOutput.setId("tasksEditOutput");
        tasksEditOutput.setValue("Tasks:   ");
        htmlPanelGrid.getChildren().add(tasksEditOutput);
        
        HtmlOutputText tasksEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksEditInput.setId("tasksEditInput");
        tasksEditInput.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(tasksEditInput);
        
        Message tasksEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tasksEditInputMessage.setId("tasksEditInputMessage");
        tasksEditInputMessage.setFor("tasksEditInput");
        tasksEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tasksEditInputMessage);
        
        HtmlOutputText assignedTosEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedTosEditOutput.setId("assignedTosEditOutput");
        assignedTosEditOutput.setValue("Assigned Tos:   ");
        htmlPanelGrid.getChildren().add(assignedTosEditOutput);
        
        HtmlOutputText assignedTosEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedTosEditInput.setId("assignedTosEditInput");
        assignedTosEditInput.setValue("This relationship is managed from the JJContact side");
        htmlPanelGrid.getChildren().add(assignedTosEditInput);
        
        Message assignedTosEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        assignedTosEditInputMessage.setId("assignedTosEditInputMessage");
        assignedTosEditInputMessage.setFor("assignedTosEditInput");
        assignedTosEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(assignedTosEditInputMessage);
        
        HtmlOutputText messagesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesEditOutput.setId("messagesEditOutput");
        messagesEditOutput.setValue("Messages:   ");
        htmlPanelGrid.getChildren().add(messagesEditOutput);
        
        HtmlOutputText messagesEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesEditInput.setId("messagesEditInput");
        messagesEditInput.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesEditInput);
        
        Message messagesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messagesEditInputMessage.setId("messagesEditInputMessage");
        messagesEditInputMessage.setFor("messagesEditInput");
        messagesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messagesEditInputMessage);
        
        HtmlOutputText noteEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        noteEditOutput.setId("noteEditOutput");
        noteEditOutput.setValue("Note: * ");
        htmlPanelGrid.getChildren().add(noteEditOutput);
        
        InputTextarea noteEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        noteEditInput.setId("noteEditInput");
        noteEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.note}", String.class));
        LengthValidator noteEditInputValidator = new LengthValidator();
        noteEditInputValidator.setMaximum(250);
        noteEditInput.addValidator(noteEditInputValidator);
        noteEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(noteEditInput);
        
        Message noteEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        noteEditInputMessage.setId("noteEditInputMessage");
        noteEditInputMessage.setFor("noteEditInput");
        noteEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(noteEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJRequirementBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:   ");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText descriptionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionLabel.setId("descriptionLabel");
        descriptionLabel.setValue("Description:   ");
        htmlPanelGrid.getChildren().add(descriptionLabel);
        
        InputTextarea descriptionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionValue.setId("descriptionValue");
        descriptionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.description}", String.class));
        descriptionValue.setReadonly(true);
        descriptionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descriptionValue);
        
        HtmlOutputText creationDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateLabel.setId("creationDateLabel");
        creationDateLabel.setValue("Creation Date:   ");
        htmlPanelGrid.getChildren().add(creationDateLabel);
        
        HtmlOutputText creationDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.creationDate}", Date.class));
        DateTimeConverter creationDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationDateValueConverter.setPattern("dd/MM/yyyy");
        creationDateValue.setConverter(creationDateValueConverter);
        htmlPanelGrid.getChildren().add(creationDateValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.createdBy}", JJContact.class));
        createdByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        HtmlOutputText updatedDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateLabel.setId("updatedDateLabel");
        updatedDateLabel.setValue("Updated Date:   ");
        htmlPanelGrid.getChildren().add(updatedDateLabel);
        
        HtmlOutputText updatedDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.updatedDate}", Date.class));
        DateTimeConverter updatedDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updatedDateValueConverter.setPattern("dd/MM/yyyy");
        updatedDateValue.setConverter(updatedDateValueConverter);
        htmlPanelGrid.getChildren().add(updatedDateValue);
        
        HtmlOutputText updatedByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByLabel.setId("updatedByLabel");
        updatedByLabel.setValue("Updated By:   ");
        htmlPanelGrid.getChildren().add(updatedByLabel);
        
        HtmlOutputText updatedByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.updatedBy}", JJContact.class));
        updatedByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(updatedByValue);
        
        HtmlOutputText enabledLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledLabel.setId("enabledLabel");
        enabledLabel.setValue("Enabled:   ");
        htmlPanelGrid.getChildren().add(enabledLabel);
        
        HtmlOutputText enabledValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.enabled}", String.class));
        htmlPanelGrid.getChildren().add(enabledValue);
        
        HtmlOutputText numeroLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numeroLabel.setId("numeroLabel");
        numeroLabel.setValue("Numero:   ");
        htmlPanelGrid.getChildren().add(numeroLabel);
        
        HtmlOutputText numeroValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numeroValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.numero}", String.class));
        htmlPanelGrid.getChildren().add(numeroValue);
        
        HtmlOutputText projectLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectLabel.setId("projectLabel");
        projectLabel.setValue("Project:   ");
        htmlPanelGrid.getChildren().add(projectLabel);
        
        HtmlOutputText projectValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.project}", JJProject.class));
        projectValue.setConverter(new JJProjectConverter());
        htmlPanelGrid.getChildren().add(projectValue);
        
        HtmlOutputText startDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        startDateLabel.setId("startDateLabel");
        startDateLabel.setValue("Start Date:   ");
        htmlPanelGrid.getChildren().add(startDateLabel);
        
        HtmlOutputText startDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        startDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.startDate}", Date.class));
        DateTimeConverter startDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        startDateValueConverter.setPattern("dd/MM/yyyy");
        startDateValue.setConverter(startDateValueConverter);
        htmlPanelGrid.getChildren().add(startDateValue);
        
        HtmlOutputText endDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endDateLabel.setId("endDateLabel");
        endDateLabel.setValue("End Date:   ");
        htmlPanelGrid.getChildren().add(endDateLabel);
        
        HtmlOutputText endDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.endDate}", Date.class));
        DateTimeConverter endDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        endDateValueConverter.setPattern("dd/MM/yyyy");
        endDateValue.setConverter(endDateValueConverter);
        htmlPanelGrid.getChildren().add(endDateValue);
        
        HtmlOutputText chapterLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        chapterLabel.setId("chapterLabel");
        chapterLabel.setValue("Chapter:   ");
        htmlPanelGrid.getChildren().add(chapterLabel);
        
        HtmlOutputText chapterValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        chapterValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.chapter}", JJChapter.class));
        chapterValue.setConverter(new JJChapterConverter());
        htmlPanelGrid.getChildren().add(chapterValue);
        
        HtmlOutputText jjversionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        jjversionLabel.setId("jjversionLabel");
        jjversionLabel.setValue("Jjversion:   ");
        htmlPanelGrid.getChildren().add(jjversionLabel);
        
        HtmlOutputText jjversionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        jjversionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.jjversion}", JJVersion.class));
        jjversionValue.setConverter(new JJVersionConverter());
        htmlPanelGrid.getChildren().add(jjversionValue);
        
        HtmlOutputText categoryLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoryLabel.setId("categoryLabel");
        categoryLabel.setValue("Category:   ");
        htmlPanelGrid.getChildren().add(categoryLabel);
        
        HtmlOutputText categoryValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoryValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.category}", JJCategory.class));
        categoryValue.setConverter(new JJCategoryConverter());
        htmlPanelGrid.getChildren().add(categoryValue);
        
        HtmlOutputText criticityLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        criticityLabel.setId("criticityLabel");
        criticityLabel.setValue("Criticity:   ");
        htmlPanelGrid.getChildren().add(criticityLabel);
        
        HtmlOutputText criticityValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        criticityValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.criticity}", JJCriticity.class));
        criticityValue.setConverter(new JJCriticityConverter());
        htmlPanelGrid.getChildren().add(criticityValue);
        
        HtmlOutputText importanceLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        importanceLabel.setId("importanceLabel");
        importanceLabel.setValue("Importance:   ");
        htmlPanelGrid.getChildren().add(importanceLabel);
        
        HtmlOutputText importanceValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        importanceValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.importance}", JJImportance.class));
        importanceValue.setConverter(new JJImportanceConverter());
        htmlPanelGrid.getChildren().add(importanceValue);
        
        HtmlOutputText statusLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusLabel.setId("statusLabel");
        statusLabel.setValue("Status:   ");
        htmlPanelGrid.getChildren().add(statusLabel);
        
        HtmlOutputText statusValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.status}", JJStatus.class));
        statusValue.setConverter(new JJStatusConverter());
        htmlPanelGrid.getChildren().add(statusValue);
        
        HtmlOutputText impactLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        impactLabel.setId("impactLabel");
        impactLabel.setValue("Impact:   ");
        htmlPanelGrid.getChildren().add(impactLabel);
        
        InputTextarea impactValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        impactValue.setId("impactValue");
        impactValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.impact}", String.class));
        impactValue.setReadonly(true);
        impactValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(impactValue);
        
        HtmlOutputText relationLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        relationLabel.setId("relationLabel");
        relationLabel.setValue("Relation:   ");
        htmlPanelGrid.getChildren().add(relationLabel);
        
        HtmlOutputText relationValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        relationValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.relation}", String.class));
        htmlPanelGrid.getChildren().add(relationValue);
        
        HtmlOutputText requirementUpLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementUpLabel.setId("requirementUpLabel");
        requirementUpLabel.setValue("Requirement Up:   ");
        htmlPanelGrid.getChildren().add(requirementUpLabel);
        
        HtmlOutputText requirementUpValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementUpValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.requirementUp}", JJRequirement.class));
        requirementUpValue.setConverter(new JJRequirementConverter());
        htmlPanelGrid.getChildren().add(requirementUpValue);
        
        HtmlOutputText requirementsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementsLabel.setId("requirementsLabel");
        requirementsLabel.setValue("Requirements:   ");
        htmlPanelGrid.getChildren().add(requirementsLabel);
        
        HtmlOutputText requirementsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementsValue.setId("requirementsValue");
        requirementsValue.setValue("This relationship is managed from the JJRequirement side");
        htmlPanelGrid.getChildren().add(requirementsValue);
        
        HtmlOutputText bugsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugsLabel.setId("bugsLabel");
        bugsLabel.setValue("Bugs:   ");
        htmlPanelGrid.getChildren().add(bugsLabel);
        
        HtmlOutputText bugsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugsValue.setId("bugsValue");
        bugsValue.setValue("This relationship is managed from the JJBug side");
        htmlPanelGrid.getChildren().add(bugsValue);
        
        HtmlOutputText tasksLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksLabel.setId("tasksLabel");
        tasksLabel.setValue("Tasks:   ");
        htmlPanelGrid.getChildren().add(tasksLabel);
        
        HtmlOutputText tasksValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksValue.setId("tasksValue");
        tasksValue.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(tasksValue);
        
        HtmlOutputText assignedTosLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedTosLabel.setId("assignedTosLabel");
        assignedTosLabel.setValue("Assigned Tos:   ");
        htmlPanelGrid.getChildren().add(assignedTosLabel);
        
        HtmlOutputText assignedTosValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedTosValue.setId("assignedTosValue");
        assignedTosValue.setValue("This relationship is managed from the JJContact side");
        htmlPanelGrid.getChildren().add(assignedTosValue);
        
        HtmlOutputText messagesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesLabel.setId("messagesLabel");
        messagesLabel.setValue("Messages:   ");
        htmlPanelGrid.getChildren().add(messagesLabel);
        
        HtmlOutputText messagesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesValue.setId("messagesValue");
        messagesValue.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesValue);
        
        HtmlOutputText noteLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        noteLabel.setId("noteLabel");
        noteLabel.setValue("Note:   ");
        htmlPanelGrid.getChildren().add(noteLabel);
        
        InputTextarea noteValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        noteValue.setId("noteValue");
        noteValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRequirementBean.JJRequirement_.note}", String.class));
        noteValue.setReadonly(true);
        noteValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(noteValue);
        
        return htmlPanelGrid;
    }
    
    public JJRequirement JJRequirementBean.getJJRequirement_() {
        if (JJRequirement_ == null) {
            JJRequirement_ = new JJRequirement();
        }
        return JJRequirement_;
    }
    
    public void JJRequirementBean.setJJRequirement_(JJRequirement JJRequirement_) {
        this.JJRequirement_ = JJRequirement_;
    }
    
    public List<JJContact> JJRequirementBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJRequirementBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJProject> JJRequirementBean.completeProject(String query) {
        List<JJProject> suggestions = new ArrayList<JJProject>();
        for (JJProject jJProject : jJProjectService.findAllJJProjects()) {
            String jJProjectStr = String.valueOf(jJProject.getName() +  " "  + jJProject.getDescription() +  " "  + jJProject.getCreationDate() +  " "  + jJProject.getUpdatedDate());
            if (jJProjectStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJProject);
            }
        }
        return suggestions;
    }
    
    public List<JJChapter> JJRequirementBean.completeChapter(String query) {
        List<JJChapter> suggestions = new ArrayList<JJChapter>();
        for (JJChapter jJChapter : jJChapterService.findAllJJChapters()) {
            String jJChapterStr = String.valueOf(jJChapter.getName() +  " "  + jJChapter.getDescription() +  " "  + jJChapter.getCreationDate() +  " "  + jJChapter.getUpdatedDate());
            if (jJChapterStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJChapter);
            }
        }
        return suggestions;
    }
    
    public List<JJVersion> JJRequirementBean.completeJjversion(String query) {
        List<JJVersion> suggestions = new ArrayList<JJVersion>();
        for (JJVersion jJVersion : jJVersionService.findAllJJVersions()) {
            String jJVersionStr = String.valueOf(jJVersion.getName() +  " "  + jJVersion.getDescription() +  " "  + jJVersion.getCreationDate() +  " "  + jJVersion.getUpdatedDate());
            if (jJVersionStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJVersion);
            }
        }
        return suggestions;
    }
    
    public List<JJCategory> JJRequirementBean.completeCategory(String query) {
        List<JJCategory> suggestions = new ArrayList<JJCategory>();
        for (JJCategory jJCategory : jJCategoryService.findAllJJCategorys()) {
            String jJCategoryStr = String.valueOf(jJCategory.getName() +  " "  + jJCategory.getDescription() +  " "  + jJCategory.getCreationDate() +  " "  + jJCategory.getUpdatedDate());
            if (jJCategoryStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJCategory);
            }
        }
        return suggestions;
    }
    
    public List<JJCriticity> JJRequirementBean.completeCriticity(String query) {
        List<JJCriticity> suggestions = new ArrayList<JJCriticity>();
        for (JJCriticity jJCriticity : jJCriticityService.findAllJJCriticitys()) {
            String jJCriticityStr = String.valueOf(jJCriticity.getName() +  " "  + jJCriticity.getDescription() +  " "  + jJCriticity.getCreationDate() +  " "  + jJCriticity.getUpdatedDate());
            if (jJCriticityStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJCriticity);
            }
        }
        return suggestions;
    }
    
    public List<JJImportance> JJRequirementBean.completeImportance(String query) {
        List<JJImportance> suggestions = new ArrayList<JJImportance>();
        for (JJImportance jJImportance : jJImportanceService.findAllJJImportances()) {
            String jJImportanceStr = String.valueOf(jJImportance.getName() +  " "  + jJImportance.getDescription() +  " "  + jJImportance.getCreationDate() +  " "  + jJImportance.getUpdatedDate());
            if (jJImportanceStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJImportance);
            }
        }
        return suggestions;
    }
    
    public List<JJStatus> JJRequirementBean.completeStatus(String query) {
        List<JJStatus> suggestions = new ArrayList<JJStatus>();
        for (JJStatus jJStatus : jJStatusService.findAllJJStatuses()) {
            String jJStatusStr = String.valueOf(jJStatus.getName() +  " "  + jJStatus.getDescription() +  " "  + jJStatus.getCreationDate() +  " "  + jJStatus.getUpdatedDate());
            if (jJStatusStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJStatus);
            }
        }
        return suggestions;
    }
    
    public List<JJRelationship> JJRequirementBean.completeRelation(String query) {
        List<JJRelationship> suggestions = new ArrayList<JJRelationship>();
        for (JJRelationship jJRelationship : JJRelationship.values()) {
            if (jJRelationship.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJRelationship);
            }
        }
        return suggestions;
    }
    
    public List<JJRequirement> JJRequirementBean.completeRequirementUp(String query) {
        List<JJRequirement> suggestions = new ArrayList<JJRequirement>();
        for (JJRequirement jJRequirement : jJRequirementService.findAllJJRequirements()) {
            String jJRequirementStr = String.valueOf(jJRequirement.getName() +  " "  + jJRequirement.getDescription() +  " "  + jJRequirement.getCreationDate() +  " "  + jJRequirement.getUpdatedDate());
            if (jJRequirementStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJRequirement);
            }
        }
        return suggestions;
    }
    
    public List<JJRequirement> JJRequirementBean.getSelectedRequirements() {
        return selectedRequirements;
    }
    
    public void JJRequirementBean.setSelectedRequirements(List<JJRequirement> selectedRequirements) {
        if (selectedRequirements != null) {
            JJRequirement_.setRequirements(new HashSet<JJRequirement>(selectedRequirements));
        }
        this.selectedRequirements = selectedRequirements;
    }
    
    public List<JJBug> JJRequirementBean.getSelectedBugs() {
        return selectedBugs;
    }
    
    public void JJRequirementBean.setSelectedBugs(List<JJBug> selectedBugs) {
        if (selectedBugs != null) {
            JJRequirement_.setBugs(new HashSet<JJBug>(selectedBugs));
        }
        this.selectedBugs = selectedBugs;
    }
    
    public List<JJTask> JJRequirementBean.getSelectedTasks() {
        return selectedTasks;
    }
    
    public void JJRequirementBean.setSelectedTasks(List<JJTask> selectedTasks) {
        if (selectedTasks != null) {
            JJRequirement_.setTasks(new HashSet<JJTask>(selectedTasks));
        }
        this.selectedTasks = selectedTasks;
    }
    
    public List<JJContact> JJRequirementBean.getSelectedAssignedTos() {
        return selectedAssignedTos;
    }
    
    public void JJRequirementBean.setSelectedAssignedTos(List<JJContact> selectedAssignedTos) {
        if (selectedAssignedTos != null) {
            JJRequirement_.setAssignedTos(new HashSet<JJContact>(selectedAssignedTos));
        }
        this.selectedAssignedTos = selectedAssignedTos;
    }
    
    public List<JJMessage> JJRequirementBean.getSelectedMessages() {
        return selectedMessages;
    }
    
    public void JJRequirementBean.setSelectedMessages(List<JJMessage> selectedMessages) {
        if (selectedMessages != null) {
            JJRequirement_.setMessages(new HashSet<JJMessage>(selectedMessages));
        }
        this.selectedMessages = selectedMessages;
    }
    
    public String JJRequirementBean.onEdit() {
        if (JJRequirement_ != null && JJRequirement_.getRequirements() != null) {
            selectedRequirements = new ArrayList<JJRequirement>(JJRequirement_.getRequirements());
        }
        if (JJRequirement_ != null && JJRequirement_.getBugs() != null) {
            selectedBugs = new ArrayList<JJBug>(JJRequirement_.getBugs());
        }
        if (JJRequirement_ != null && JJRequirement_.getTasks() != null) {
            selectedTasks = new ArrayList<JJTask>(JJRequirement_.getTasks());
        }
        if (JJRequirement_ != null && JJRequirement_.getAssignedTos() != null) {
            selectedAssignedTos = new ArrayList<JJContact>(JJRequirement_.getAssignedTos());
        }
        if (JJRequirement_ != null && JJRequirement_.getMessages() != null) {
            selectedMessages = new ArrayList<JJMessage>(JJRequirement_.getMessages());
        }
        return null;
    }
    
    public boolean JJRequirementBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJRequirementBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJRequirementBean.displayList() {
        createDialogVisible = false;
        findAllJJRequirements();
        return "JJRequirement_";
    }
    
    public String JJRequirementBean.displayCreateDialog() {
        JJRequirement_ = new JJRequirement();
        createDialogVisible = true;
        return "JJRequirement_";
    }
    
    public String JJRequirementBean.persist() {
        String message = "";
        if (JJRequirement_.getId() != null) {
            jJRequirementService.updateJJRequirement(JJRequirement_);
            message = "Successfully updated";
        } else {
            jJRequirementService.saveJJRequirement(JJRequirement_);
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJRequirements();
    }
    
    public String JJRequirementBean.delete() {
        jJRequirementService.deleteJJRequirement(JJRequirement_);
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJRequirements();
    }
    
    public void JJRequirementBean.reset() {
        JJRequirement_ = null;
        selectedRequirements = null;
        selectedBugs = null;
        selectedTasks = null;
        selectedAssignedTos = null;
        selectedMessages = null;
        createDialogVisible = false;
    }
    
    public void JJRequirementBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

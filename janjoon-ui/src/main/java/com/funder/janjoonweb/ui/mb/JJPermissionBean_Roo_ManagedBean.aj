// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.funder.janjoonweb.ui.mb;

import com.funder.janjoonweb.domain.JJPermission;
import com.funder.janjoonweb.domain.JJPermissionService;
import com.funder.janjoonweb.ui.mb.JJPermissionBean;
import com.funder.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJPermissionBean_Roo_ManagedBean {
    
    declare @type: JJPermissionBean: @ManagedBean(name = "jJPermissionBean");
    
    declare @type: JJPermissionBean: @SessionScoped;
    
    @Autowired
    JJPermissionService JJPermissionBean.jJPermissionService;
    
    private String JJPermissionBean.name = "JJPermissions";
    
    private JJPermission JJPermissionBean.JJPermission_;
    
    private List<JJPermission> JJPermissionBean.allJJPermissions;
    
    private boolean JJPermissionBean.dataVisible = false;
    
    private List<String> JJPermissionBean.columns;
    
    private HtmlPanelGrid JJPermissionBean.createPanelGrid;
    
    private HtmlPanelGrid JJPermissionBean.editPanelGrid;
    
    private HtmlPanelGrid JJPermissionBean.viewPanelGrid;
    
    private boolean JJPermissionBean.createDialogVisible = false;
    
    @PostConstruct
    public void JJPermissionBean.init() {
        columns = new ArrayList<String>();
        columns.add("permission");
    }
    
    public String JJPermissionBean.getName() {
        return name;
    }
    
    public List<String> JJPermissionBean.getColumns() {
        return columns;
    }
    
    public List<JJPermission> JJPermissionBean.getAllJJPermissions() {
        return allJJPermissions;
    }
    
    public void JJPermissionBean.setAllJJPermissions(List<JJPermission> allJJPermissions) {
        this.allJJPermissions = allJJPermissions;
    }
    
    public String JJPermissionBean.findAllJJPermissions() {
        allJJPermissions = jJPermissionService.findAllJJPermissions();
        dataVisible = !allJJPermissions.isEmpty();
        return null;
    }
    
    public boolean JJPermissionBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJPermissionBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJPermissionBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJPermissionBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJPermissionBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJPermissionBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJPermissionBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJPermissionBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJPermissionBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel permissionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        permissionCreateOutput.setFor("permissionCreateInput");
        permissionCreateOutput.setId("permissionCreateOutput");
        permissionCreateOutput.setValue("Permission:");
        htmlPanelGrid.getChildren().add(permissionCreateOutput);
        
        InputText permissionCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        permissionCreateInput.setId("permissionCreateInput");
        permissionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJPermissionBean.JJPermission_.permission}", String.class));
        LengthValidator permissionCreateInputValidator = new LengthValidator();
        permissionCreateInputValidator.setMaximum(25);
        permissionCreateInput.addValidator(permissionCreateInputValidator);
        permissionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(permissionCreateInput);
        
        Message permissionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        permissionCreateInputMessage.setId("permissionCreateInputMessage");
        permissionCreateInputMessage.setFor("permissionCreateInput");
        permissionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(permissionCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJPermissionBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel permissionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        permissionEditOutput.setFor("permissionEditInput");
        permissionEditOutput.setId("permissionEditOutput");
        permissionEditOutput.setValue("Permission:");
        htmlPanelGrid.getChildren().add(permissionEditOutput);
        
        InputText permissionEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        permissionEditInput.setId("permissionEditInput");
        permissionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJPermissionBean.JJPermission_.permission}", String.class));
        LengthValidator permissionEditInputValidator = new LengthValidator();
        permissionEditInputValidator.setMaximum(25);
        permissionEditInput.addValidator(permissionEditInputValidator);
        permissionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(permissionEditInput);
        
        Message permissionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        permissionEditInputMessage.setId("permissionEditInputMessage");
        permissionEditInputMessage.setFor("permissionEditInput");
        permissionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(permissionEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJPermissionBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText permissionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        permissionLabel.setId("permissionLabel");
        permissionLabel.setValue("Permission:");
        htmlPanelGrid.getChildren().add(permissionLabel);
        
        HtmlOutputText permissionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        permissionValue.setId("permissionValue");
        permissionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJPermissionBean.JJPermission_.permission}", String.class));
        htmlPanelGrid.getChildren().add(permissionValue);
        
        return htmlPanelGrid;
    }
    
    public JJPermission JJPermissionBean.getJJPermission_() {
        if (JJPermission_ == null) {
            JJPermission_ = new JJPermission();
        }
        return JJPermission_;
    }
    
    public void JJPermissionBean.setJJPermission_(JJPermission JJPermission_) {
        this.JJPermission_ = JJPermission_;
    }
    
    public String JJPermissionBean.onEdit() {
        return null;
    }
    
    public boolean JJPermissionBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJPermissionBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJPermissionBean.displayList() {
        createDialogVisible = false;
        findAllJJPermissions();
        return "JJPermission_";
    }
    
    public String JJPermissionBean.displayCreateDialog() {
        JJPermission_ = new JJPermission();
        createDialogVisible = true;
        return "JJPermission_";
    }
    
    public String JJPermissionBean.persist() {
        String message = "";
        if (JJPermission_.getId() != null) {
            jJPermissionService.updateJJPermission(JJPermission_);
            message = "message_successfully_updated";
        } else {
            jJPermissionService.saveJJPermission(JJPermission_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJPermission");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJPermissions();
    }
    
    public String JJPermissionBean.delete() {
        jJPermissionService.deleteJJPermission(JJPermission_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJPermission");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJPermissions();
    }
    
    public void JJPermissionBean.reset() {
        JJPermission_ = null;
        createDialogVisible = false;
    }
    
    public void JJPermissionBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

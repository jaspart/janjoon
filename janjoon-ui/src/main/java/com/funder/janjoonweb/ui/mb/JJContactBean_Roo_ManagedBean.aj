// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.funder.janjoonweb.ui.mb;

import com.funder.janjoonweb.domain.JJContact;
import com.funder.janjoonweb.domain.JJContactService;
import com.funder.janjoonweb.domain.JJJob;
import com.funder.janjoonweb.domain.JJJobService;
import com.funder.janjoonweb.domain.JJProduct;
import com.funder.janjoonweb.domain.JJProject;
import com.funder.janjoonweb.domain.JJRight;
import com.funder.janjoonweb.ui.mb.JJContactBean;
import com.funder.janjoonweb.ui.mb.converter.JJContactConverter;
import com.funder.janjoonweb.ui.mb.converter.JJJobConverter;
import com.funder.janjoonweb.ui.mb.converter.JJProductConverter;
import com.funder.janjoonweb.ui.mb.converter.JJProjectConverter;
import com.funder.janjoonweb.ui.mb.converter.JJRightConverter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import javax.faces.validator.RegexValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJContactBean_Roo_ManagedBean {
    
    declare @type: JJContactBean: @ManagedBean(name = "jJContactBean");
    
    declare @type: JJContactBean: @SessionScoped;
    
    @Autowired
    JJContactService JJContactBean.jJContactService;
    
    @Autowired
    JJJobService JJContactBean.jJJobService;
    
    private String JJContactBean.name = "JJContacts";
    
    private JJContact JJContactBean.JJContact_;
    
    private List<JJContact> JJContactBean.allJJContacts;
    
    private boolean JJContactBean.dataVisible = false;
    
    private List<String> JJContactBean.columns;
    
    private HtmlPanelGrid JJContactBean.createPanelGrid;
    
    private HtmlPanelGrid JJContactBean.editPanelGrid;
    
    private HtmlPanelGrid JJContactBean.viewPanelGrid;
    
    private boolean JJContactBean.createDialogVisible = false;
    
    private List<JJRight> JJContactBean.selectedRights;
    
    private List<JJProduct> JJContactBean.selectedProducts;
    
    private List<JJProject> JJContactBean.selectedProjects;
    
    @PostConstruct
    public void JJContactBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
        columns.add("password");
    }
    
    public String JJContactBean.getName() {
        return name;
    }
    
    public List<String> JJContactBean.getColumns() {
        return columns;
    }
    
    public List<JJContact> JJContactBean.getAllJJContacts() {
        return allJJContacts;
    }
    
    public void JJContactBean.setAllJJContacts(List<JJContact> allJJContacts) {
        this.allJJContacts = allJJContacts;
    }
    
    public String JJContactBean.findAllJJContacts() {
        allJJContacts = jJContactService.findAllJJContacts();
        dataVisible = !allJJContacts.isEmpty();
        return null;
    }
    
    public boolean JJContactBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJContactBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJContactBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJContactBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJContactBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJContactBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJContactBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJContactBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJContactBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name: * ");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMaximum(25);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        HtmlOutputText descriptionCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionCreateOutput.setId("descriptionCreateOutput");
        descriptionCreateOutput.setValue("Description: * ");
        htmlPanelGrid.getChildren().add(descriptionCreateOutput);
        
        InputTextarea descriptionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionCreateInput.setId("descriptionCreateInput");
        descriptionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.description}", String.class));
        LengthValidator descriptionCreateInputValidator = new LengthValidator();
        descriptionCreateInputValidator.setMaximum(250);
        descriptionCreateInput.addValidator(descriptionCreateInputValidator);
        descriptionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionCreateInput);
        
        Message descriptionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionCreateInputMessage.setId("descriptionCreateInputMessage");
        descriptionCreateInputMessage.setFor("descriptionCreateInput");
        descriptionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionCreateInputMessage);
        
        HtmlOutputText creationDateCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateCreateOutput.setId("creationDateCreateOutput");
        creationDateCreateOutput.setValue("Creation Date: * ");
        htmlPanelGrid.getChildren().add(creationDateCreateOutput);
        
        Calendar creationDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateCreateInput.setId("creationDateCreateInput");
        creationDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.creationDate}", Date.class));
        creationDateCreateInput.setNavigator(true);
        creationDateCreateInput.setEffect("slideDown");
        creationDateCreateInput.setPattern("dd/MM/yyyy");
        creationDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateCreateInput);
        
        Message creationDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateCreateInputMessage.setId("creationDateCreateInputMessage");
        creationDateCreateInputMessage.setFor("creationDateCreateInput");
        creationDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateCreateInputMessage);
        
        HtmlOutputText createdByCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.createdBy}", JJContact.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByCreateInput.setConverter(new JJContactConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        HtmlOutputText updatedDateCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateCreateOutput.setId("updatedDateCreateOutput");
        updatedDateCreateOutput.setValue("Updated Date:   ");
        htmlPanelGrid.getChildren().add(updatedDateCreateOutput);
        
        Calendar updatedDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateCreateInput.setId("updatedDateCreateInput");
        updatedDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.updatedDate}", Date.class));
        updatedDateCreateInput.setNavigator(true);
        updatedDateCreateInput.setEffect("slideDown");
        updatedDateCreateInput.setPattern("dd/MM/yyyy");
        updatedDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateCreateInput);
        
        Message updatedDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateCreateInputMessage.setId("updatedDateCreateInputMessage");
        updatedDateCreateInputMessage.setFor("updatedDateCreateInput");
        updatedDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateCreateInputMessage);
        
        HtmlOutputText updatedByCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByCreateOutput.setId("updatedByCreateOutput");
        updatedByCreateOutput.setValue("Updated By:   ");
        htmlPanelGrid.getChildren().add(updatedByCreateOutput);
        
        AutoComplete updatedByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByCreateInput.setId("updatedByCreateInput");
        updatedByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.updatedBy}", JJContact.class));
        updatedByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByCreateInput.setDropdown(true);
        updatedByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByCreateInput.setConverter(new JJContactConverter());
        updatedByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByCreateInput);
        
        Message updatedByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByCreateInputMessage.setId("updatedByCreateInputMessage");
        updatedByCreateInputMessage.setFor("updatedByCreateInput");
        updatedByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByCreateInputMessage);
        
        HtmlOutputText enabledCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledCreateOutput.setId("enabledCreateOutput");
        enabledCreateOutput.setValue("Enabled:   ");
        htmlPanelGrid.getChildren().add(enabledCreateOutput);
        
        SelectBooleanCheckbox enabledCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledCreateInput.setId("enabledCreateInput");
        enabledCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.enabled}", Boolean.class));
        enabledCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledCreateInput);
        
        Message enabledCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledCreateInputMessage.setId("enabledCreateInputMessage");
        enabledCreateInputMessage.setFor("enabledCreateInput");
        enabledCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledCreateInputMessage);
        
        HtmlOutputText passwordCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordCreateOutput.setId("passwordCreateOutput");
        passwordCreateOutput.setValue("Password: * ");
        htmlPanelGrid.getChildren().add(passwordCreateOutput);
        
        InputText passwordCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        passwordCreateInput.setId("passwordCreateInput");
        passwordCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.password}", String.class));
        LengthValidator passwordCreateInputValidator = new LengthValidator();
        passwordCreateInputValidator.setMaximum(25);
        passwordCreateInput.addValidator(passwordCreateInputValidator);
        passwordCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(passwordCreateInput);
        
        Message passwordCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        passwordCreateInputMessage.setId("passwordCreateInputMessage");
        passwordCreateInputMessage.setFor("passwordCreateInput");
        passwordCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(passwordCreateInputMessage);
        
        HtmlOutputText emailCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailCreateOutput.setId("emailCreateOutput");
        emailCreateOutput.setValue("Email: * ");
        htmlPanelGrid.getChildren().add(emailCreateOutput);
        
        InputText emailCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        emailCreateInput.setId("emailCreateInput");
        emailCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.email}", String.class));
        RegexValidator emailCreateInputRegexValidator = new RegexValidator();
        emailCreateInputRegexValidator.setPattern("[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z0-9]+");
        emailCreateInput.addValidator(emailCreateInputRegexValidator);
        htmlPanelGrid.getChildren().add(emailCreateInput);
        
        Message emailCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailCreateInputMessage.setId("emailCreateInputMessage");
        emailCreateInputMessage.setFor("emailCreateInput");
        emailCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailCreateInputMessage);
        
        HtmlOutputText ldapCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ldapCreateOutput.setId("ldapCreateOutput");
        ldapCreateOutput.setValue("Ldap:   ");
        htmlPanelGrid.getChildren().add(ldapCreateOutput);
        
        Spinner ldapCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        ldapCreateInput.setId("ldapCreateInput");
        ldapCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.ldap}", Integer.class));
        ldapCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(ldapCreateInput);
        
        Message ldapCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        ldapCreateInputMessage.setId("ldapCreateInputMessage");
        ldapCreateInputMessage.setFor("ldapCreateInput");
        ldapCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(ldapCreateInputMessage);
        
        HtmlOutputText firstnameCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        firstnameCreateOutput.setId("firstnameCreateOutput");
        firstnameCreateOutput.setValue("Firstname: * ");
        htmlPanelGrid.getChildren().add(firstnameCreateOutput);
        
        InputText firstnameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        firstnameCreateInput.setId("firstnameCreateInput");
        firstnameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.firstname}", String.class));
        LengthValidator firstnameCreateInputValidator = new LengthValidator();
        firstnameCreateInputValidator.setMaximum(25);
        firstnameCreateInput.addValidator(firstnameCreateInputValidator);
        firstnameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(firstnameCreateInput);
        
        Message firstnameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        firstnameCreateInputMessage.setId("firstnameCreateInputMessage");
        firstnameCreateInputMessage.setFor("firstnameCreateInput");
        firstnameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(firstnameCreateInputMessage);
        
        HtmlOutputText lastnameCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastnameCreateOutput.setId("lastnameCreateOutput");
        lastnameCreateOutput.setValue("Lastname: * ");
        htmlPanelGrid.getChildren().add(lastnameCreateOutput);
        
        InputText lastnameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        lastnameCreateInput.setId("lastnameCreateInput");
        lastnameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.lastname}", String.class));
        LengthValidator lastnameCreateInputValidator = new LengthValidator();
        lastnameCreateInputValidator.setMaximum(25);
        lastnameCreateInput.addValidator(lastnameCreateInputValidator);
        lastnameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(lastnameCreateInput);
        
        Message lastnameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastnameCreateInputMessage.setId("lastnameCreateInputMessage");
        lastnameCreateInputMessage.setFor("lastnameCreateInput");
        lastnameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastnameCreateInputMessage);
        
        HtmlOutputText dateofbirthCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dateofbirthCreateOutput.setId("dateofbirthCreateOutput");
        dateofbirthCreateOutput.setValue("Dateofbirth:   ");
        htmlPanelGrid.getChildren().add(dateofbirthCreateOutput);
        
        Calendar dateofbirthCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        dateofbirthCreateInput.setId("dateofbirthCreateInput");
        dateofbirthCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.dateofbirth}", Date.class));
        dateofbirthCreateInput.setNavigator(true);
        dateofbirthCreateInput.setEffect("slideDown");
        dateofbirthCreateInput.setPattern("dd/MM/yyyy");
        dateofbirthCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dateofbirthCreateInput);
        
        Message dateofbirthCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dateofbirthCreateInputMessage.setId("dateofbirthCreateInputMessage");
        dateofbirthCreateInputMessage.setFor("dateofbirthCreateInput");
        dateofbirthCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dateofbirthCreateInputMessage);
        
        HtmlOutputText pictureCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pictureCreateOutput.setId("pictureCreateOutput");
        pictureCreateOutput.setValue("Picture: * ");
        htmlPanelGrid.getChildren().add(pictureCreateOutput);
        
        InputText pictureCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        pictureCreateInput.setId("pictureCreateInput");
        pictureCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.picture}", String.class));
        LengthValidator pictureCreateInputValidator = new LengthValidator();
        pictureCreateInputValidator.setMaximum(25);
        pictureCreateInput.addValidator(pictureCreateInputValidator);
        pictureCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(pictureCreateInput);
        
        Message pictureCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pictureCreateInputMessage.setId("pictureCreateInputMessage");
        pictureCreateInputMessage.setFor("pictureCreateInput");
        pictureCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pictureCreateInputMessage);
        
        HtmlOutputText jobCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        jobCreateOutput.setId("jobCreateOutput");
        jobCreateOutput.setValue("Job:   ");
        htmlPanelGrid.getChildren().add(jobCreateOutput);
        
        AutoComplete jobCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        jobCreateInput.setId("jobCreateInput");
        jobCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.job}", JJJob.class));
        jobCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeJob}", List.class, new Class[] { String.class }));
        jobCreateInput.setDropdown(true);
        jobCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "job", String.class));
        jobCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{job.name} #{job.description} #{job.creationDate} #{job.updatedDate}", String.class));
        jobCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{job}", JJJob.class));
        jobCreateInput.setConverter(new JJJobConverter());
        jobCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(jobCreateInput);
        
        Message jobCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        jobCreateInputMessage.setId("jobCreateInputMessage");
        jobCreateInputMessage.setFor("jobCreateInput");
        jobCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(jobCreateInputMessage);
        
        HtmlOutputText rightsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rightsCreateOutput.setId("rightsCreateOutput");
        rightsCreateOutput.setValue("Rights:   ");
        htmlPanelGrid.getChildren().add(rightsCreateOutput);
        
        SelectManyMenu rightsCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        rightsCreateInput.setId("rightsCreateInput");
        rightsCreateInput.setConverter(new JJRightConverter());
        rightsCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.selectedRights}", List.class));
        UISelectItems rightsCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        rightsCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.allJJRights}", List.class));
        rightsCreateInput.setRequired(false);
        rightsCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJRight", String.class));
        rightsCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJRight}", String.class));
        rightsCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJRight}", JJRight.class));
        rightsCreateInput.getChildren().add(rightsCreateInputItems);
        htmlPanelGrid.getChildren().add(rightsCreateInput);
        
        Message rightsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        rightsCreateInputMessage.setId("rightsCreateInputMessage");
        rightsCreateInputMessage.setFor("rightsCreateInput");
        rightsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(rightsCreateInputMessage);
        
        HtmlOutputText productsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productsCreateOutput.setId("productsCreateOutput");
        productsCreateOutput.setValue("Products:   ");
        htmlPanelGrid.getChildren().add(productsCreateOutput);
        
        SelectManyMenu productsCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        productsCreateInput.setId("productsCreateInput");
        productsCreateInput.setConverter(new JJProductConverter());
        productsCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.selectedProducts}", List.class));
        UISelectItems productsCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        productsCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJProductBean.allJJProducts}", List.class));
        productsCreateInput.setRequired(false);
        productsCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJProduct", String.class));
        productsCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJProduct}", String.class));
        productsCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJProduct}", JJProduct.class));
        productsCreateInput.getChildren().add(productsCreateInputItems);
        htmlPanelGrid.getChildren().add(productsCreateInput);
        
        Message productsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productsCreateInputMessage.setId("productsCreateInputMessage");
        productsCreateInputMessage.setFor("productsCreateInput");
        productsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productsCreateInputMessage);
        
        HtmlOutputText projectsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectsCreateOutput.setId("projectsCreateOutput");
        projectsCreateOutput.setValue("Projects:   ");
        htmlPanelGrid.getChildren().add(projectsCreateOutput);
        
        SelectManyMenu projectsCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        projectsCreateInput.setId("projectsCreateInput");
        projectsCreateInput.setConverter(new JJProjectConverter());
        projectsCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.selectedProjects}", List.class));
        UISelectItems projectsCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        projectsCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJProjectBean.allJJProjects}", List.class));
        projectsCreateInput.setRequired(false);
        projectsCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJProject", String.class));
        projectsCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJProject}", String.class));
        projectsCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJProject}", JJProject.class));
        projectsCreateInput.getChildren().add(projectsCreateInputItems);
        htmlPanelGrid.getChildren().add(projectsCreateInput);
        
        Message projectsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectsCreateInputMessage.setId("projectsCreateInputMessage");
        projectsCreateInputMessage.setFor("projectsCreateInput");
        projectsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectsCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJContactBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name: * ");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMaximum(25);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        HtmlOutputText descriptionEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionEditOutput.setId("descriptionEditOutput");
        descriptionEditOutput.setValue("Description: * ");
        htmlPanelGrid.getChildren().add(descriptionEditOutput);
        
        InputTextarea descriptionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionEditInput.setId("descriptionEditInput");
        descriptionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.description}", String.class));
        LengthValidator descriptionEditInputValidator = new LengthValidator();
        descriptionEditInputValidator.setMaximum(250);
        descriptionEditInput.addValidator(descriptionEditInputValidator);
        descriptionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionEditInput);
        
        Message descriptionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionEditInputMessage.setId("descriptionEditInputMessage");
        descriptionEditInputMessage.setFor("descriptionEditInput");
        descriptionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionEditInputMessage);
        
        HtmlOutputText creationDateEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateEditOutput.setId("creationDateEditOutput");
        creationDateEditOutput.setValue("Creation Date: * ");
        htmlPanelGrid.getChildren().add(creationDateEditOutput);
        
        Calendar creationDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateEditInput.setId("creationDateEditInput");
        creationDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.creationDate}", Date.class));
        creationDateEditInput.setNavigator(true);
        creationDateEditInput.setEffect("slideDown");
        creationDateEditInput.setPattern("dd/MM/yyyy");
        creationDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateEditInput);
        
        Message creationDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateEditInputMessage.setId("creationDateEditInputMessage");
        creationDateEditInputMessage.setFor("creationDateEditInput");
        creationDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateEditInputMessage);
        
        HtmlOutputText createdByEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.createdBy}", JJContact.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByEditInput.setConverter(new JJContactConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        HtmlOutputText updatedDateEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateEditOutput.setId("updatedDateEditOutput");
        updatedDateEditOutput.setValue("Updated Date:   ");
        htmlPanelGrid.getChildren().add(updatedDateEditOutput);
        
        Calendar updatedDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateEditInput.setId("updatedDateEditInput");
        updatedDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.updatedDate}", Date.class));
        updatedDateEditInput.setNavigator(true);
        updatedDateEditInput.setEffect("slideDown");
        updatedDateEditInput.setPattern("dd/MM/yyyy");
        updatedDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateEditInput);
        
        Message updatedDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateEditInputMessage.setId("updatedDateEditInputMessage");
        updatedDateEditInputMessage.setFor("updatedDateEditInput");
        updatedDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateEditInputMessage);
        
        HtmlOutputText updatedByEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByEditOutput.setId("updatedByEditOutput");
        updatedByEditOutput.setValue("Updated By:   ");
        htmlPanelGrid.getChildren().add(updatedByEditOutput);
        
        AutoComplete updatedByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByEditInput.setId("updatedByEditInput");
        updatedByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.updatedBy}", JJContact.class));
        updatedByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByEditInput.setDropdown(true);
        updatedByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByEditInput.setConverter(new JJContactConverter());
        updatedByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByEditInput);
        
        Message updatedByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByEditInputMessage.setId("updatedByEditInputMessage");
        updatedByEditInputMessage.setFor("updatedByEditInput");
        updatedByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByEditInputMessage);
        
        HtmlOutputText enabledEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledEditOutput.setId("enabledEditOutput");
        enabledEditOutput.setValue("Enabled:   ");
        htmlPanelGrid.getChildren().add(enabledEditOutput);
        
        SelectBooleanCheckbox enabledEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledEditInput.setId("enabledEditInput");
        enabledEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.enabled}", Boolean.class));
        enabledEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledEditInput);
        
        Message enabledEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledEditInputMessage.setId("enabledEditInputMessage");
        enabledEditInputMessage.setFor("enabledEditInput");
        enabledEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledEditInputMessage);
        
        HtmlOutputText passwordEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordEditOutput.setId("passwordEditOutput");
        passwordEditOutput.setValue("Password: * ");
        htmlPanelGrid.getChildren().add(passwordEditOutput);
        
        InputText passwordEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        passwordEditInput.setId("passwordEditInput");
        passwordEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.password}", String.class));
        LengthValidator passwordEditInputValidator = new LengthValidator();
        passwordEditInputValidator.setMaximum(25);
        passwordEditInput.addValidator(passwordEditInputValidator);
        passwordEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(passwordEditInput);
        
        Message passwordEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        passwordEditInputMessage.setId("passwordEditInputMessage");
        passwordEditInputMessage.setFor("passwordEditInput");
        passwordEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(passwordEditInputMessage);
        
        HtmlOutputText emailEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailEditOutput.setId("emailEditOutput");
        emailEditOutput.setValue("Email: * ");
        htmlPanelGrid.getChildren().add(emailEditOutput);
        
        InputText emailEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        emailEditInput.setId("emailEditInput");
        emailEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.email}", String.class));
        RegexValidator emailEditInputRegexValidator = new RegexValidator();
        emailEditInputRegexValidator.setPattern("[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z0-9]+");
        emailEditInput.addValidator(emailEditInputRegexValidator);
        htmlPanelGrid.getChildren().add(emailEditInput);
        
        Message emailEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailEditInputMessage.setId("emailEditInputMessage");
        emailEditInputMessage.setFor("emailEditInput");
        emailEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailEditInputMessage);
        
        HtmlOutputText ldapEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ldapEditOutput.setId("ldapEditOutput");
        ldapEditOutput.setValue("Ldap:   ");
        htmlPanelGrid.getChildren().add(ldapEditOutput);
        
        Spinner ldapEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        ldapEditInput.setId("ldapEditInput");
        ldapEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.ldap}", Integer.class));
        ldapEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(ldapEditInput);
        
        Message ldapEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        ldapEditInputMessage.setId("ldapEditInputMessage");
        ldapEditInputMessage.setFor("ldapEditInput");
        ldapEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(ldapEditInputMessage);
        
        HtmlOutputText firstnameEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        firstnameEditOutput.setId("firstnameEditOutput");
        firstnameEditOutput.setValue("Firstname: * ");
        htmlPanelGrid.getChildren().add(firstnameEditOutput);
        
        InputText firstnameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        firstnameEditInput.setId("firstnameEditInput");
        firstnameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.firstname}", String.class));
        LengthValidator firstnameEditInputValidator = new LengthValidator();
        firstnameEditInputValidator.setMaximum(25);
        firstnameEditInput.addValidator(firstnameEditInputValidator);
        firstnameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(firstnameEditInput);
        
        Message firstnameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        firstnameEditInputMessage.setId("firstnameEditInputMessage");
        firstnameEditInputMessage.setFor("firstnameEditInput");
        firstnameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(firstnameEditInputMessage);
        
        HtmlOutputText lastnameEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastnameEditOutput.setId("lastnameEditOutput");
        lastnameEditOutput.setValue("Lastname: * ");
        htmlPanelGrid.getChildren().add(lastnameEditOutput);
        
        InputText lastnameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        lastnameEditInput.setId("lastnameEditInput");
        lastnameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.lastname}", String.class));
        LengthValidator lastnameEditInputValidator = new LengthValidator();
        lastnameEditInputValidator.setMaximum(25);
        lastnameEditInput.addValidator(lastnameEditInputValidator);
        lastnameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(lastnameEditInput);
        
        Message lastnameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastnameEditInputMessage.setId("lastnameEditInputMessage");
        lastnameEditInputMessage.setFor("lastnameEditInput");
        lastnameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastnameEditInputMessage);
        
        HtmlOutputText dateofbirthEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dateofbirthEditOutput.setId("dateofbirthEditOutput");
        dateofbirthEditOutput.setValue("Dateofbirth:   ");
        htmlPanelGrid.getChildren().add(dateofbirthEditOutput);
        
        Calendar dateofbirthEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        dateofbirthEditInput.setId("dateofbirthEditInput");
        dateofbirthEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.dateofbirth}", Date.class));
        dateofbirthEditInput.setNavigator(true);
        dateofbirthEditInput.setEffect("slideDown");
        dateofbirthEditInput.setPattern("dd/MM/yyyy");
        dateofbirthEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dateofbirthEditInput);
        
        Message dateofbirthEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dateofbirthEditInputMessage.setId("dateofbirthEditInputMessage");
        dateofbirthEditInputMessage.setFor("dateofbirthEditInput");
        dateofbirthEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dateofbirthEditInputMessage);
        
        HtmlOutputText pictureEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pictureEditOutput.setId("pictureEditOutput");
        pictureEditOutput.setValue("Picture: * ");
        htmlPanelGrid.getChildren().add(pictureEditOutput);
        
        InputText pictureEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        pictureEditInput.setId("pictureEditInput");
        pictureEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.picture}", String.class));
        LengthValidator pictureEditInputValidator = new LengthValidator();
        pictureEditInputValidator.setMaximum(25);
        pictureEditInput.addValidator(pictureEditInputValidator);
        pictureEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(pictureEditInput);
        
        Message pictureEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pictureEditInputMessage.setId("pictureEditInputMessage");
        pictureEditInputMessage.setFor("pictureEditInput");
        pictureEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pictureEditInputMessage);
        
        HtmlOutputText jobEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        jobEditOutput.setId("jobEditOutput");
        jobEditOutput.setValue("Job:   ");
        htmlPanelGrid.getChildren().add(jobEditOutput);
        
        AutoComplete jobEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        jobEditInput.setId("jobEditInput");
        jobEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.job}", JJJob.class));
        jobEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJContactBean.completeJob}", List.class, new Class[] { String.class }));
        jobEditInput.setDropdown(true);
        jobEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "job", String.class));
        jobEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{job.name} #{job.description} #{job.creationDate} #{job.updatedDate}", String.class));
        jobEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{job}", JJJob.class));
        jobEditInput.setConverter(new JJJobConverter());
        jobEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(jobEditInput);
        
        Message jobEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        jobEditInputMessage.setId("jobEditInputMessage");
        jobEditInputMessage.setFor("jobEditInput");
        jobEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(jobEditInputMessage);
        
        HtmlOutputText rightsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rightsEditOutput.setId("rightsEditOutput");
        rightsEditOutput.setValue("Rights:   ");
        htmlPanelGrid.getChildren().add(rightsEditOutput);
        
        SelectManyMenu rightsEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        rightsEditInput.setId("rightsEditInput");
        rightsEditInput.setConverter(new JJRightConverter());
        rightsEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.selectedRights}", List.class));
        UISelectItems rightsEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        rightsEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.allJJRights}", List.class));
        rightsEditInput.setRequired(false);
        rightsEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJRight", String.class));
        rightsEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJRight}", String.class));
        rightsEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJRight}", JJRight.class));
        rightsEditInput.getChildren().add(rightsEditInputItems);
        htmlPanelGrid.getChildren().add(rightsEditInput);
        
        Message rightsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        rightsEditInputMessage.setId("rightsEditInputMessage");
        rightsEditInputMessage.setFor("rightsEditInput");
        rightsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(rightsEditInputMessage);
        
        HtmlOutputText productsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productsEditOutput.setId("productsEditOutput");
        productsEditOutput.setValue("Products:   ");
        htmlPanelGrid.getChildren().add(productsEditOutput);
        
        SelectManyMenu productsEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        productsEditInput.setId("productsEditInput");
        productsEditInput.setConverter(new JJProductConverter());
        productsEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.selectedProducts}", List.class));
        UISelectItems productsEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        productsEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJProductBean.allJJProducts}", List.class));
        productsEditInput.setRequired(false);
        productsEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJProduct", String.class));
        productsEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJProduct}", String.class));
        productsEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJProduct}", JJProduct.class));
        productsEditInput.getChildren().add(productsEditInputItems);
        htmlPanelGrid.getChildren().add(productsEditInput);
        
        Message productsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productsEditInputMessage.setId("productsEditInputMessage");
        productsEditInputMessage.setFor("productsEditInput");
        productsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productsEditInputMessage);
        
        HtmlOutputText projectsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectsEditOutput.setId("projectsEditOutput");
        projectsEditOutput.setValue("Projects:   ");
        htmlPanelGrid.getChildren().add(projectsEditOutput);
        
        SelectManyMenu projectsEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        projectsEditInput.setId("projectsEditInput");
        projectsEditInput.setConverter(new JJProjectConverter());
        projectsEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.selectedProjects}", List.class));
        UISelectItems projectsEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        projectsEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJProjectBean.allJJProjects}", List.class));
        projectsEditInput.setRequired(false);
        projectsEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJProject", String.class));
        projectsEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJProject}", String.class));
        projectsEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJProject}", JJProject.class));
        projectsEditInput.getChildren().add(projectsEditInputItems);
        htmlPanelGrid.getChildren().add(projectsEditInput);
        
        Message projectsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectsEditInputMessage.setId("projectsEditInputMessage");
        projectsEditInputMessage.setFor("projectsEditInput");
        projectsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectsEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJContactBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:   ");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText descriptionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionLabel.setId("descriptionLabel");
        descriptionLabel.setValue("Description:   ");
        htmlPanelGrid.getChildren().add(descriptionLabel);
        
        InputTextarea descriptionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionValue.setId("descriptionValue");
        descriptionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.description}", String.class));
        descriptionValue.setReadonly(true);
        descriptionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descriptionValue);
        
        HtmlOutputText creationDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateLabel.setId("creationDateLabel");
        creationDateLabel.setValue("Creation Date:   ");
        htmlPanelGrid.getChildren().add(creationDateLabel);
        
        HtmlOutputText creationDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.creationDate}", Date.class));
        DateTimeConverter creationDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationDateValueConverter.setPattern("dd/MM/yyyy");
        creationDateValue.setConverter(creationDateValueConverter);
        htmlPanelGrid.getChildren().add(creationDateValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.createdBy}", JJContact.class));
        createdByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        HtmlOutputText updatedDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateLabel.setId("updatedDateLabel");
        updatedDateLabel.setValue("Updated Date:   ");
        htmlPanelGrid.getChildren().add(updatedDateLabel);
        
        HtmlOutputText updatedDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.updatedDate}", Date.class));
        DateTimeConverter updatedDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updatedDateValueConverter.setPattern("dd/MM/yyyy");
        updatedDateValue.setConverter(updatedDateValueConverter);
        htmlPanelGrid.getChildren().add(updatedDateValue);
        
        HtmlOutputText updatedByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByLabel.setId("updatedByLabel");
        updatedByLabel.setValue("Updated By:   ");
        htmlPanelGrid.getChildren().add(updatedByLabel);
        
        HtmlOutputText updatedByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.updatedBy}", JJContact.class));
        updatedByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(updatedByValue);
        
        HtmlOutputText enabledLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledLabel.setId("enabledLabel");
        enabledLabel.setValue("Enabled:   ");
        htmlPanelGrid.getChildren().add(enabledLabel);
        
        HtmlOutputText enabledValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.enabled}", String.class));
        htmlPanelGrid.getChildren().add(enabledValue);
        
        HtmlOutputText passwordLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordLabel.setId("passwordLabel");
        passwordLabel.setValue("Password:   ");
        htmlPanelGrid.getChildren().add(passwordLabel);
        
        HtmlOutputText passwordValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordValue.setId("passwordValue");
        passwordValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.password}", String.class));
        htmlPanelGrid.getChildren().add(passwordValue);
        
        HtmlOutputText emailLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailLabel.setId("emailLabel");
        emailLabel.setValue("Email:   ");
        htmlPanelGrid.getChildren().add(emailLabel);
        
        HtmlOutputText emailValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailValue.setId("emailValue");
        emailValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.email}", String.class));
        htmlPanelGrid.getChildren().add(emailValue);
        
        HtmlOutputText ldapLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ldapLabel.setId("ldapLabel");
        ldapLabel.setValue("Ldap:   ");
        htmlPanelGrid.getChildren().add(ldapLabel);
        
        HtmlOutputText ldapValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ldapValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.ldap}", String.class));
        htmlPanelGrid.getChildren().add(ldapValue);
        
        HtmlOutputText firstnameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        firstnameLabel.setId("firstnameLabel");
        firstnameLabel.setValue("Firstname:   ");
        htmlPanelGrid.getChildren().add(firstnameLabel);
        
        HtmlOutputText firstnameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        firstnameValue.setId("firstnameValue");
        firstnameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.firstname}", String.class));
        htmlPanelGrid.getChildren().add(firstnameValue);
        
        HtmlOutputText lastnameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastnameLabel.setId("lastnameLabel");
        lastnameLabel.setValue("Lastname:   ");
        htmlPanelGrid.getChildren().add(lastnameLabel);
        
        HtmlOutputText lastnameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastnameValue.setId("lastnameValue");
        lastnameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.lastname}", String.class));
        htmlPanelGrid.getChildren().add(lastnameValue);
        
        HtmlOutputText dateofbirthLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dateofbirthLabel.setId("dateofbirthLabel");
        dateofbirthLabel.setValue("Dateofbirth:   ");
        htmlPanelGrid.getChildren().add(dateofbirthLabel);
        
        HtmlOutputText dateofbirthValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dateofbirthValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.dateofbirth}", Date.class));
        DateTimeConverter dateofbirthValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        dateofbirthValueConverter.setPattern("dd/MM/yyyy");
        dateofbirthValue.setConverter(dateofbirthValueConverter);
        htmlPanelGrid.getChildren().add(dateofbirthValue);
        
        HtmlOutputText pictureLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pictureLabel.setId("pictureLabel");
        pictureLabel.setValue("Picture:   ");
        htmlPanelGrid.getChildren().add(pictureLabel);
        
        HtmlOutputText pictureValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pictureValue.setId("pictureValue");
        pictureValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.picture}", String.class));
        htmlPanelGrid.getChildren().add(pictureValue);
        
        HtmlOutputText jobLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        jobLabel.setId("jobLabel");
        jobLabel.setValue("Job:   ");
        htmlPanelGrid.getChildren().add(jobLabel);
        
        HtmlOutputText jobValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        jobValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.job}", JJJob.class));
        jobValue.setConverter(new JJJobConverter());
        htmlPanelGrid.getChildren().add(jobValue);
        
        HtmlOutputText rightsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rightsLabel.setId("rightsLabel");
        rightsLabel.setValue("Rights:   ");
        htmlPanelGrid.getChildren().add(rightsLabel);
        
        SelectManyMenu rightsValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        rightsValue.setId("rightsValue");
        rightsValue.setConverter(new JJRightConverter());
        rightsValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.selectedRights}", List.class));
        UISelectItems rightsValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        rightsValue.setReadonly(true);
        rightsValue.setDisabled(true);
        rightsValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.rights}", Set.class));
        rightsValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJRight", String.class));
        rightsValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJRight}", String.class));
        rightsValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJRight}", JJRight.class));
        rightsValue.getChildren().add(rightsValueItems);
        htmlPanelGrid.getChildren().add(rightsValue);
        
        HtmlOutputText productsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productsLabel.setId("productsLabel");
        productsLabel.setValue("Products:   ");
        htmlPanelGrid.getChildren().add(productsLabel);
        
        SelectManyMenu productsValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        productsValue.setId("productsValue");
        productsValue.setConverter(new JJProductConverter());
        productsValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.selectedProducts}", List.class));
        UISelectItems productsValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        productsValue.setReadonly(true);
        productsValue.setDisabled(true);
        productsValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.products}", Set.class));
        productsValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJProduct", String.class));
        productsValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJProduct}", String.class));
        productsValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJProduct}", JJProduct.class));
        productsValue.getChildren().add(productsValueItems);
        htmlPanelGrid.getChildren().add(productsValue);
        
        HtmlOutputText projectsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectsLabel.setId("projectsLabel");
        projectsLabel.setValue("Projects:   ");
        htmlPanelGrid.getChildren().add(projectsLabel);
        
        SelectManyMenu projectsValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        projectsValue.setId("projectsValue");
        projectsValue.setConverter(new JJProjectConverter());
        projectsValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.selectedProjects}", List.class));
        UISelectItems projectsValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        projectsValue.setReadonly(true);
        projectsValue.setDisabled(true);
        projectsValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJContactBean.JJContact_.projects}", Set.class));
        projectsValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jJProject", String.class));
        projectsValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jJProject}", String.class));
        projectsValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jJProject}", JJProject.class));
        projectsValue.getChildren().add(projectsValueItems);
        htmlPanelGrid.getChildren().add(projectsValue);
        
        return htmlPanelGrid;
    }
    
    public JJContact JJContactBean.getJJContact_() {
        if (JJContact_ == null) {
            JJContact_ = new JJContact();
        }
        return JJContact_;
    }
    
    public void JJContactBean.setJJContact_(JJContact JJContact_) {
        this.JJContact_ = JJContact_;
    }
    
    public List<JJContact> JJContactBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJContactBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJJob> JJContactBean.completeJob(String query) {
        List<JJJob> suggestions = new ArrayList<JJJob>();
        for (JJJob jJJob : jJJobService.findAllJJJobs()) {
            String jJJobStr = String.valueOf(jJJob.getName() +  " "  + jJJob.getDescription() +  " "  + jJJob.getCreationDate() +  " "  + jJJob.getUpdatedDate());
            if (jJJobStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJJob);
            }
        }
        return suggestions;
    }
    
    public List<JJRight> JJContactBean.getSelectedRights() {
        return selectedRights;
    }
    
    public void JJContactBean.setSelectedRights(List<JJRight> selectedRights) {
        if (selectedRights != null) {
            JJContact_.setRights(new HashSet<JJRight>(selectedRights));
        }
        this.selectedRights = selectedRights;
    }
    
    public List<JJProduct> JJContactBean.getSelectedProducts() {
        return selectedProducts;
    }
    
    public void JJContactBean.setSelectedProducts(List<JJProduct> selectedProducts) {
        if (selectedProducts != null) {
            JJContact_.setProducts(new HashSet<JJProduct>(selectedProducts));
        }
        this.selectedProducts = selectedProducts;
    }
    
    public List<JJProject> JJContactBean.getSelectedProjects() {
        return selectedProjects;
    }
    
    public void JJContactBean.setSelectedProjects(List<JJProject> selectedProjects) {
        if (selectedProjects != null) {
            JJContact_.setProjects(new HashSet<JJProject>(selectedProjects));
        }
        this.selectedProjects = selectedProjects;
    }
    
    public String JJContactBean.onEdit() {
        if (JJContact_ != null && JJContact_.getRights() != null) {
            selectedRights = new ArrayList<JJRight>(JJContact_.getRights());
        }
        if (JJContact_ != null && JJContact_.getProducts() != null) {
            selectedProducts = new ArrayList<JJProduct>(JJContact_.getProducts());
        }
        if (JJContact_ != null && JJContact_.getProjects() != null) {
            selectedProjects = new ArrayList<JJProject>(JJContact_.getProjects());
        }
        return null;
    }
    
    public boolean JJContactBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJContactBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJContactBean.displayList() {
        createDialogVisible = false;
        findAllJJContacts();
        return "JJContact_";
    }
    
    public String JJContactBean.displayCreateDialog() {
        JJContact_ = new JJContact();
        createDialogVisible = true;
        return "JJContact_";
    }
    
    public String JJContactBean.persist() {
        String message = "";
        if (JJContact_.getId() != null) {
            jJContactService.updateJJContact(JJContact_);
            message = "Successfully updated";
        } else {
            jJContactService.saveJJContact(JJContact_);
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJContacts();
    }
    
    public String JJContactBean.delete() {
        jJContactService.deleteJJContact(JJContact_);
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJContacts();
    }
    
    public void JJContactBean.reset() {
        JJContact_ = null;
        selectedRights = null;
        selectedProducts = null;
        selectedProjects = null;
        createDialogVisible = false;
    }
    
    public void JJContactBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.funder.janjoonweb.ui.mb;

import com.funder.janjoonweb.domain.JJBug;
import com.funder.janjoonweb.domain.JJBugService;
import com.funder.janjoonweb.domain.JJContact;
import com.funder.janjoonweb.domain.JJContactService;
import com.funder.janjoonweb.domain.JJMessage;
import com.funder.janjoonweb.domain.JJProject;
import com.funder.janjoonweb.domain.JJProjectService;
import com.funder.janjoonweb.domain.JJRequirement;
import com.funder.janjoonweb.domain.JJRequirementService;
import com.funder.janjoonweb.domain.JJTask;
import com.funder.janjoonweb.domain.JJTaskService;
import com.funder.janjoonweb.domain.JJVersion;
import com.funder.janjoonweb.domain.JJVersionService;
import com.funder.janjoonweb.ui.mb.JJTaskBean;
import com.funder.janjoonweb.ui.mb.converter.JJBugConverter;
import com.funder.janjoonweb.ui.mb.converter.JJContactConverter;
import com.funder.janjoonweb.ui.mb.converter.JJProjectConverter;
import com.funder.janjoonweb.ui.mb.converter.JJRequirementConverter;
import com.funder.janjoonweb.ui.mb.converter.JJVersionConverter;
import com.funder.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJTaskBean_Roo_ManagedBean {
    
    declare @type: JJTaskBean: @ManagedBean(name = "jJTaskBean");
    
    declare @type: JJTaskBean: @SessionScoped;
    
    @Autowired
    JJTaskService JJTaskBean.jJTaskService;
    
    @Autowired
    JJContactService JJTaskBean.jJContactService;
    
    @Autowired
    JJProjectService JJTaskBean.jJProjectService;
    
    @Autowired
    JJVersionService JJTaskBean.jJVersionService;
    
    @Autowired
    JJBugService JJTaskBean.jJBugService;
    
    @Autowired
    JJRequirementService JJTaskBean.jJRequirementService;
    
    private String JJTaskBean.name = "JJTasks";
    
    private JJTask JJTaskBean.JJTask_;
    
    private List<JJTask> JJTaskBean.allJJTasks;
    
    private boolean JJTaskBean.dataVisible = false;
    
    private List<String> JJTaskBean.columns;
    
    private HtmlPanelGrid JJTaskBean.createPanelGrid;
    
    private HtmlPanelGrid JJTaskBean.editPanelGrid;
    
    private HtmlPanelGrid JJTaskBean.viewPanelGrid;
    
    private boolean JJTaskBean.createDialogVisible = false;
    
    private List<JJContact> JJTaskBean.selectedAssignedTos;
    
    private List<JJMessage> JJTaskBean.selectedMessages;
    
    @PostConstruct
    public void JJTaskBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
        columns.add("startDate");
    }
    
    public String JJTaskBean.getName() {
        return name;
    }
    
    public List<String> JJTaskBean.getColumns() {
        return columns;
    }
    
    public List<JJTask> JJTaskBean.getAllJJTasks() {
        return allJJTasks;
    }
    
    public void JJTaskBean.setAllJJTasks(List<JJTask> allJJTasks) {
        this.allJJTasks = allJJTasks;
    }
    
    public String JJTaskBean.findAllJJTasks() {
        allJJTasks = jJTaskService.findAllJJTasks();
        dataVisible = !allJJTasks.isEmpty();
        return null;
    }
    
    public boolean JJTaskBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJTaskBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJTaskBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJTaskBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJTaskBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJTaskBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJTaskBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJTaskBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJTaskBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMaximum(25);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel descriptionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionCreateOutput.setFor("descriptionCreateInput");
        descriptionCreateOutput.setId("descriptionCreateOutput");
        descriptionCreateOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionCreateOutput);
        
        InputTextarea descriptionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionCreateInput.setId("descriptionCreateInput");
        descriptionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.description}", String.class));
        LengthValidator descriptionCreateInputValidator = new LengthValidator();
        descriptionCreateInputValidator.setMaximum(500);
        descriptionCreateInput.addValidator(descriptionCreateInputValidator);
        descriptionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionCreateInput);
        
        Message descriptionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionCreateInputMessage.setId("descriptionCreateInputMessage");
        descriptionCreateInputMessage.setFor("descriptionCreateInput");
        descriptionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionCreateInputMessage);
        
        OutputLabel creationDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateCreateOutput.setFor("creationDateCreateInput");
        creationDateCreateOutput.setId("creationDateCreateOutput");
        creationDateCreateOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateCreateOutput);
        
        Calendar creationDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateCreateInput.setId("creationDateCreateInput");
        creationDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.creationDate}", Date.class));
        creationDateCreateInput.setNavigator(true);
        creationDateCreateInput.setEffect("slideDown");
        creationDateCreateInput.setPattern("dd/MM/yyyy");
        creationDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateCreateInput);
        
        Message creationDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateCreateInputMessage.setId("creationDateCreateInputMessage");
        creationDateCreateInputMessage.setFor("creationDateCreateInput");
        creationDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateCreateInputMessage);
        
        OutputLabel createdByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByCreateOutput.setFor("createdByCreateInput");
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.createdBy}", JJContact.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByCreateInput.setConverter(new JJContactConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        OutputLabel updatedDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateCreateOutput.setFor("updatedDateCreateInput");
        updatedDateCreateOutput.setId("updatedDateCreateOutput");
        updatedDateCreateOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateCreateOutput);
        
        Calendar updatedDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateCreateInput.setId("updatedDateCreateInput");
        updatedDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.updatedDate}", Date.class));
        updatedDateCreateInput.setNavigator(true);
        updatedDateCreateInput.setEffect("slideDown");
        updatedDateCreateInput.setPattern("dd/MM/yyyy");
        updatedDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateCreateInput);
        
        Message updatedDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateCreateInputMessage.setId("updatedDateCreateInputMessage");
        updatedDateCreateInputMessage.setFor("updatedDateCreateInput");
        updatedDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateCreateInputMessage);
        
        OutputLabel updatedByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByCreateOutput.setFor("updatedByCreateInput");
        updatedByCreateOutput.setId("updatedByCreateOutput");
        updatedByCreateOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByCreateOutput);
        
        AutoComplete updatedByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByCreateInput.setId("updatedByCreateInput");
        updatedByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.updatedBy}", JJContact.class));
        updatedByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByCreateInput.setDropdown(true);
        updatedByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByCreateInput.setConverter(new JJContactConverter());
        updatedByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByCreateInput);
        
        Message updatedByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByCreateInputMessage.setId("updatedByCreateInputMessage");
        updatedByCreateInputMessage.setFor("updatedByCreateInput");
        updatedByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByCreateInputMessage);
        
        OutputLabel enabledCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledCreateOutput.setFor("enabledCreateInput");
        enabledCreateOutput.setId("enabledCreateOutput");
        enabledCreateOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledCreateOutput);
        
        SelectBooleanCheckbox enabledCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledCreateInput.setId("enabledCreateInput");
        enabledCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.enabled}", Boolean.class));
        enabledCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledCreateInput);
        
        Message enabledCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledCreateInputMessage.setId("enabledCreateInputMessage");
        enabledCreateInputMessage.setFor("enabledCreateInput");
        enabledCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledCreateInputMessage);
        
        OutputLabel projectCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        projectCreateOutput.setFor("projectCreateInput");
        projectCreateOutput.setId("projectCreateOutput");
        projectCreateOutput.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectCreateOutput);
        
        AutoComplete projectCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        projectCreateInput.setId("projectCreateInput");
        projectCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.project}", JJProject.class));
        projectCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeProject}", List.class, new Class[] { String.class }));
        projectCreateInput.setDropdown(true);
        projectCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "project", String.class));
        projectCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{project.name} #{project.description} #{project.creationDate} #{project.updatedDate}", String.class));
        projectCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{project}", JJProject.class));
        projectCreateInput.setConverter(new JJProjectConverter());
        projectCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(projectCreateInput);
        
        Message projectCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectCreateInputMessage.setId("projectCreateInputMessage");
        projectCreateInputMessage.setFor("projectCreateInput");
        projectCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectCreateInputMessage);
        
        OutputLabel startDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        startDateCreateOutput.setFor("startDateCreateInput");
        startDateCreateOutput.setId("startDateCreateOutput");
        startDateCreateOutput.setValue("Start Date:");
        htmlPanelGrid.getChildren().add(startDateCreateOutput);
        
        Calendar startDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        startDateCreateInput.setId("startDateCreateInput");
        startDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.startDate}", Date.class));
        startDateCreateInput.setNavigator(true);
        startDateCreateInput.setEffect("slideDown");
        startDateCreateInput.setPattern("dd/MM/yyyy");
        startDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(startDateCreateInput);
        
        Message startDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        startDateCreateInputMessage.setId("startDateCreateInputMessage");
        startDateCreateInputMessage.setFor("startDateCreateInput");
        startDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(startDateCreateInputMessage);
        
        OutputLabel endDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        endDateCreateOutput.setFor("endDateCreateInput");
        endDateCreateOutput.setId("endDateCreateOutput");
        endDateCreateOutput.setValue("End Date:");
        htmlPanelGrid.getChildren().add(endDateCreateOutput);
        
        Calendar endDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        endDateCreateInput.setId("endDateCreateInput");
        endDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.endDate}", Date.class));
        endDateCreateInput.setNavigator(true);
        endDateCreateInput.setEffect("slideDown");
        endDateCreateInput.setPattern("dd/MM/yyyy");
        endDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(endDateCreateInput);
        
        Message endDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        endDateCreateInputMessage.setId("endDateCreateInputMessage");
        endDateCreateInputMessage.setFor("endDateCreateInput");
        endDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(endDateCreateInputMessage);
        
        OutputLabel workloadCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadCreateOutput.setFor("workloadCreateInput");
        workloadCreateOutput.setId("workloadCreateOutput");
        workloadCreateOutput.setValue("Workload:");
        htmlPanelGrid.getChildren().add(workloadCreateOutput);
        
        Spinner workloadCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadCreateInput.setId("workloadCreateInput");
        workloadCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workload}", Integer.class));
        workloadCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadCreateInput);
        
        Message workloadCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadCreateInputMessage.setId("workloadCreateInputMessage");
        workloadCreateInputMessage.setFor("workloadCreateInput");
        workloadCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadCreateInputMessage);
        
        OutputLabel jjversionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        jjversionCreateOutput.setFor("jjversionCreateInput");
        jjversionCreateOutput.setId("jjversionCreateOutput");
        jjversionCreateOutput.setValue("Jjversion:");
        htmlPanelGrid.getChildren().add(jjversionCreateOutput);
        
        AutoComplete jjversionCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        jjversionCreateInput.setId("jjversionCreateInput");
        jjversionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.jjversion}", JJVersion.class));
        jjversionCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeJjversion}", List.class, new Class[] { String.class }));
        jjversionCreateInput.setDropdown(true);
        jjversionCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jjversion", String.class));
        jjversionCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jjversion.name} #{jjversion.description} #{jjversion.creationDate} #{jjversion.updatedDate}", String.class));
        jjversionCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jjversion}", JJVersion.class));
        jjversionCreateInput.setConverter(new JJVersionConverter());
        jjversionCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(jjversionCreateInput);
        
        Message jjversionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        jjversionCreateInputMessage.setId("jjversionCreateInputMessage");
        jjversionCreateInputMessage.setFor("jjversionCreateInput");
        jjversionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(jjversionCreateInputMessage);
        
        OutputLabel bugCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        bugCreateOutput.setFor("bugCreateInput");
        bugCreateOutput.setId("bugCreateOutput");
        bugCreateOutput.setValue("Bug:");
        htmlPanelGrid.getChildren().add(bugCreateOutput);
        
        AutoComplete bugCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        bugCreateInput.setId("bugCreateInput");
        bugCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.bug}", JJBug.class));
        bugCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeBug}", List.class, new Class[] { String.class }));
        bugCreateInput.setDropdown(true);
        bugCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "bug", String.class));
        bugCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{bug.name} #{bug.description} #{bug.creationDate} #{bug.updatedDate}", String.class));
        bugCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{bug}", JJBug.class));
        bugCreateInput.setConverter(new JJBugConverter());
        bugCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(bugCreateInput);
        
        Message bugCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bugCreateInputMessage.setId("bugCreateInputMessage");
        bugCreateInputMessage.setFor("bugCreateInput");
        bugCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bugCreateInputMessage);
        
        OutputLabel requirementCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        requirementCreateOutput.setFor("requirementCreateInput");
        requirementCreateOutput.setId("requirementCreateOutput");
        requirementCreateOutput.setValue("Requirement:");
        htmlPanelGrid.getChildren().add(requirementCreateOutput);
        
        AutoComplete requirementCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        requirementCreateInput.setId("requirementCreateInput");
        requirementCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.requirement}", JJRequirement.class));
        requirementCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeRequirement}", List.class, new Class[] { String.class }));
        requirementCreateInput.setDropdown(true);
        requirementCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "requirement", String.class));
        requirementCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{requirement.name} #{requirement.description} #{requirement.creationDate} #{requirement.updatedDate}", String.class));
        requirementCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{requirement}", JJRequirement.class));
        requirementCreateInput.setConverter(new JJRequirementConverter());
        requirementCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(requirementCreateInput);
        
        Message requirementCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementCreateInputMessage.setId("requirementCreateInputMessage");
        requirementCreateInputMessage.setFor("requirementCreateInput");
        requirementCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementCreateInputMessage);
        
        HtmlOutputText assignedTosCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedTosCreateOutput.setId("assignedTosCreateOutput");
        assignedTosCreateOutput.setValue("Assigned Tos:");
        htmlPanelGrid.getChildren().add(assignedTosCreateOutput);
        
        HtmlOutputText assignedTosCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedTosCreateInput.setId("assignedTosCreateInput");
        assignedTosCreateInput.setValue("This relationship is managed from the JJContact side");
        htmlPanelGrid.getChildren().add(assignedTosCreateInput);
        
        Message assignedTosCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        assignedTosCreateInputMessage.setId("assignedTosCreateInputMessage");
        assignedTosCreateInputMessage.setFor("assignedTosCreateInput");
        assignedTosCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(assignedTosCreateInputMessage);
        
        HtmlOutputText messagesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesCreateOutput.setId("messagesCreateOutput");
        messagesCreateOutput.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesCreateOutput);
        
        HtmlOutputText messagesCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesCreateInput.setId("messagesCreateInput");
        messagesCreateInput.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesCreateInput);
        
        Message messagesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messagesCreateInputMessage.setId("messagesCreateInputMessage");
        messagesCreateInputMessage.setFor("messagesCreateInput");
        messagesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messagesCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJTaskBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMaximum(25);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel descriptionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionEditOutput.setFor("descriptionEditInput");
        descriptionEditOutput.setId("descriptionEditOutput");
        descriptionEditOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionEditOutput);
        
        InputTextarea descriptionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionEditInput.setId("descriptionEditInput");
        descriptionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.description}", String.class));
        LengthValidator descriptionEditInputValidator = new LengthValidator();
        descriptionEditInputValidator.setMaximum(500);
        descriptionEditInput.addValidator(descriptionEditInputValidator);
        descriptionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionEditInput);
        
        Message descriptionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionEditInputMessage.setId("descriptionEditInputMessage");
        descriptionEditInputMessage.setFor("descriptionEditInput");
        descriptionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionEditInputMessage);
        
        OutputLabel creationDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateEditOutput.setFor("creationDateEditInput");
        creationDateEditOutput.setId("creationDateEditOutput");
        creationDateEditOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateEditOutput);
        
        Calendar creationDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateEditInput.setId("creationDateEditInput");
        creationDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.creationDate}", Date.class));
        creationDateEditInput.setNavigator(true);
        creationDateEditInput.setEffect("slideDown");
        creationDateEditInput.setPattern("dd/MM/yyyy");
        creationDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateEditInput);
        
        Message creationDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateEditInputMessage.setId("creationDateEditInputMessage");
        creationDateEditInputMessage.setFor("creationDateEditInput");
        creationDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateEditInputMessage);
        
        OutputLabel createdByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByEditOutput.setFor("createdByEditInput");
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.createdBy}", JJContact.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByEditInput.setConverter(new JJContactConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        OutputLabel updatedDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateEditOutput.setFor("updatedDateEditInput");
        updatedDateEditOutput.setId("updatedDateEditOutput");
        updatedDateEditOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateEditOutput);
        
        Calendar updatedDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateEditInput.setId("updatedDateEditInput");
        updatedDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.updatedDate}", Date.class));
        updatedDateEditInput.setNavigator(true);
        updatedDateEditInput.setEffect("slideDown");
        updatedDateEditInput.setPattern("dd/MM/yyyy");
        updatedDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateEditInput);
        
        Message updatedDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateEditInputMessage.setId("updatedDateEditInputMessage");
        updatedDateEditInputMessage.setFor("updatedDateEditInput");
        updatedDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateEditInputMessage);
        
        OutputLabel updatedByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByEditOutput.setFor("updatedByEditInput");
        updatedByEditOutput.setId("updatedByEditOutput");
        updatedByEditOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByEditOutput);
        
        AutoComplete updatedByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByEditInput.setId("updatedByEditInput");
        updatedByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.updatedBy}", JJContact.class));
        updatedByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByEditInput.setDropdown(true);
        updatedByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByEditInput.setConverter(new JJContactConverter());
        updatedByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByEditInput);
        
        Message updatedByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByEditInputMessage.setId("updatedByEditInputMessage");
        updatedByEditInputMessage.setFor("updatedByEditInput");
        updatedByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByEditInputMessage);
        
        OutputLabel enabledEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledEditOutput.setFor("enabledEditInput");
        enabledEditOutput.setId("enabledEditOutput");
        enabledEditOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledEditOutput);
        
        SelectBooleanCheckbox enabledEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledEditInput.setId("enabledEditInput");
        enabledEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.enabled}", Boolean.class));
        enabledEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledEditInput);
        
        Message enabledEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledEditInputMessage.setId("enabledEditInputMessage");
        enabledEditInputMessage.setFor("enabledEditInput");
        enabledEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledEditInputMessage);
        
        OutputLabel projectEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        projectEditOutput.setFor("projectEditInput");
        projectEditOutput.setId("projectEditOutput");
        projectEditOutput.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectEditOutput);
        
        AutoComplete projectEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        projectEditInput.setId("projectEditInput");
        projectEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.project}", JJProject.class));
        projectEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeProject}", List.class, new Class[] { String.class }));
        projectEditInput.setDropdown(true);
        projectEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "project", String.class));
        projectEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{project.name} #{project.description} #{project.creationDate} #{project.updatedDate}", String.class));
        projectEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{project}", JJProject.class));
        projectEditInput.setConverter(new JJProjectConverter());
        projectEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(projectEditInput);
        
        Message projectEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectEditInputMessage.setId("projectEditInputMessage");
        projectEditInputMessage.setFor("projectEditInput");
        projectEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectEditInputMessage);
        
        OutputLabel startDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        startDateEditOutput.setFor("startDateEditInput");
        startDateEditOutput.setId("startDateEditOutput");
        startDateEditOutput.setValue("Start Date:");
        htmlPanelGrid.getChildren().add(startDateEditOutput);
        
        Calendar startDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        startDateEditInput.setId("startDateEditInput");
        startDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.startDate}", Date.class));
        startDateEditInput.setNavigator(true);
        startDateEditInput.setEffect("slideDown");
        startDateEditInput.setPattern("dd/MM/yyyy");
        startDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(startDateEditInput);
        
        Message startDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        startDateEditInputMessage.setId("startDateEditInputMessage");
        startDateEditInputMessage.setFor("startDateEditInput");
        startDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(startDateEditInputMessage);
        
        OutputLabel endDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        endDateEditOutput.setFor("endDateEditInput");
        endDateEditOutput.setId("endDateEditOutput");
        endDateEditOutput.setValue("End Date:");
        htmlPanelGrid.getChildren().add(endDateEditOutput);
        
        Calendar endDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        endDateEditInput.setId("endDateEditInput");
        endDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.endDate}", Date.class));
        endDateEditInput.setNavigator(true);
        endDateEditInput.setEffect("slideDown");
        endDateEditInput.setPattern("dd/MM/yyyy");
        endDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(endDateEditInput);
        
        Message endDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        endDateEditInputMessage.setId("endDateEditInputMessage");
        endDateEditInputMessage.setFor("endDateEditInput");
        endDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(endDateEditInputMessage);
        
        OutputLabel workloadEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadEditOutput.setFor("workloadEditInput");
        workloadEditOutput.setId("workloadEditOutput");
        workloadEditOutput.setValue("Workload:");
        htmlPanelGrid.getChildren().add(workloadEditOutput);
        
        Spinner workloadEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadEditInput.setId("workloadEditInput");
        workloadEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workload}", Integer.class));
        workloadEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadEditInput);
        
        Message workloadEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadEditInputMessage.setId("workloadEditInputMessage");
        workloadEditInputMessage.setFor("workloadEditInput");
        workloadEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadEditInputMessage);
        
        OutputLabel jjversionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        jjversionEditOutput.setFor("jjversionEditInput");
        jjversionEditOutput.setId("jjversionEditOutput");
        jjversionEditOutput.setValue("Jjversion:");
        htmlPanelGrid.getChildren().add(jjversionEditOutput);
        
        AutoComplete jjversionEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        jjversionEditInput.setId("jjversionEditInput");
        jjversionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.jjversion}", JJVersion.class));
        jjversionEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeJjversion}", List.class, new Class[] { String.class }));
        jjversionEditInput.setDropdown(true);
        jjversionEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jjversion", String.class));
        jjversionEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jjversion.name} #{jjversion.description} #{jjversion.creationDate} #{jjversion.updatedDate}", String.class));
        jjversionEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jjversion}", JJVersion.class));
        jjversionEditInput.setConverter(new JJVersionConverter());
        jjversionEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(jjversionEditInput);
        
        Message jjversionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        jjversionEditInputMessage.setId("jjversionEditInputMessage");
        jjversionEditInputMessage.setFor("jjversionEditInput");
        jjversionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(jjversionEditInputMessage);
        
        OutputLabel bugEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        bugEditOutput.setFor("bugEditInput");
        bugEditOutput.setId("bugEditOutput");
        bugEditOutput.setValue("Bug:");
        htmlPanelGrid.getChildren().add(bugEditOutput);
        
        AutoComplete bugEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        bugEditInput.setId("bugEditInput");
        bugEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.bug}", JJBug.class));
        bugEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeBug}", List.class, new Class[] { String.class }));
        bugEditInput.setDropdown(true);
        bugEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "bug", String.class));
        bugEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{bug.name} #{bug.description} #{bug.creationDate} #{bug.updatedDate}", String.class));
        bugEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{bug}", JJBug.class));
        bugEditInput.setConverter(new JJBugConverter());
        bugEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(bugEditInput);
        
        Message bugEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bugEditInputMessage.setId("bugEditInputMessage");
        bugEditInputMessage.setFor("bugEditInput");
        bugEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bugEditInputMessage);
        
        OutputLabel requirementEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        requirementEditOutput.setFor("requirementEditInput");
        requirementEditOutput.setId("requirementEditOutput");
        requirementEditOutput.setValue("Requirement:");
        htmlPanelGrid.getChildren().add(requirementEditOutput);
        
        AutoComplete requirementEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        requirementEditInput.setId("requirementEditInput");
        requirementEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.requirement}", JJRequirement.class));
        requirementEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTaskBean.completeRequirement}", List.class, new Class[] { String.class }));
        requirementEditInput.setDropdown(true);
        requirementEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "requirement", String.class));
        requirementEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{requirement.name} #{requirement.description} #{requirement.creationDate} #{requirement.updatedDate}", String.class));
        requirementEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{requirement}", JJRequirement.class));
        requirementEditInput.setConverter(new JJRequirementConverter());
        requirementEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(requirementEditInput);
        
        Message requirementEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementEditInputMessage.setId("requirementEditInputMessage");
        requirementEditInputMessage.setFor("requirementEditInput");
        requirementEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementEditInputMessage);
        
        HtmlOutputText assignedTosEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedTosEditOutput.setId("assignedTosEditOutput");
        assignedTosEditOutput.setValue("Assigned Tos:");
        htmlPanelGrid.getChildren().add(assignedTosEditOutput);
        
        HtmlOutputText assignedTosEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedTosEditInput.setId("assignedTosEditInput");
        assignedTosEditInput.setValue("This relationship is managed from the JJContact side");
        htmlPanelGrid.getChildren().add(assignedTosEditInput);
        
        Message assignedTosEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        assignedTosEditInputMessage.setId("assignedTosEditInputMessage");
        assignedTosEditInputMessage.setFor("assignedTosEditInput");
        assignedTosEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(assignedTosEditInputMessage);
        
        HtmlOutputText messagesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesEditOutput.setId("messagesEditOutput");
        messagesEditOutput.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesEditOutput);
        
        HtmlOutputText messagesEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesEditInput.setId("messagesEditInput");
        messagesEditInput.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesEditInput);
        
        Message messagesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messagesEditInputMessage.setId("messagesEditInputMessage");
        messagesEditInputMessage.setFor("messagesEditInput");
        messagesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messagesEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJTaskBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText descriptionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionLabel.setId("descriptionLabel");
        descriptionLabel.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionLabel);
        
        InputTextarea descriptionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionValue.setId("descriptionValue");
        descriptionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.description}", String.class));
        descriptionValue.setReadonly(true);
        descriptionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descriptionValue);
        
        HtmlOutputText creationDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateLabel.setId("creationDateLabel");
        creationDateLabel.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateLabel);
        
        HtmlOutputText creationDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.creationDate}", Date.class));
        DateTimeConverter creationDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationDateValueConverter.setPattern("dd/MM/yyyy");
        creationDateValue.setConverter(creationDateValueConverter);
        htmlPanelGrid.getChildren().add(creationDateValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.createdBy}", JJContact.class));
        createdByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        HtmlOutputText updatedDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateLabel.setId("updatedDateLabel");
        updatedDateLabel.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateLabel);
        
        HtmlOutputText updatedDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.updatedDate}", Date.class));
        DateTimeConverter updatedDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updatedDateValueConverter.setPattern("dd/MM/yyyy");
        updatedDateValue.setConverter(updatedDateValueConverter);
        htmlPanelGrid.getChildren().add(updatedDateValue);
        
        HtmlOutputText updatedByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByLabel.setId("updatedByLabel");
        updatedByLabel.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByLabel);
        
        HtmlOutputText updatedByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.updatedBy}", JJContact.class));
        updatedByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(updatedByValue);
        
        HtmlOutputText enabledLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledLabel.setId("enabledLabel");
        enabledLabel.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledLabel);
        
        HtmlOutputText enabledValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.enabled}", String.class));
        htmlPanelGrid.getChildren().add(enabledValue);
        
        HtmlOutputText projectLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectLabel.setId("projectLabel");
        projectLabel.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectLabel);
        
        HtmlOutputText projectValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.project}", JJProject.class));
        projectValue.setConverter(new JJProjectConverter());
        htmlPanelGrid.getChildren().add(projectValue);
        
        HtmlOutputText startDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        startDateLabel.setId("startDateLabel");
        startDateLabel.setValue("Start Date:");
        htmlPanelGrid.getChildren().add(startDateLabel);
        
        HtmlOutputText startDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        startDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.startDate}", Date.class));
        DateTimeConverter startDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        startDateValueConverter.setPattern("dd/MM/yyyy");
        startDateValue.setConverter(startDateValueConverter);
        htmlPanelGrid.getChildren().add(startDateValue);
        
        HtmlOutputText endDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endDateLabel.setId("endDateLabel");
        endDateLabel.setValue("End Date:");
        htmlPanelGrid.getChildren().add(endDateLabel);
        
        HtmlOutputText endDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.endDate}", Date.class));
        DateTimeConverter endDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        endDateValueConverter.setPattern("dd/MM/yyyy");
        endDateValue.setConverter(endDateValueConverter);
        htmlPanelGrid.getChildren().add(endDateValue);
        
        HtmlOutputText workloadLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadLabel.setId("workloadLabel");
        workloadLabel.setValue("Workload:");
        htmlPanelGrid.getChildren().add(workloadLabel);
        
        HtmlOutputText workloadValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.workload}", String.class));
        htmlPanelGrid.getChildren().add(workloadValue);
        
        HtmlOutputText jjversionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        jjversionLabel.setId("jjversionLabel");
        jjversionLabel.setValue("Jjversion:");
        htmlPanelGrid.getChildren().add(jjversionLabel);
        
        HtmlOutputText jjversionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        jjversionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.jjversion}", JJVersion.class));
        jjversionValue.setConverter(new JJVersionConverter());
        htmlPanelGrid.getChildren().add(jjversionValue);
        
        HtmlOutputText bugLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugLabel.setId("bugLabel");
        bugLabel.setValue("Bug:");
        htmlPanelGrid.getChildren().add(bugLabel);
        
        HtmlOutputText bugValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.bug}", JJBug.class));
        bugValue.setConverter(new JJBugConverter());
        htmlPanelGrid.getChildren().add(bugValue);
        
        HtmlOutputText requirementLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementLabel.setId("requirementLabel");
        requirementLabel.setValue("Requirement:");
        htmlPanelGrid.getChildren().add(requirementLabel);
        
        HtmlOutputText requirementValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTaskBean.JJTask_.requirement}", JJRequirement.class));
        requirementValue.setConverter(new JJRequirementConverter());
        htmlPanelGrid.getChildren().add(requirementValue);
        
        HtmlOutputText assignedTosLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedTosLabel.setId("assignedTosLabel");
        assignedTosLabel.setValue("Assigned Tos:");
        htmlPanelGrid.getChildren().add(assignedTosLabel);
        
        HtmlOutputText assignedTosValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedTosValue.setId("assignedTosValue");
        assignedTosValue.setValue("This relationship is managed from the JJContact side");
        htmlPanelGrid.getChildren().add(assignedTosValue);
        
        HtmlOutputText messagesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesLabel.setId("messagesLabel");
        messagesLabel.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesLabel);
        
        HtmlOutputText messagesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesValue.setId("messagesValue");
        messagesValue.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesValue);
        
        return htmlPanelGrid;
    }
    
    public JJTask JJTaskBean.getJJTask_() {
        if (JJTask_ == null) {
            JJTask_ = new JJTask();
        }
        return JJTask_;
    }
    
    public void JJTaskBean.setJJTask_(JJTask JJTask_) {
        this.JJTask_ = JJTask_;
    }
    
    public List<JJContact> JJTaskBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJTaskBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJProject> JJTaskBean.completeProject(String query) {
        List<JJProject> suggestions = new ArrayList<JJProject>();
        for (JJProject jJProject : jJProjectService.findAllJJProjects()) {
            String jJProjectStr = String.valueOf(jJProject.getName() +  " "  + jJProject.getDescription() +  " "  + jJProject.getCreationDate() +  " "  + jJProject.getUpdatedDate());
            if (jJProjectStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJProject);
            }
        }
        return suggestions;
    }
    
    public List<JJVersion> JJTaskBean.completeJjversion(String query) {
        List<JJVersion> suggestions = new ArrayList<JJVersion>();
        for (JJVersion jJVersion : jJVersionService.findAllJJVersions()) {
            String jJVersionStr = String.valueOf(jJVersion.getName() +  " "  + jJVersion.getDescription() +  " "  + jJVersion.getCreationDate() +  " "  + jJVersion.getUpdatedDate());
            if (jJVersionStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJVersion);
            }
        }
        return suggestions;
    }
    
    public List<JJBug> JJTaskBean.completeBug(String query) {
        List<JJBug> suggestions = new ArrayList<JJBug>();
        for (JJBug jJBug : jJBugService.findAllJJBugs()) {
            String jJBugStr = String.valueOf(jJBug.getName() +  " "  + jJBug.getDescription() +  " "  + jJBug.getCreationDate() +  " "  + jJBug.getUpdatedDate());
            if (jJBugStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJBug);
            }
        }
        return suggestions;
    }
    
    public List<JJRequirement> JJTaskBean.completeRequirement(String query) {
        List<JJRequirement> suggestions = new ArrayList<JJRequirement>();
        for (JJRequirement jJRequirement : jJRequirementService.findAllJJRequirements()) {
            String jJRequirementStr = String.valueOf(jJRequirement.getName() +  " "  + jJRequirement.getDescription() +  " "  + jJRequirement.getCreationDate() +  " "  + jJRequirement.getUpdatedDate());
            if (jJRequirementStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJRequirement);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJTaskBean.getSelectedAssignedTos() {
        return selectedAssignedTos;
    }
    
    public void JJTaskBean.setSelectedAssignedTos(List<JJContact> selectedAssignedTos) {
        if (selectedAssignedTos != null) {
            JJTask_.setAssignedTos(new HashSet<JJContact>(selectedAssignedTos));
        }
        this.selectedAssignedTos = selectedAssignedTos;
    }
    
    public List<JJMessage> JJTaskBean.getSelectedMessages() {
        return selectedMessages;
    }
    
    public void JJTaskBean.setSelectedMessages(List<JJMessage> selectedMessages) {
        if (selectedMessages != null) {
            JJTask_.setMessages(new HashSet<JJMessage>(selectedMessages));
        }
        this.selectedMessages = selectedMessages;
    }
    
    public String JJTaskBean.onEdit() {
        if (JJTask_ != null && JJTask_.getAssignedTos() != null) {
            selectedAssignedTos = new ArrayList<JJContact>(JJTask_.getAssignedTos());
        }
        if (JJTask_ != null && JJTask_.getMessages() != null) {
            selectedMessages = new ArrayList<JJMessage>(JJTask_.getMessages());
        }
        return null;
    }
    
    public boolean JJTaskBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJTaskBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJTaskBean.displayList() {
        createDialogVisible = false;
        findAllJJTasks();
        return "JJTask_";
    }
    
    public String JJTaskBean.displayCreateDialog() {
        JJTask_ = new JJTask();
        createDialogVisible = true;
        return "JJTask_";
    }
    
    public String JJTaskBean.persist() {
        String message = "";
        if (JJTask_.getId() != null) {
            jJTaskService.updateJJTask(JJTask_);
            message = "message_successfully_updated";
        } else {
            jJTaskService.saveJJTask(JJTask_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJTask");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJTasks();
    }
    
    public String JJTaskBean.delete() {
        jJTaskService.deleteJJTask(JJTask_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJTask");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJTasks();
    }
    
    public void JJTaskBean.reset() {
        JJTask_ = null;
        selectedAssignedTos = null;
        selectedMessages = null;
        createDialogVisible = false;
    }
    
    public void JJTaskBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

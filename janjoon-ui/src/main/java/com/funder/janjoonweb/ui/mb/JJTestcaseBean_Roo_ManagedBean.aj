// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.funder.janjoonweb.ui.mb;

import com.funder.janjoonweb.domain.JJCategory;
import com.funder.janjoonweb.domain.JJCategoryService;
import com.funder.janjoonweb.domain.JJChapter;
import com.funder.janjoonweb.domain.JJChapterService;
import com.funder.janjoonweb.domain.JJContact;
import com.funder.janjoonweb.domain.JJContactService;
import com.funder.janjoonweb.domain.JJHardware;
import com.funder.janjoonweb.domain.JJMessage;
import com.funder.janjoonweb.domain.JJProduct;
import com.funder.janjoonweb.domain.JJProductService;
import com.funder.janjoonweb.domain.JJRequirement;
import com.funder.janjoonweb.domain.JJRequirementService;
import com.funder.janjoonweb.domain.JJSoftware;
import com.funder.janjoonweb.domain.JJSprint;
import com.funder.janjoonweb.domain.JJSprintService;
import com.funder.janjoonweb.domain.JJTask;
import com.funder.janjoonweb.domain.JJTestcase;
import com.funder.janjoonweb.domain.JJTestcaseService;
import com.funder.janjoonweb.domain.JJTeststep;
import com.funder.janjoonweb.ui.mb.JJTestcaseBean;
import com.funder.janjoonweb.ui.mb.converter.JJCategoryConverter;
import com.funder.janjoonweb.ui.mb.converter.JJChapterConverter;
import com.funder.janjoonweb.ui.mb.converter.JJContactConverter;
import com.funder.janjoonweb.ui.mb.converter.JJProductConverter;
import com.funder.janjoonweb.ui.mb.converter.JJRequirementConverter;
import com.funder.janjoonweb.ui.mb.converter.JJSprintConverter;
import com.funder.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJTestcaseBean_Roo_ManagedBean {
    
    declare @type: JJTestcaseBean: @ManagedBean(name = "jJTestcaseBean");
    
    declare @type: JJTestcaseBean: @SessionScoped;
    
    @Autowired
    JJTestcaseService JJTestcaseBean.jJTestcaseService;
    
    @Autowired
    JJContactService JJTestcaseBean.jJContactService;
    
    @Autowired
    JJProductService JJTestcaseBean.jJProductService;
    
    @Autowired
    JJCategoryService JJTestcaseBean.jJCategoryService;
    
    @Autowired
    JJChapterService JJTestcaseBean.jJChapterService;
    
    @Autowired
    JJRequirementService JJTestcaseBean.jJRequirementService;
    
    @Autowired
    JJSprintService JJTestcaseBean.jJSprintService;
    
    private JJTestcase JJTestcaseBean.JJTestcase_;
    
    private List<JJTestcase> JJTestcaseBean.allJJTestcases;
    
    private boolean JJTestcaseBean.dataVisible = false;
    
    private List<String> JJTestcaseBean.columns;
    
    private HtmlPanelGrid JJTestcaseBean.createPanelGrid;
    
    private HtmlPanelGrid JJTestcaseBean.editPanelGrid;
    
    private HtmlPanelGrid JJTestcaseBean.viewPanelGrid;
    
    private boolean JJTestcaseBean.createDialogVisible = false;
    
    private List<JJSoftware> JJTestcaseBean.selectedSoftwares;
    
    private List<JJHardware> JJTestcaseBean.selectedHardwares;
    
    private List<JJTeststep> JJTestcaseBean.selectedTeststeps;
    
    private List<JJTask> JJTestcaseBean.selectedTasks;
    
    private List<JJMessage> JJTestcaseBean.selectedMessages;
    
    @PostConstruct
    public void JJTestcaseBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
        columns.add("ordering");
    }
    
    public String JJTestcaseBean.getName() {
        return name;
    }
    
    public List<String> JJTestcaseBean.getColumns() {
        return columns;
    }
    
    public List<JJTestcase> JJTestcaseBean.getAllJJTestcases() {
        return allJJTestcases;
    }
    
    public void JJTestcaseBean.setAllJJTestcases(List<JJTestcase> allJJTestcases) {
        this.allJJTestcases = allJJTestcases;
    }
    
    public String JJTestcaseBean.findAllJJTestcases() {
        allJJTestcases = jJTestcaseService.findAllJJTestcases();
        dataVisible = !allJJTestcases.isEmpty();
        return null;
    }
    
    public boolean JJTestcaseBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJTestcaseBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJTestcaseBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJTestcaseBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJTestcaseBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJTestcaseBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJTestcaseBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJTestcaseBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJTestcaseBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMaximum(25);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel descriptionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionCreateOutput.setFor("descriptionCreateInput");
        descriptionCreateOutput.setId("descriptionCreateOutput");
        descriptionCreateOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionCreateOutput);
        
        InputTextarea descriptionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionCreateInput.setId("descriptionCreateInput");
        descriptionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.description}", String.class));
        LengthValidator descriptionCreateInputValidator = new LengthValidator();
        descriptionCreateInputValidator.setMaximum(500);
        descriptionCreateInput.addValidator(descriptionCreateInputValidator);
        descriptionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionCreateInput);
        
        Message descriptionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionCreateInputMessage.setId("descriptionCreateInputMessage");
        descriptionCreateInputMessage.setFor("descriptionCreateInput");
        descriptionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionCreateInputMessage);
        
        OutputLabel creationDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateCreateOutput.setFor("creationDateCreateInput");
        creationDateCreateOutput.setId("creationDateCreateOutput");
        creationDateCreateOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateCreateOutput);
        
        Calendar creationDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateCreateInput.setId("creationDateCreateInput");
        creationDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.creationDate}", Date.class));
        creationDateCreateInput.setNavigator(true);
        creationDateCreateInput.setEffect("slideDown");
        creationDateCreateInput.setPattern("dd/MM/yyyy");
        creationDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateCreateInput);
        
        Message creationDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateCreateInputMessage.setId("creationDateCreateInputMessage");
        creationDateCreateInputMessage.setFor("creationDateCreateInput");
        creationDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateCreateInputMessage);
        
        OutputLabel createdByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByCreateOutput.setFor("createdByCreateInput");
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.createdBy}", JJContact.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTestcaseBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByCreateInput.setConverter(new JJContactConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        OutputLabel updatedDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateCreateOutput.setFor("updatedDateCreateInput");
        updatedDateCreateOutput.setId("updatedDateCreateOutput");
        updatedDateCreateOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateCreateOutput);
        
        Calendar updatedDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateCreateInput.setId("updatedDateCreateInput");
        updatedDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.updatedDate}", Date.class));
        updatedDateCreateInput.setNavigator(true);
        updatedDateCreateInput.setEffect("slideDown");
        updatedDateCreateInput.setPattern("dd/MM/yyyy");
        updatedDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateCreateInput);
        
        Message updatedDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateCreateInputMessage.setId("updatedDateCreateInputMessage");
        updatedDateCreateInputMessage.setFor("updatedDateCreateInput");
        updatedDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateCreateInputMessage);
        
        OutputLabel updatedByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByCreateOutput.setFor("updatedByCreateInput");
        updatedByCreateOutput.setId("updatedByCreateOutput");
        updatedByCreateOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByCreateOutput);
        
        AutoComplete updatedByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByCreateInput.setId("updatedByCreateInput");
        updatedByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.updatedBy}", JJContact.class));
        updatedByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTestcaseBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByCreateInput.setDropdown(true);
        updatedByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByCreateInput.setConverter(new JJContactConverter());
        updatedByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByCreateInput);
        
        Message updatedByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByCreateInputMessage.setId("updatedByCreateInputMessage");
        updatedByCreateInputMessage.setFor("updatedByCreateInput");
        updatedByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByCreateInputMessage);
        
        OutputLabel enabledCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledCreateOutput.setFor("enabledCreateInput");
        enabledCreateOutput.setId("enabledCreateOutput");
        enabledCreateOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledCreateOutput);
        
        SelectBooleanCheckbox enabledCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledCreateInput.setId("enabledCreateInput");
        enabledCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.enabled}", Boolean.class));
        enabledCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledCreateInput);
        
        Message enabledCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledCreateInputMessage.setId("enabledCreateInputMessage");
        enabledCreateInputMessage.setFor("enabledCreateInput");
        enabledCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledCreateInputMessage);
        
        OutputLabel orderingCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        orderingCreateOutput.setFor("orderingCreateInput");
        orderingCreateOutput.setId("orderingCreateOutput");
        orderingCreateOutput.setValue("Ordering:");
        htmlPanelGrid.getChildren().add(orderingCreateOutput);
        
        Spinner orderingCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        orderingCreateInput.setId("orderingCreateInput");
        orderingCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.ordering}", Integer.class));
        orderingCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(orderingCreateInput);
        
        Message orderingCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        orderingCreateInputMessage.setId("orderingCreateInputMessage");
        orderingCreateInputMessage.setFor("orderingCreateInput");
        orderingCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(orderingCreateInputMessage);
        
        OutputLabel actioncaseCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        actioncaseCreateOutput.setFor("actioncaseCreateInput");
        actioncaseCreateOutput.setId("actioncaseCreateOutput");
        actioncaseCreateOutput.setValue("Actioncase:");
        htmlPanelGrid.getChildren().add(actioncaseCreateOutput);
        
        InputTextarea actioncaseCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        actioncaseCreateInput.setId("actioncaseCreateInput");
        actioncaseCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.actioncase}", String.class));
        LengthValidator actioncaseCreateInputValidator = new LengthValidator();
        actioncaseCreateInputValidator.setMaximum(100);
        actioncaseCreateInput.addValidator(actioncaseCreateInputValidator);
        actioncaseCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(actioncaseCreateInput);
        
        Message actioncaseCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        actioncaseCreateInputMessage.setId("actioncaseCreateInputMessage");
        actioncaseCreateInputMessage.setFor("actioncaseCreateInput");
        actioncaseCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(actioncaseCreateInputMessage);
        
        OutputLabel resultatCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        resultatCreateOutput.setFor("resultatCreateInput");
        resultatCreateOutput.setId("resultatCreateOutput");
        resultatCreateOutput.setValue("Resultat:");
        htmlPanelGrid.getChildren().add(resultatCreateOutput);
        
        InputTextarea resultatCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        resultatCreateInput.setId("resultatCreateInput");
        resultatCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.resultat}", String.class));
        LengthValidator resultatCreateInputValidator = new LengthValidator();
        resultatCreateInputValidator.setMaximum(100);
        resultatCreateInput.addValidator(resultatCreateInputValidator);
        resultatCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(resultatCreateInput);
        
        Message resultatCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        resultatCreateInputMessage.setId("resultatCreateInputMessage");
        resultatCreateInputMessage.setFor("resultatCreateInput");
        resultatCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(resultatCreateInputMessage);
        
        OutputLabel productCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        productCreateOutput.setFor("productCreateInput");
        productCreateOutput.setId("productCreateOutput");
        productCreateOutput.setValue("Product:");
        htmlPanelGrid.getChildren().add(productCreateOutput);
        
        AutoComplete productCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        productCreateInput.setId("productCreateInput");
        productCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.product}", JJProduct.class));
        productCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTestcaseBean.completeProduct}", List.class, new Class[] { String.class }));
        productCreateInput.setDropdown(true);
        productCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "product", String.class));
        productCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{product.name} #{product.description} #{product.creationDate} #{product.updatedDate}", String.class));
        productCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{product}", JJProduct.class));
        productCreateInput.setConverter(new JJProductConverter());
        productCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(productCreateInput);
        
        Message productCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productCreateInputMessage.setId("productCreateInputMessage");
        productCreateInputMessage.setFor("productCreateInput");
        productCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productCreateInputMessage);
        
        OutputLabel categoryCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        categoryCreateOutput.setFor("categoryCreateInput");
        categoryCreateOutput.setId("categoryCreateOutput");
        categoryCreateOutput.setValue("Category:");
        htmlPanelGrid.getChildren().add(categoryCreateOutput);
        
        AutoComplete categoryCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoryCreateInput.setId("categoryCreateInput");
        categoryCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.category}", JJCategory.class));
        categoryCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTestcaseBean.completeCategory}", List.class, new Class[] { String.class }));
        categoryCreateInput.setDropdown(true);
        categoryCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "category", String.class));
        categoryCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{category.name} #{category.description} #{category.creationDate} #{category.updatedDate}", String.class));
        categoryCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{category}", JJCategory.class));
        categoryCreateInput.setConverter(new JJCategoryConverter());
        categoryCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoryCreateInput);
        
        Message categoryCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoryCreateInputMessage.setId("categoryCreateInputMessage");
        categoryCreateInputMessage.setFor("categoryCreateInput");
        categoryCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoryCreateInputMessage);
        
        OutputLabel chapterCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        chapterCreateOutput.setFor("chapterCreateInput");
        chapterCreateOutput.setId("chapterCreateOutput");
        chapterCreateOutput.setValue("Chapter:");
        htmlPanelGrid.getChildren().add(chapterCreateOutput);
        
        AutoComplete chapterCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        chapterCreateInput.setId("chapterCreateInput");
        chapterCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.chapter}", JJChapter.class));
        chapterCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTestcaseBean.completeChapter}", List.class, new Class[] { String.class }));
        chapterCreateInput.setDropdown(true);
        chapterCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "chapter", String.class));
        chapterCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{chapter.name} #{chapter.description} #{chapter.creationDate} #{chapter.updatedDate}", String.class));
        chapterCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{chapter}", JJChapter.class));
        chapterCreateInput.setConverter(new JJChapterConverter());
        chapterCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(chapterCreateInput);
        
        Message chapterCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        chapterCreateInputMessage.setId("chapterCreateInputMessage");
        chapterCreateInputMessage.setFor("chapterCreateInput");
        chapterCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(chapterCreateInputMessage);
        
        OutputLabel requirementCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        requirementCreateOutput.setFor("requirementCreateInput");
        requirementCreateOutput.setId("requirementCreateOutput");
        requirementCreateOutput.setValue("Requirement:");
        htmlPanelGrid.getChildren().add(requirementCreateOutput);
        
        AutoComplete requirementCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        requirementCreateInput.setId("requirementCreateInput");
        requirementCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.requirement}", JJRequirement.class));
        requirementCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTestcaseBean.completeRequirement}", List.class, new Class[] { String.class }));
        requirementCreateInput.setDropdown(true);
        requirementCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "requirement", String.class));
        requirementCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{requirement.name} #{requirement.description} #{requirement.creationDate} #{requirement.updatedDate}", String.class));
        requirementCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{requirement}", JJRequirement.class));
        requirementCreateInput.setConverter(new JJRequirementConverter());
        requirementCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(requirementCreateInput);
        
        Message requirementCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementCreateInputMessage.setId("requirementCreateInputMessage");
        requirementCreateInputMessage.setFor("requirementCreateInput");
        requirementCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementCreateInputMessage);
        
        OutputLabel sprintCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        sprintCreateOutput.setFor("sprintCreateInput");
        sprintCreateOutput.setId("sprintCreateOutput");
        sprintCreateOutput.setValue("Sprint:");
        htmlPanelGrid.getChildren().add(sprintCreateOutput);
        
        AutoComplete sprintCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        sprintCreateInput.setId("sprintCreateInput");
        sprintCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.sprint}", JJSprint.class));
        sprintCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTestcaseBean.completeSprint}", List.class, new Class[] { String.class }));
        sprintCreateInput.setDropdown(true);
        sprintCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "sprint", String.class));
        sprintCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{sprint.name} #{sprint.description} #{sprint.creationDate} #{sprint.updatedDate}", String.class));
        sprintCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{sprint}", JJSprint.class));
        sprintCreateInput.setConverter(new JJSprintConverter());
        sprintCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(sprintCreateInput);
        
        Message sprintCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        sprintCreateInputMessage.setId("sprintCreateInputMessage");
        sprintCreateInputMessage.setFor("sprintCreateInput");
        sprintCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(sprintCreateInputMessage);
        
        HtmlOutputText softwaresCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        softwaresCreateOutput.setId("softwaresCreateOutput");
        softwaresCreateOutput.setValue("Softwares:");
        htmlPanelGrid.getChildren().add(softwaresCreateOutput);
        
        HtmlOutputText softwaresCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        softwaresCreateInput.setId("softwaresCreateInput");
        softwaresCreateInput.setValue("This relationship is managed from the JJSoftware side");
        htmlPanelGrid.getChildren().add(softwaresCreateInput);
        
        Message softwaresCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        softwaresCreateInputMessage.setId("softwaresCreateInputMessage");
        softwaresCreateInputMessage.setFor("softwaresCreateInput");
        softwaresCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(softwaresCreateInputMessage);
        
        HtmlOutputText hardwaresCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        hardwaresCreateOutput.setId("hardwaresCreateOutput");
        hardwaresCreateOutput.setValue("Hardwares:");
        htmlPanelGrid.getChildren().add(hardwaresCreateOutput);
        
        HtmlOutputText hardwaresCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        hardwaresCreateInput.setId("hardwaresCreateInput");
        hardwaresCreateInput.setValue("This relationship is managed from the JJHardware side");
        htmlPanelGrid.getChildren().add(hardwaresCreateInput);
        
        Message hardwaresCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        hardwaresCreateInputMessage.setId("hardwaresCreateInputMessage");
        hardwaresCreateInputMessage.setFor("hardwaresCreateInput");
        hardwaresCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(hardwaresCreateInputMessage);
        
        OutputLabel workloadCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadCreateOutput.setFor("workloadCreateInput");
        workloadCreateOutput.setId("workloadCreateOutput");
        workloadCreateOutput.setValue("Workload:");
        htmlPanelGrid.getChildren().add(workloadCreateOutput);
        
        Spinner workloadCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadCreateInput.setId("workloadCreateInput");
        workloadCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.workload}", Integer.class));
        workloadCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadCreateInput);
        
        Message workloadCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadCreateInputMessage.setId("workloadCreateInputMessage");
        workloadCreateInputMessage.setFor("workloadCreateInput");
        workloadCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadCreateInputMessage);
        
        OutputLabel pricepointCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pricepointCreateOutput.setFor("pricepointCreateInput");
        pricepointCreateOutput.setId("pricepointCreateOutput");
        pricepointCreateOutput.setValue("Pricepoint:");
        htmlPanelGrid.getChildren().add(pricepointCreateOutput);
        
        Spinner pricepointCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        pricepointCreateInput.setId("pricepointCreateInput");
        pricepointCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.pricepoint}", Integer.class));
        pricepointCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(pricepointCreateInput);
        
        Message pricepointCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pricepointCreateInputMessage.setId("pricepointCreateInputMessage");
        pricepointCreateInputMessage.setFor("pricepointCreateInput");
        pricepointCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pricepointCreateInputMessage);
        
        HtmlOutputText teststepsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        teststepsCreateOutput.setId("teststepsCreateOutput");
        teststepsCreateOutput.setValue("Teststeps:");
        htmlPanelGrid.getChildren().add(teststepsCreateOutput);
        
        HtmlOutputText teststepsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        teststepsCreateInput.setId("teststepsCreateInput");
        teststepsCreateInput.setValue("This relationship is managed from the JJTeststep side");
        htmlPanelGrid.getChildren().add(teststepsCreateInput);
        
        Message teststepsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        teststepsCreateInputMessage.setId("teststepsCreateInputMessage");
        teststepsCreateInputMessage.setFor("teststepsCreateInput");
        teststepsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(teststepsCreateInputMessage);
        
        HtmlOutputText tasksCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksCreateOutput.setId("tasksCreateOutput");
        tasksCreateOutput.setValue("Tasks:");
        htmlPanelGrid.getChildren().add(tasksCreateOutput);
        
        HtmlOutputText tasksCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksCreateInput.setId("tasksCreateInput");
        tasksCreateInput.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(tasksCreateInput);
        
        Message tasksCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tasksCreateInputMessage.setId("tasksCreateInputMessage");
        tasksCreateInputMessage.setFor("tasksCreateInput");
        tasksCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tasksCreateInputMessage);
        
        HtmlOutputText messagesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesCreateOutput.setId("messagesCreateOutput");
        messagesCreateOutput.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesCreateOutput);
        
        HtmlOutputText messagesCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesCreateInput.setId("messagesCreateInput");
        messagesCreateInput.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesCreateInput);
        
        Message messagesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messagesCreateInputMessage.setId("messagesCreateInputMessage");
        messagesCreateInputMessage.setFor("messagesCreateInput");
        messagesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messagesCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJTestcaseBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMaximum(25);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel descriptionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionEditOutput.setFor("descriptionEditInput");
        descriptionEditOutput.setId("descriptionEditOutput");
        descriptionEditOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionEditOutput);
        
        InputTextarea descriptionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionEditInput.setId("descriptionEditInput");
        descriptionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.description}", String.class));
        LengthValidator descriptionEditInputValidator = new LengthValidator();
        descriptionEditInputValidator.setMaximum(500);
        descriptionEditInput.addValidator(descriptionEditInputValidator);
        descriptionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionEditInput);
        
        Message descriptionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionEditInputMessage.setId("descriptionEditInputMessage");
        descriptionEditInputMessage.setFor("descriptionEditInput");
        descriptionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionEditInputMessage);
        
        OutputLabel creationDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateEditOutput.setFor("creationDateEditInput");
        creationDateEditOutput.setId("creationDateEditOutput");
        creationDateEditOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateEditOutput);
        
        Calendar creationDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateEditInput.setId("creationDateEditInput");
        creationDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.creationDate}", Date.class));
        creationDateEditInput.setNavigator(true);
        creationDateEditInput.setEffect("slideDown");
        creationDateEditInput.setPattern("dd/MM/yyyy");
        creationDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateEditInput);
        
        Message creationDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateEditInputMessage.setId("creationDateEditInputMessage");
        creationDateEditInputMessage.setFor("creationDateEditInput");
        creationDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateEditInputMessage);
        
        OutputLabel createdByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByEditOutput.setFor("createdByEditInput");
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.createdBy}", JJContact.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTestcaseBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByEditInput.setConverter(new JJContactConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        OutputLabel updatedDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateEditOutput.setFor("updatedDateEditInput");
        updatedDateEditOutput.setId("updatedDateEditOutput");
        updatedDateEditOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateEditOutput);
        
        Calendar updatedDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateEditInput.setId("updatedDateEditInput");
        updatedDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.updatedDate}", Date.class));
        updatedDateEditInput.setNavigator(true);
        updatedDateEditInput.setEffect("slideDown");
        updatedDateEditInput.setPattern("dd/MM/yyyy");
        updatedDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateEditInput);
        
        Message updatedDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateEditInputMessage.setId("updatedDateEditInputMessage");
        updatedDateEditInputMessage.setFor("updatedDateEditInput");
        updatedDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateEditInputMessage);
        
        OutputLabel updatedByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByEditOutput.setFor("updatedByEditInput");
        updatedByEditOutput.setId("updatedByEditOutput");
        updatedByEditOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByEditOutput);
        
        AutoComplete updatedByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByEditInput.setId("updatedByEditInput");
        updatedByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.updatedBy}", JJContact.class));
        updatedByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTestcaseBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByEditInput.setDropdown(true);
        updatedByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByEditInput.setConverter(new JJContactConverter());
        updatedByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByEditInput);
        
        Message updatedByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByEditInputMessage.setId("updatedByEditInputMessage");
        updatedByEditInputMessage.setFor("updatedByEditInput");
        updatedByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByEditInputMessage);
        
        OutputLabel enabledEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledEditOutput.setFor("enabledEditInput");
        enabledEditOutput.setId("enabledEditOutput");
        enabledEditOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledEditOutput);
        
        SelectBooleanCheckbox enabledEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledEditInput.setId("enabledEditInput");
        enabledEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.enabled}", Boolean.class));
        enabledEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledEditInput);
        
        Message enabledEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledEditInputMessage.setId("enabledEditInputMessage");
        enabledEditInputMessage.setFor("enabledEditInput");
        enabledEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledEditInputMessage);
        
        OutputLabel orderingEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        orderingEditOutput.setFor("orderingEditInput");
        orderingEditOutput.setId("orderingEditOutput");
        orderingEditOutput.setValue("Ordering:");
        htmlPanelGrid.getChildren().add(orderingEditOutput);
        
        Spinner orderingEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        orderingEditInput.setId("orderingEditInput");
        orderingEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.ordering}", Integer.class));
        orderingEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(orderingEditInput);
        
        Message orderingEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        orderingEditInputMessage.setId("orderingEditInputMessage");
        orderingEditInputMessage.setFor("orderingEditInput");
        orderingEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(orderingEditInputMessage);
        
        OutputLabel actioncaseEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        actioncaseEditOutput.setFor("actioncaseEditInput");
        actioncaseEditOutput.setId("actioncaseEditOutput");
        actioncaseEditOutput.setValue("Actioncase:");
        htmlPanelGrid.getChildren().add(actioncaseEditOutput);
        
        InputTextarea actioncaseEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        actioncaseEditInput.setId("actioncaseEditInput");
        actioncaseEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.actioncase}", String.class));
        LengthValidator actioncaseEditInputValidator = new LengthValidator();
        actioncaseEditInputValidator.setMaximum(100);
        actioncaseEditInput.addValidator(actioncaseEditInputValidator);
        actioncaseEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(actioncaseEditInput);
        
        Message actioncaseEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        actioncaseEditInputMessage.setId("actioncaseEditInputMessage");
        actioncaseEditInputMessage.setFor("actioncaseEditInput");
        actioncaseEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(actioncaseEditInputMessage);
        
        OutputLabel resultatEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        resultatEditOutput.setFor("resultatEditInput");
        resultatEditOutput.setId("resultatEditOutput");
        resultatEditOutput.setValue("Resultat:");
        htmlPanelGrid.getChildren().add(resultatEditOutput);
        
        InputTextarea resultatEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        resultatEditInput.setId("resultatEditInput");
        resultatEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.resultat}", String.class));
        LengthValidator resultatEditInputValidator = new LengthValidator();
        resultatEditInputValidator.setMaximum(100);
        resultatEditInput.addValidator(resultatEditInputValidator);
        resultatEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(resultatEditInput);
        
        Message resultatEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        resultatEditInputMessage.setId("resultatEditInputMessage");
        resultatEditInputMessage.setFor("resultatEditInput");
        resultatEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(resultatEditInputMessage);
        
        OutputLabel productEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        productEditOutput.setFor("productEditInput");
        productEditOutput.setId("productEditOutput");
        productEditOutput.setValue("Product:");
        htmlPanelGrid.getChildren().add(productEditOutput);
        
        AutoComplete productEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        productEditInput.setId("productEditInput");
        productEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.product}", JJProduct.class));
        productEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTestcaseBean.completeProduct}", List.class, new Class[] { String.class }));
        productEditInput.setDropdown(true);
        productEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "product", String.class));
        productEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{product.name} #{product.description} #{product.creationDate} #{product.updatedDate}", String.class));
        productEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{product}", JJProduct.class));
        productEditInput.setConverter(new JJProductConverter());
        productEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(productEditInput);
        
        Message productEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productEditInputMessage.setId("productEditInputMessage");
        productEditInputMessage.setFor("productEditInput");
        productEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productEditInputMessage);
        
        OutputLabel categoryEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        categoryEditOutput.setFor("categoryEditInput");
        categoryEditOutput.setId("categoryEditOutput");
        categoryEditOutput.setValue("Category:");
        htmlPanelGrid.getChildren().add(categoryEditOutput);
        
        AutoComplete categoryEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoryEditInput.setId("categoryEditInput");
        categoryEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.category}", JJCategory.class));
        categoryEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTestcaseBean.completeCategory}", List.class, new Class[] { String.class }));
        categoryEditInput.setDropdown(true);
        categoryEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "category", String.class));
        categoryEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{category.name} #{category.description} #{category.creationDate} #{category.updatedDate}", String.class));
        categoryEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{category}", JJCategory.class));
        categoryEditInput.setConverter(new JJCategoryConverter());
        categoryEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoryEditInput);
        
        Message categoryEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoryEditInputMessage.setId("categoryEditInputMessage");
        categoryEditInputMessage.setFor("categoryEditInput");
        categoryEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoryEditInputMessage);
        
        OutputLabel chapterEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        chapterEditOutput.setFor("chapterEditInput");
        chapterEditOutput.setId("chapterEditOutput");
        chapterEditOutput.setValue("Chapter:");
        htmlPanelGrid.getChildren().add(chapterEditOutput);
        
        AutoComplete chapterEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        chapterEditInput.setId("chapterEditInput");
        chapterEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.chapter}", JJChapter.class));
        chapterEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTestcaseBean.completeChapter}", List.class, new Class[] { String.class }));
        chapterEditInput.setDropdown(true);
        chapterEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "chapter", String.class));
        chapterEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{chapter.name} #{chapter.description} #{chapter.creationDate} #{chapter.updatedDate}", String.class));
        chapterEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{chapter}", JJChapter.class));
        chapterEditInput.setConverter(new JJChapterConverter());
        chapterEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(chapterEditInput);
        
        Message chapterEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        chapterEditInputMessage.setId("chapterEditInputMessage");
        chapterEditInputMessage.setFor("chapterEditInput");
        chapterEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(chapterEditInputMessage);
        
        OutputLabel requirementEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        requirementEditOutput.setFor("requirementEditInput");
        requirementEditOutput.setId("requirementEditOutput");
        requirementEditOutput.setValue("Requirement:");
        htmlPanelGrid.getChildren().add(requirementEditOutput);
        
        AutoComplete requirementEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        requirementEditInput.setId("requirementEditInput");
        requirementEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.requirement}", JJRequirement.class));
        requirementEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTestcaseBean.completeRequirement}", List.class, new Class[] { String.class }));
        requirementEditInput.setDropdown(true);
        requirementEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "requirement", String.class));
        requirementEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{requirement.name} #{requirement.description} #{requirement.creationDate} #{requirement.updatedDate}", String.class));
        requirementEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{requirement}", JJRequirement.class));
        requirementEditInput.setConverter(new JJRequirementConverter());
        requirementEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(requirementEditInput);
        
        Message requirementEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementEditInputMessage.setId("requirementEditInputMessage");
        requirementEditInputMessage.setFor("requirementEditInput");
        requirementEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementEditInputMessage);
        
        OutputLabel sprintEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        sprintEditOutput.setFor("sprintEditInput");
        sprintEditOutput.setId("sprintEditOutput");
        sprintEditOutput.setValue("Sprint:");
        htmlPanelGrid.getChildren().add(sprintEditOutput);
        
        AutoComplete sprintEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        sprintEditInput.setId("sprintEditInput");
        sprintEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.sprint}", JJSprint.class));
        sprintEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJTestcaseBean.completeSprint}", List.class, new Class[] { String.class }));
        sprintEditInput.setDropdown(true);
        sprintEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "sprint", String.class));
        sprintEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{sprint.name} #{sprint.description} #{sprint.creationDate} #{sprint.updatedDate}", String.class));
        sprintEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{sprint}", JJSprint.class));
        sprintEditInput.setConverter(new JJSprintConverter());
        sprintEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(sprintEditInput);
        
        Message sprintEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        sprintEditInputMessage.setId("sprintEditInputMessage");
        sprintEditInputMessage.setFor("sprintEditInput");
        sprintEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(sprintEditInputMessage);
        
        HtmlOutputText softwaresEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        softwaresEditOutput.setId("softwaresEditOutput");
        softwaresEditOutput.setValue("Softwares:");
        htmlPanelGrid.getChildren().add(softwaresEditOutput);
        
        HtmlOutputText softwaresEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        softwaresEditInput.setId("softwaresEditInput");
        softwaresEditInput.setValue("This relationship is managed from the JJSoftware side");
        htmlPanelGrid.getChildren().add(softwaresEditInput);
        
        Message softwaresEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        softwaresEditInputMessage.setId("softwaresEditInputMessage");
        softwaresEditInputMessage.setFor("softwaresEditInput");
        softwaresEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(softwaresEditInputMessage);
        
        HtmlOutputText hardwaresEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        hardwaresEditOutput.setId("hardwaresEditOutput");
        hardwaresEditOutput.setValue("Hardwares:");
        htmlPanelGrid.getChildren().add(hardwaresEditOutput);
        
        HtmlOutputText hardwaresEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        hardwaresEditInput.setId("hardwaresEditInput");
        hardwaresEditInput.setValue("This relationship is managed from the JJHardware side");
        htmlPanelGrid.getChildren().add(hardwaresEditInput);
        
        Message hardwaresEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        hardwaresEditInputMessage.setId("hardwaresEditInputMessage");
        hardwaresEditInputMessage.setFor("hardwaresEditInput");
        hardwaresEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(hardwaresEditInputMessage);
        
        OutputLabel workloadEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadEditOutput.setFor("workloadEditInput");
        workloadEditOutput.setId("workloadEditOutput");
        workloadEditOutput.setValue("Workload:");
        htmlPanelGrid.getChildren().add(workloadEditOutput);
        
        Spinner workloadEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadEditInput.setId("workloadEditInput");
        workloadEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.workload}", Integer.class));
        workloadEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadEditInput);
        
        Message workloadEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadEditInputMessage.setId("workloadEditInputMessage");
        workloadEditInputMessage.setFor("workloadEditInput");
        workloadEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadEditInputMessage);
        
        OutputLabel pricepointEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pricepointEditOutput.setFor("pricepointEditInput");
        pricepointEditOutput.setId("pricepointEditOutput");
        pricepointEditOutput.setValue("Pricepoint:");
        htmlPanelGrid.getChildren().add(pricepointEditOutput);
        
        Spinner pricepointEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        pricepointEditInput.setId("pricepointEditInput");
        pricepointEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.pricepoint}", Integer.class));
        pricepointEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(pricepointEditInput);
        
        Message pricepointEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pricepointEditInputMessage.setId("pricepointEditInputMessage");
        pricepointEditInputMessage.setFor("pricepointEditInput");
        pricepointEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pricepointEditInputMessage);
        
        HtmlOutputText teststepsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        teststepsEditOutput.setId("teststepsEditOutput");
        teststepsEditOutput.setValue("Teststeps:");
        htmlPanelGrid.getChildren().add(teststepsEditOutput);
        
        HtmlOutputText teststepsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        teststepsEditInput.setId("teststepsEditInput");
        teststepsEditInput.setValue("This relationship is managed from the JJTeststep side");
        htmlPanelGrid.getChildren().add(teststepsEditInput);
        
        Message teststepsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        teststepsEditInputMessage.setId("teststepsEditInputMessage");
        teststepsEditInputMessage.setFor("teststepsEditInput");
        teststepsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(teststepsEditInputMessage);
        
        HtmlOutputText tasksEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksEditOutput.setId("tasksEditOutput");
        tasksEditOutput.setValue("Tasks:");
        htmlPanelGrid.getChildren().add(tasksEditOutput);
        
        HtmlOutputText tasksEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksEditInput.setId("tasksEditInput");
        tasksEditInput.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(tasksEditInput);
        
        Message tasksEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tasksEditInputMessage.setId("tasksEditInputMessage");
        tasksEditInputMessage.setFor("tasksEditInput");
        tasksEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tasksEditInputMessage);
        
        HtmlOutputText messagesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesEditOutput.setId("messagesEditOutput");
        messagesEditOutput.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesEditOutput);
        
        HtmlOutputText messagesEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesEditInput.setId("messagesEditInput");
        messagesEditInput.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesEditInput);
        
        Message messagesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messagesEditInputMessage.setId("messagesEditInputMessage");
        messagesEditInputMessage.setFor("messagesEditInput");
        messagesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messagesEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJTestcaseBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText descriptionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionLabel.setId("descriptionLabel");
        descriptionLabel.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionLabel);
        
        InputTextarea descriptionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionValue.setId("descriptionValue");
        descriptionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.description}", String.class));
        descriptionValue.setReadonly(true);
        descriptionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descriptionValue);
        
        HtmlOutputText creationDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateLabel.setId("creationDateLabel");
        creationDateLabel.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateLabel);
        
        HtmlOutputText creationDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.creationDate}", Date.class));
        DateTimeConverter creationDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationDateValueConverter.setPattern("dd/MM/yyyy");
        creationDateValue.setConverter(creationDateValueConverter);
        htmlPanelGrid.getChildren().add(creationDateValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.createdBy}", JJContact.class));
        createdByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        HtmlOutputText updatedDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateLabel.setId("updatedDateLabel");
        updatedDateLabel.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateLabel);
        
        HtmlOutputText updatedDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.updatedDate}", Date.class));
        DateTimeConverter updatedDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updatedDateValueConverter.setPattern("dd/MM/yyyy");
        updatedDateValue.setConverter(updatedDateValueConverter);
        htmlPanelGrid.getChildren().add(updatedDateValue);
        
        HtmlOutputText updatedByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByLabel.setId("updatedByLabel");
        updatedByLabel.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByLabel);
        
        HtmlOutputText updatedByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.updatedBy}", JJContact.class));
        updatedByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(updatedByValue);
        
        HtmlOutputText enabledLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledLabel.setId("enabledLabel");
        enabledLabel.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledLabel);
        
        HtmlOutputText enabledValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.enabled}", String.class));
        htmlPanelGrid.getChildren().add(enabledValue);
        
        HtmlOutputText orderingLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        orderingLabel.setId("orderingLabel");
        orderingLabel.setValue("Ordering:");
        htmlPanelGrid.getChildren().add(orderingLabel);
        
        HtmlOutputText orderingValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        orderingValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.ordering}", String.class));
        htmlPanelGrid.getChildren().add(orderingValue);
        
        HtmlOutputText actioncaseLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        actioncaseLabel.setId("actioncaseLabel");
        actioncaseLabel.setValue("Actioncase:");
        htmlPanelGrid.getChildren().add(actioncaseLabel);
        
        InputTextarea actioncaseValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        actioncaseValue.setId("actioncaseValue");
        actioncaseValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.actioncase}", String.class));
        actioncaseValue.setReadonly(true);
        actioncaseValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(actioncaseValue);
        
        HtmlOutputText resultatLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        resultatLabel.setId("resultatLabel");
        resultatLabel.setValue("Resultat:");
        htmlPanelGrid.getChildren().add(resultatLabel);
        
        InputTextarea resultatValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        resultatValue.setId("resultatValue");
        resultatValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.resultat}", String.class));
        resultatValue.setReadonly(true);
        resultatValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(resultatValue);
        
        HtmlOutputText productLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productLabel.setId("productLabel");
        productLabel.setValue("Product:");
        htmlPanelGrid.getChildren().add(productLabel);
        
        HtmlOutputText productValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.product}", JJProduct.class));
        productValue.setConverter(new JJProductConverter());
        htmlPanelGrid.getChildren().add(productValue);
        
        HtmlOutputText categoryLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoryLabel.setId("categoryLabel");
        categoryLabel.setValue("Category:");
        htmlPanelGrid.getChildren().add(categoryLabel);
        
        HtmlOutputText categoryValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoryValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.category}", JJCategory.class));
        categoryValue.setConverter(new JJCategoryConverter());
        htmlPanelGrid.getChildren().add(categoryValue);
        
        HtmlOutputText chapterLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        chapterLabel.setId("chapterLabel");
        chapterLabel.setValue("Chapter:");
        htmlPanelGrid.getChildren().add(chapterLabel);
        
        HtmlOutputText chapterValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        chapterValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.chapter}", JJChapter.class));
        chapterValue.setConverter(new JJChapterConverter());
        htmlPanelGrid.getChildren().add(chapterValue);
        
        HtmlOutputText requirementLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementLabel.setId("requirementLabel");
        requirementLabel.setValue("Requirement:");
        htmlPanelGrid.getChildren().add(requirementLabel);
        
        HtmlOutputText requirementValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.requirement}", JJRequirement.class));
        requirementValue.setConverter(new JJRequirementConverter());
        htmlPanelGrid.getChildren().add(requirementValue);
        
        HtmlOutputText sprintLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sprintLabel.setId("sprintLabel");
        sprintLabel.setValue("Sprint:");
        htmlPanelGrid.getChildren().add(sprintLabel);
        
        HtmlOutputText sprintValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sprintValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.sprint}", JJSprint.class));
        sprintValue.setConverter(new JJSprintConverter());
        htmlPanelGrid.getChildren().add(sprintValue);
        
        HtmlOutputText softwaresLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        softwaresLabel.setId("softwaresLabel");
        softwaresLabel.setValue("Softwares:");
        htmlPanelGrid.getChildren().add(softwaresLabel);
        
        HtmlOutputText softwaresValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        softwaresValue.setId("softwaresValue");
        softwaresValue.setValue("This relationship is managed from the JJSoftware side");
        htmlPanelGrid.getChildren().add(softwaresValue);
        
        HtmlOutputText hardwaresLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        hardwaresLabel.setId("hardwaresLabel");
        hardwaresLabel.setValue("Hardwares:");
        htmlPanelGrid.getChildren().add(hardwaresLabel);
        
        HtmlOutputText hardwaresValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        hardwaresValue.setId("hardwaresValue");
        hardwaresValue.setValue("This relationship is managed from the JJHardware side");
        htmlPanelGrid.getChildren().add(hardwaresValue);
        
        HtmlOutputText workloadLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadLabel.setId("workloadLabel");
        workloadLabel.setValue("Workload:");
        htmlPanelGrid.getChildren().add(workloadLabel);
        
        HtmlOutputText workloadValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.workload}", String.class));
        htmlPanelGrid.getChildren().add(workloadValue);
        
        HtmlOutputText pricepointLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pricepointLabel.setId("pricepointLabel");
        pricepointLabel.setValue("Pricepoint:");
        htmlPanelGrid.getChildren().add(pricepointLabel);
        
        HtmlOutputText pricepointValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pricepointValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJTestcaseBean.JJTestcase_.pricepoint}", String.class));
        htmlPanelGrid.getChildren().add(pricepointValue);
        
        HtmlOutputText teststepsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        teststepsLabel.setId("teststepsLabel");
        teststepsLabel.setValue("Teststeps:");
        htmlPanelGrid.getChildren().add(teststepsLabel);
        
        HtmlOutputText teststepsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        teststepsValue.setId("teststepsValue");
        teststepsValue.setValue("This relationship is managed from the JJTeststep side");
        htmlPanelGrid.getChildren().add(teststepsValue);
        
        HtmlOutputText tasksLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksLabel.setId("tasksLabel");
        tasksLabel.setValue("Tasks:");
        htmlPanelGrid.getChildren().add(tasksLabel);
        
        HtmlOutputText tasksValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksValue.setId("tasksValue");
        tasksValue.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(tasksValue);
        
        HtmlOutputText messagesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesLabel.setId("messagesLabel");
        messagesLabel.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesLabel);
        
        HtmlOutputText messagesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesValue.setId("messagesValue");
        messagesValue.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesValue);
        
        return htmlPanelGrid;
    }
    
    public JJTestcase JJTestcaseBean.getJJTestcase_() {
        if (JJTestcase_ == null) {
            JJTestcase_ = new JJTestcase();
        }
        return JJTestcase_;
    }
    
    public void JJTestcaseBean.setJJTestcase_(JJTestcase JJTestcase_) {
        this.JJTestcase_ = JJTestcase_;
    }
    
    public List<JJContact> JJTestcaseBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJTestcaseBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJProduct> JJTestcaseBean.completeProduct(String query) {
        List<JJProduct> suggestions = new ArrayList<JJProduct>();
        for (JJProduct jJProduct : jJProductService.findAllJJProducts()) {
            String jJProductStr = String.valueOf(jJProduct.getName() +  " "  + jJProduct.getDescription() +  " "  + jJProduct.getCreationDate() +  " "  + jJProduct.getUpdatedDate());
            if (jJProductStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJProduct);
            }
        }
        return suggestions;
    }
    
    public List<JJCategory> JJTestcaseBean.completeCategory(String query) {
        List<JJCategory> suggestions = new ArrayList<JJCategory>();
        for (JJCategory jJCategory : jJCategoryService.findAllJJCategorys()) {
            String jJCategoryStr = String.valueOf(jJCategory.getName() +  " "  + jJCategory.getDescription() +  " "  + jJCategory.getCreationDate() +  " "  + jJCategory.getUpdatedDate());
            if (jJCategoryStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJCategory);
            }
        }
        return suggestions;
    }
    
    public List<JJChapter> JJTestcaseBean.completeChapter(String query) {
        List<JJChapter> suggestions = new ArrayList<JJChapter>();
        for (JJChapter jJChapter : jJChapterService.findAllJJChapters()) {
            String jJChapterStr = String.valueOf(jJChapter.getName() +  " "  + jJChapter.getDescription() +  " "  + jJChapter.getCreationDate() +  " "  + jJChapter.getUpdatedDate());
            if (jJChapterStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJChapter);
            }
        }
        return suggestions;
    }
    
    public List<JJRequirement> JJTestcaseBean.completeRequirement(String query) {
        List<JJRequirement> suggestions = new ArrayList<JJRequirement>();
        for (JJRequirement jJRequirement : jJRequirementService.findAllJJRequirements()) {
            String jJRequirementStr = String.valueOf(jJRequirement.getName() +  " "  + jJRequirement.getDescription() +  " "  + jJRequirement.getCreationDate() +  " "  + jJRequirement.getUpdatedDate());
            if (jJRequirementStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJRequirement);
            }
        }
        return suggestions;
    }
    
    public List<JJSprint> JJTestcaseBean.completeSprint(String query) {
        List<JJSprint> suggestions = new ArrayList<JJSprint>();
        for (JJSprint jJSprint : jJSprintService.findAllJJSprints()) {
            String jJSprintStr = String.valueOf(jJSprint.getName() +  " "  + jJSprint.getDescription() +  " "  + jJSprint.getCreationDate() +  " "  + jJSprint.getUpdatedDate());
            if (jJSprintStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJSprint);
            }
        }
        return suggestions;
    }
    
    public List<JJSoftware> JJTestcaseBean.getSelectedSoftwares() {
        return selectedSoftwares;
    }
    
    public void JJTestcaseBean.setSelectedSoftwares(List<JJSoftware> selectedSoftwares) {
        if (selectedSoftwares != null) {
            JJTestcase_.setSoftwares(new HashSet<JJSoftware>(selectedSoftwares));
        }
        this.selectedSoftwares = selectedSoftwares;
    }
    
    public List<JJHardware> JJTestcaseBean.getSelectedHardwares() {
        return selectedHardwares;
    }
    
    public void JJTestcaseBean.setSelectedHardwares(List<JJHardware> selectedHardwares) {
        if (selectedHardwares != null) {
            JJTestcase_.setHardwares(new HashSet<JJHardware>(selectedHardwares));
        }
        this.selectedHardwares = selectedHardwares;
    }
    
    public List<JJTeststep> JJTestcaseBean.getSelectedTeststeps() {
        return selectedTeststeps;
    }
    
    public void JJTestcaseBean.setSelectedTeststeps(List<JJTeststep> selectedTeststeps) {
        if (selectedTeststeps != null) {
            JJTestcase_.setTeststeps(new HashSet<JJTeststep>(selectedTeststeps));
        }
        this.selectedTeststeps = selectedTeststeps;
    }
    
    public List<JJTask> JJTestcaseBean.getSelectedTasks() {
        return selectedTasks;
    }
    
    public void JJTestcaseBean.setSelectedTasks(List<JJTask> selectedTasks) {
        if (selectedTasks != null) {
            JJTestcase_.setTasks(new HashSet<JJTask>(selectedTasks));
        }
        this.selectedTasks = selectedTasks;
    }
    
    public List<JJMessage> JJTestcaseBean.getSelectedMessages() {
        return selectedMessages;
    }
    
    public void JJTestcaseBean.setSelectedMessages(List<JJMessage> selectedMessages) {
        if (selectedMessages != null) {
            JJTestcase_.setMessages(new HashSet<JJMessage>(selectedMessages));
        }
        this.selectedMessages = selectedMessages;
    }
    
    public String JJTestcaseBean.onEdit() {
        if (JJTestcase_ != null && JJTestcase_.getSoftwares() != null) {
            selectedSoftwares = new ArrayList<JJSoftware>(JJTestcase_.getSoftwares());
        }
        if (JJTestcase_ != null && JJTestcase_.getHardwares() != null) {
            selectedHardwares = new ArrayList<JJHardware>(JJTestcase_.getHardwares());
        }
        if (JJTestcase_ != null && JJTestcase_.getTeststeps() != null) {
            selectedTeststeps = new ArrayList<JJTeststep>(JJTestcase_.getTeststeps());
        }
        if (JJTestcase_ != null && JJTestcase_.getTasks() != null) {
            selectedTasks = new ArrayList<JJTask>(JJTestcase_.getTasks());
        }
        if (JJTestcase_ != null && JJTestcase_.getMessages() != null) {
            selectedMessages = new ArrayList<JJMessage>(JJTestcase_.getMessages());
        }
        return null;
    }
    
    public boolean JJTestcaseBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJTestcaseBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJTestcaseBean.displayList() {
        createDialogVisible = false;
        findAllJJTestcases();
        return "JJTestcase_";
    }
    
    public String JJTestcaseBean.displayCreateDialog() {
        JJTestcase_ = new JJTestcase();
        createDialogVisible = true;
        return "JJTestcase_";
    }
    
    public String JJTestcaseBean.persist() {
        String message = "";
        if (JJTestcase_.getId() != null) {
            jJTestcaseService.updateJJTestcase(JJTestcase_);
            message = "message_successfully_updated";
        } else {
            jJTestcaseService.saveJJTestcase(JJTestcase_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJTestcase");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJTestcases();
    }
    
    public String JJTestcaseBean.delete() {
        jJTestcaseService.deleteJJTestcase(JJTestcase_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJTestcase");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJTestcases();
    }
    
    public void JJTestcaseBean.reset() {
        JJTestcase_ = null;
        selectedSoftwares = null;
        selectedHardwares = null;
        selectedTeststeps = null;
        selectedTasks = null;
        selectedMessages = null;
        createDialogVisible = false;
    }
    
    public void JJTestcaseBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

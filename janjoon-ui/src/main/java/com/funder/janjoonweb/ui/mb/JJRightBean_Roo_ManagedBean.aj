// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.funder.janjoonweb.ui.mb;

import com.funder.janjoonweb.domain.JJCategory;
import com.funder.janjoonweb.domain.JJCategoryService;
import com.funder.janjoonweb.domain.JJPermission;
import com.funder.janjoonweb.domain.JJPermissionService;
import com.funder.janjoonweb.domain.JJProduct;
import com.funder.janjoonweb.domain.JJProductService;
import com.funder.janjoonweb.domain.JJProfile;
import com.funder.janjoonweb.domain.JJProject;
import com.funder.janjoonweb.domain.JJProjectService;
import com.funder.janjoonweb.domain.JJRight;
import com.funder.janjoonweb.domain.JJRightService;
import com.funder.janjoonweb.ui.mb.JJRightBean;
import com.funder.janjoonweb.ui.mb.converter.JJCategoryConverter;
import com.funder.janjoonweb.ui.mb.converter.JJPermissionConverter;
import com.funder.janjoonweb.ui.mb.converter.JJProductConverter;
import com.funder.janjoonweb.ui.mb.converter.JJProjectConverter;
import com.funder.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJRightBean_Roo_ManagedBean {
    
    declare @type: JJRightBean: @ManagedBean(name = "jJRightBean");
    
    declare @type: JJRightBean: @SessionScoped;
    
    @Autowired
    JJRightService JJRightBean.jJRightService;
    
    @Autowired
    JJPermissionService JJRightBean.jJPermissionService;
    
    @Autowired
    JJProjectService JJRightBean.jJProjectService;
    
    @Autowired
    JJProductService JJRightBean.jJProductService;
    
    @Autowired
    JJCategoryService JJRightBean.jJCategoryService;
    
    private String JJRightBean.name = "JJRights";
    
    private JJRight JJRightBean.JJRight_;
    
    private List<JJRight> JJRightBean.allJJRights;
    
    private boolean JJRightBean.dataVisible = false;
    
    private List<String> JJRightBean.columns;
    
    private HtmlPanelGrid JJRightBean.createPanelGrid;
    
    private HtmlPanelGrid JJRightBean.editPanelGrid;
    
    private HtmlPanelGrid JJRightBean.viewPanelGrid;
    
    private boolean JJRightBean.createDialogVisible = false;
    
    private List<JJProfile> JJRightBean.selectedProfiles;
    
    @PostConstruct
    public void JJRightBean.init() {
        columns = new ArrayList<String>();
    }
    
    public String JJRightBean.getName() {
        return name;
    }
    
    public List<String> JJRightBean.getColumns() {
        return columns;
    }
    
    public List<JJRight> JJRightBean.getAllJJRights() {
        return allJJRights;
    }
    
    public void JJRightBean.setAllJJRights(List<JJRight> allJJRights) {
        this.allJJRights = allJJRights;
    }
    
    public String JJRightBean.findAllJJRights() {
        allJJRights = jJRightService.findAllJJRights();
        dataVisible = !allJJRights.isEmpty();
        return null;
    }
    
    public boolean JJRightBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJRightBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJRightBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJRightBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJRightBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJRightBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJRightBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJRightBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJRightBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel permissionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        permissionCreateOutput.setFor("permissionCreateInput");
        permissionCreateOutput.setId("permissionCreateOutput");
        permissionCreateOutput.setValue("Permission:");
        htmlPanelGrid.getChildren().add(permissionCreateOutput);
        
        AutoComplete permissionCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        permissionCreateInput.setId("permissionCreateInput");
        permissionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.permission}", JJPermission.class));
        permissionCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRightBean.completePermission}", List.class, new Class[] { String.class }));
        permissionCreateInput.setDropdown(true);
        permissionCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "permission", String.class));
        permissionCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{permission.permission}", String.class));
        permissionCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{permission}", JJPermission.class));
        permissionCreateInput.setConverter(new JJPermissionConverter());
        permissionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(permissionCreateInput);
        
        Message permissionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        permissionCreateInputMessage.setId("permissionCreateInputMessage");
        permissionCreateInputMessage.setFor("permissionCreateInput");
        permissionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(permissionCreateInputMessage);
        
        OutputLabel projectCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        projectCreateOutput.setFor("projectCreateInput");
        projectCreateOutput.setId("projectCreateOutput");
        projectCreateOutput.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectCreateOutput);
        
        AutoComplete projectCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        projectCreateInput.setId("projectCreateInput");
        projectCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.project}", JJProject.class));
        projectCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRightBean.completeProject}", List.class, new Class[] { String.class }));
        projectCreateInput.setDropdown(true);
        projectCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "project", String.class));
        projectCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{project.name} #{project.description} #{project.creationDate} #{project.updatedDate}", String.class));
        projectCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{project}", JJProject.class));
        projectCreateInput.setConverter(new JJProjectConverter());
        projectCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(projectCreateInput);
        
        Message projectCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectCreateInputMessage.setId("projectCreateInputMessage");
        projectCreateInputMessage.setFor("projectCreateInput");
        projectCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectCreateInputMessage);
        
        OutputLabel productCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        productCreateOutput.setFor("productCreateInput");
        productCreateOutput.setId("productCreateOutput");
        productCreateOutput.setValue("Product:");
        htmlPanelGrid.getChildren().add(productCreateOutput);
        
        AutoComplete productCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        productCreateInput.setId("productCreateInput");
        productCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.product}", JJProduct.class));
        productCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRightBean.completeProduct}", List.class, new Class[] { String.class }));
        productCreateInput.setDropdown(true);
        productCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "product", String.class));
        productCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{product.name} #{product.description} #{product.creationDate} #{product.updatedDate}", String.class));
        productCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{product}", JJProduct.class));
        productCreateInput.setConverter(new JJProductConverter());
        productCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(productCreateInput);
        
        Message productCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productCreateInputMessage.setId("productCreateInputMessage");
        productCreateInputMessage.setFor("productCreateInput");
        productCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productCreateInputMessage);
        
        OutputLabel categoryCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        categoryCreateOutput.setFor("categoryCreateInput");
        categoryCreateOutput.setId("categoryCreateOutput");
        categoryCreateOutput.setValue("Category:");
        htmlPanelGrid.getChildren().add(categoryCreateOutput);
        
        AutoComplete categoryCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoryCreateInput.setId("categoryCreateInput");
        categoryCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.category}", JJCategory.class));
        categoryCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRightBean.completeCategory}", List.class, new Class[] { String.class }));
        categoryCreateInput.setDropdown(true);
        categoryCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "category", String.class));
        categoryCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{category.name} #{category.description} #{category.creationDate} #{category.updatedDate}", String.class));
        categoryCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{category}", JJCategory.class));
        categoryCreateInput.setConverter(new JJCategoryConverter());
        categoryCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoryCreateInput);
        
        Message categoryCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoryCreateInputMessage.setId("categoryCreateInputMessage");
        categoryCreateInputMessage.setFor("categoryCreateInput");
        categoryCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoryCreateInputMessage);
        
        OutputLabel rCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        rCreateOutput.setFor("rCreateInput");
        rCreateOutput.setId("rCreateOutput");
        rCreateOutput.setValue("R:");
        htmlPanelGrid.getChildren().add(rCreateOutput);
        
        SelectBooleanCheckbox rCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        rCreateInput.setId("rCreateInput");
        rCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.r}", Boolean.class));
        rCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(rCreateInput);
        
        Message rCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        rCreateInputMessage.setId("rCreateInputMessage");
        rCreateInputMessage.setFor("rCreateInput");
        rCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(rCreateInputMessage);
        
        OutputLabel wCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        wCreateOutput.setFor("wCreateInput");
        wCreateOutput.setId("wCreateOutput");
        wCreateOutput.setValue("W:");
        htmlPanelGrid.getChildren().add(wCreateOutput);
        
        SelectBooleanCheckbox wCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        wCreateInput.setId("wCreateInput");
        wCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.w}", Boolean.class));
        wCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(wCreateInput);
        
        Message wCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        wCreateInputMessage.setId("wCreateInputMessage");
        wCreateInputMessage.setFor("wCreateInput");
        wCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(wCreateInputMessage);
        
        OutputLabel xCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        xCreateOutput.setFor("xCreateInput");
        xCreateOutput.setId("xCreateOutput");
        xCreateOutput.setValue("X:");
        htmlPanelGrid.getChildren().add(xCreateOutput);
        
        SelectBooleanCheckbox xCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        xCreateInput.setId("xCreateInput");
        xCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.x}", Boolean.class));
        xCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(xCreateInput);
        
        Message xCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        xCreateInputMessage.setId("xCreateInputMessage");
        xCreateInputMessage.setFor("xCreateInput");
        xCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(xCreateInputMessage);
        
        HtmlOutputText profilesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        profilesCreateOutput.setId("profilesCreateOutput");
        profilesCreateOutput.setValue("Profiles:");
        htmlPanelGrid.getChildren().add(profilesCreateOutput);
        
        HtmlOutputText profilesCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        profilesCreateInput.setId("profilesCreateInput");
        profilesCreateInput.setValue("This relationship is managed from the JJProfile side");
        htmlPanelGrid.getChildren().add(profilesCreateInput);
        
        Message profilesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        profilesCreateInputMessage.setId("profilesCreateInputMessage");
        profilesCreateInputMessage.setFor("profilesCreateInput");
        profilesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(profilesCreateInputMessage);
        
        OutputLabel basicCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        basicCreateOutput.setFor("basicCreateInput");
        basicCreateOutput.setId("basicCreateOutput");
        basicCreateOutput.setValue("Basic:");
        htmlPanelGrid.getChildren().add(basicCreateOutput);
        
        SelectBooleanCheckbox basicCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        basicCreateInput.setId("basicCreateInput");
        basicCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.basic}", Boolean.class));
        basicCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(basicCreateInput);
        
        Message basicCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        basicCreateInputMessage.setId("basicCreateInputMessage");
        basicCreateInputMessage.setFor("basicCreateInput");
        basicCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(basicCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJRightBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel permissionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        permissionEditOutput.setFor("permissionEditInput");
        permissionEditOutput.setId("permissionEditOutput");
        permissionEditOutput.setValue("Permission:");
        htmlPanelGrid.getChildren().add(permissionEditOutput);
        
        AutoComplete permissionEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        permissionEditInput.setId("permissionEditInput");
        permissionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.permission}", JJPermission.class));
        permissionEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRightBean.completePermission}", List.class, new Class[] { String.class }));
        permissionEditInput.setDropdown(true);
        permissionEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "permission", String.class));
        permissionEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{permission.permission}", String.class));
        permissionEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{permission}", JJPermission.class));
        permissionEditInput.setConverter(new JJPermissionConverter());
        permissionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(permissionEditInput);
        
        Message permissionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        permissionEditInputMessage.setId("permissionEditInputMessage");
        permissionEditInputMessage.setFor("permissionEditInput");
        permissionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(permissionEditInputMessage);
        
        OutputLabel projectEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        projectEditOutput.setFor("projectEditInput");
        projectEditOutput.setId("projectEditOutput");
        projectEditOutput.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectEditOutput);
        
        AutoComplete projectEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        projectEditInput.setId("projectEditInput");
        projectEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.project}", JJProject.class));
        projectEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRightBean.completeProject}", List.class, new Class[] { String.class }));
        projectEditInput.setDropdown(true);
        projectEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "project", String.class));
        projectEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{project.name} #{project.description} #{project.creationDate} #{project.updatedDate}", String.class));
        projectEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{project}", JJProject.class));
        projectEditInput.setConverter(new JJProjectConverter());
        projectEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(projectEditInput);
        
        Message projectEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectEditInputMessage.setId("projectEditInputMessage");
        projectEditInputMessage.setFor("projectEditInput");
        projectEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectEditInputMessage);
        
        OutputLabel productEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        productEditOutput.setFor("productEditInput");
        productEditOutput.setId("productEditOutput");
        productEditOutput.setValue("Product:");
        htmlPanelGrid.getChildren().add(productEditOutput);
        
        AutoComplete productEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        productEditInput.setId("productEditInput");
        productEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.product}", JJProduct.class));
        productEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRightBean.completeProduct}", List.class, new Class[] { String.class }));
        productEditInput.setDropdown(true);
        productEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "product", String.class));
        productEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{product.name} #{product.description} #{product.creationDate} #{product.updatedDate}", String.class));
        productEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{product}", JJProduct.class));
        productEditInput.setConverter(new JJProductConverter());
        productEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(productEditInput);
        
        Message productEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productEditInputMessage.setId("productEditInputMessage");
        productEditInputMessage.setFor("productEditInput");
        productEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productEditInputMessage);
        
        OutputLabel categoryEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        categoryEditOutput.setFor("categoryEditInput");
        categoryEditOutput.setId("categoryEditOutput");
        categoryEditOutput.setValue("Category:");
        htmlPanelGrid.getChildren().add(categoryEditOutput);
        
        AutoComplete categoryEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoryEditInput.setId("categoryEditInput");
        categoryEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.category}", JJCategory.class));
        categoryEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJRightBean.completeCategory}", List.class, new Class[] { String.class }));
        categoryEditInput.setDropdown(true);
        categoryEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "category", String.class));
        categoryEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{category.name} #{category.description} #{category.creationDate} #{category.updatedDate}", String.class));
        categoryEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{category}", JJCategory.class));
        categoryEditInput.setConverter(new JJCategoryConverter());
        categoryEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoryEditInput);
        
        Message categoryEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoryEditInputMessage.setId("categoryEditInputMessage");
        categoryEditInputMessage.setFor("categoryEditInput");
        categoryEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoryEditInputMessage);
        
        OutputLabel rEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        rEditOutput.setFor("rEditInput");
        rEditOutput.setId("rEditOutput");
        rEditOutput.setValue("R:");
        htmlPanelGrid.getChildren().add(rEditOutput);
        
        SelectBooleanCheckbox rEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        rEditInput.setId("rEditInput");
        rEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.r}", Boolean.class));
        rEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(rEditInput);
        
        Message rEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        rEditInputMessage.setId("rEditInputMessage");
        rEditInputMessage.setFor("rEditInput");
        rEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(rEditInputMessage);
        
        OutputLabel wEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        wEditOutput.setFor("wEditInput");
        wEditOutput.setId("wEditOutput");
        wEditOutput.setValue("W:");
        htmlPanelGrid.getChildren().add(wEditOutput);
        
        SelectBooleanCheckbox wEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        wEditInput.setId("wEditInput");
        wEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.w}", Boolean.class));
        wEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(wEditInput);
        
        Message wEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        wEditInputMessage.setId("wEditInputMessage");
        wEditInputMessage.setFor("wEditInput");
        wEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(wEditInputMessage);
        
        OutputLabel xEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        xEditOutput.setFor("xEditInput");
        xEditOutput.setId("xEditOutput");
        xEditOutput.setValue("X:");
        htmlPanelGrid.getChildren().add(xEditOutput);
        
        SelectBooleanCheckbox xEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        xEditInput.setId("xEditInput");
        xEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.x}", Boolean.class));
        xEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(xEditInput);
        
        Message xEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        xEditInputMessage.setId("xEditInputMessage");
        xEditInputMessage.setFor("xEditInput");
        xEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(xEditInputMessage);
        
        HtmlOutputText profilesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        profilesEditOutput.setId("profilesEditOutput");
        profilesEditOutput.setValue("Profiles:");
        htmlPanelGrid.getChildren().add(profilesEditOutput);
        
        HtmlOutputText profilesEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        profilesEditInput.setId("profilesEditInput");
        profilesEditInput.setValue("This relationship is managed from the JJProfile side");
        htmlPanelGrid.getChildren().add(profilesEditInput);
        
        Message profilesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        profilesEditInputMessage.setId("profilesEditInputMessage");
        profilesEditInputMessage.setFor("profilesEditInput");
        profilesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(profilesEditInputMessage);
        
        OutputLabel basicEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        basicEditOutput.setFor("basicEditInput");
        basicEditOutput.setId("basicEditOutput");
        basicEditOutput.setValue("Basic:");
        htmlPanelGrid.getChildren().add(basicEditOutput);
        
        SelectBooleanCheckbox basicEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        basicEditInput.setId("basicEditInput");
        basicEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.basic}", Boolean.class));
        basicEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(basicEditInput);
        
        Message basicEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        basicEditInputMessage.setId("basicEditInputMessage");
        basicEditInputMessage.setFor("basicEditInput");
        basicEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(basicEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJRightBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText permissionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        permissionLabel.setId("permissionLabel");
        permissionLabel.setValue("Permission:");
        htmlPanelGrid.getChildren().add(permissionLabel);
        
        HtmlOutputText permissionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        permissionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.permission}", JJPermission.class));
        permissionValue.setConverter(new JJPermissionConverter());
        htmlPanelGrid.getChildren().add(permissionValue);
        
        HtmlOutputText projectLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectLabel.setId("projectLabel");
        projectLabel.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectLabel);
        
        HtmlOutputText projectValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.project}", JJProject.class));
        projectValue.setConverter(new JJProjectConverter());
        htmlPanelGrid.getChildren().add(projectValue);
        
        HtmlOutputText productLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productLabel.setId("productLabel");
        productLabel.setValue("Product:");
        htmlPanelGrid.getChildren().add(productLabel);
        
        HtmlOutputText productValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.product}", JJProduct.class));
        productValue.setConverter(new JJProductConverter());
        htmlPanelGrid.getChildren().add(productValue);
        
        HtmlOutputText categoryLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoryLabel.setId("categoryLabel");
        categoryLabel.setValue("Category:");
        htmlPanelGrid.getChildren().add(categoryLabel);
        
        HtmlOutputText categoryValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoryValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.category}", JJCategory.class));
        categoryValue.setConverter(new JJCategoryConverter());
        htmlPanelGrid.getChildren().add(categoryValue);
        
        HtmlOutputText rLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rLabel.setId("rLabel");
        rLabel.setValue("R:");
        htmlPanelGrid.getChildren().add(rLabel);
        
        HtmlOutputText rValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.r}", String.class));
        htmlPanelGrid.getChildren().add(rValue);
        
        HtmlOutputText wLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        wLabel.setId("wLabel");
        wLabel.setValue("W:");
        htmlPanelGrid.getChildren().add(wLabel);
        
        HtmlOutputText wValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        wValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.w}", String.class));
        htmlPanelGrid.getChildren().add(wValue);
        
        HtmlOutputText xLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        xLabel.setId("xLabel");
        xLabel.setValue("X:");
        htmlPanelGrid.getChildren().add(xLabel);
        
        HtmlOutputText xValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        xValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.x}", String.class));
        htmlPanelGrid.getChildren().add(xValue);
        
        HtmlOutputText profilesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        profilesLabel.setId("profilesLabel");
        profilesLabel.setValue("Profiles:");
        htmlPanelGrid.getChildren().add(profilesLabel);
        
        HtmlOutputText profilesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        profilesValue.setId("profilesValue");
        profilesValue.setValue("This relationship is managed from the JJProfile side");
        htmlPanelGrid.getChildren().add(profilesValue);
        
        HtmlOutputText basicLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        basicLabel.setId("basicLabel");
        basicLabel.setValue("Basic:");
        htmlPanelGrid.getChildren().add(basicLabel);
        
        HtmlOutputText basicValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        basicValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJRightBean.JJRight_.basic}", String.class));
        htmlPanelGrid.getChildren().add(basicValue);
        
        return htmlPanelGrid;
    }
    
    public JJRight JJRightBean.getJJRight_() {
        if (JJRight_ == null) {
            JJRight_ = new JJRight();
        }
        return JJRight_;
    }
    
    public void JJRightBean.setJJRight_(JJRight JJRight_) {
        this.JJRight_ = JJRight_;
    }
    
    public List<JJPermission> JJRightBean.completePermission(String query) {
        List<JJPermission> suggestions = new ArrayList<JJPermission>();
        for (JJPermission jJPermission : jJPermissionService.findAllJJPermissions()) {
            String jJPermissionStr = String.valueOf(jJPermission.getPermission());
            if (jJPermissionStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJPermission);
            }
        }
        return suggestions;
    }
    
    public List<JJProject> JJRightBean.completeProject(String query) {
        List<JJProject> suggestions = new ArrayList<JJProject>();
        for (JJProject jJProject : jJProjectService.findAllJJProjects()) {
            String jJProjectStr = String.valueOf(jJProject.getName() +  " "  + jJProject.getDescription() +  " "  + jJProject.getCreationDate() +  " "  + jJProject.getUpdatedDate());
            if (jJProjectStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJProject);
            }
        }
        return suggestions;
    }
    
    public List<JJProduct> JJRightBean.completeProduct(String query) {
        List<JJProduct> suggestions = new ArrayList<JJProduct>();
        for (JJProduct jJProduct : jJProductService.findAllJJProducts()) {
            String jJProductStr = String.valueOf(jJProduct.getName() +  " "  + jJProduct.getDescription() +  " "  + jJProduct.getCreationDate() +  " "  + jJProduct.getUpdatedDate());
            if (jJProductStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJProduct);
            }
        }
        return suggestions;
    }
    
    public List<JJCategory> JJRightBean.completeCategory(String query) {
        List<JJCategory> suggestions = new ArrayList<JJCategory>();
        for (JJCategory jJCategory : jJCategoryService.findAllJJCategorys()) {
            String jJCategoryStr = String.valueOf(jJCategory.getName() +  " "  + jJCategory.getDescription() +  " "  + jJCategory.getCreationDate() +  " "  + jJCategory.getUpdatedDate());
            if (jJCategoryStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJCategory);
            }
        }
        return suggestions;
    }
    
    public List<JJProfile> JJRightBean.getSelectedProfiles() {
        return selectedProfiles;
    }
    
    public void JJRightBean.setSelectedProfiles(List<JJProfile> selectedProfiles) {
        if (selectedProfiles != null) {
            JJRight_.setProfiles(new HashSet<JJProfile>(selectedProfiles));
        }
        this.selectedProfiles = selectedProfiles;
    }
    
    public String JJRightBean.onEdit() {
        if (JJRight_ != null && JJRight_.getProfiles() != null) {
            selectedProfiles = new ArrayList<JJProfile>(JJRight_.getProfiles());
        }
        return null;
    }
    
    public boolean JJRightBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJRightBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJRightBean.displayList() {
        createDialogVisible = false;
        findAllJJRights();
        return "JJRight_";
    }
    
    public String JJRightBean.displayCreateDialog() {
        JJRight_ = new JJRight();
        createDialogVisible = true;
        return "JJRight_";
    }
    
    public String JJRightBean.persist() {
        String message = "";
        if (JJRight_.getId() != null) {
            jJRightService.updateJJRight(JJRight_);
            message = "message_successfully_updated";
        } else {
            jJRightService.saveJJRight(JJRight_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJRight");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJRights();
    }
    
    public String JJRightBean.delete() {
        jJRightService.deleteJJRight(JJRight_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJRight");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJRights();
    }
    
    public void JJRightBean.reset() {
        JJRight_ = null;
        selectedProfiles = null;
        createDialogVisible = false;
    }
    
    public void JJRightBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

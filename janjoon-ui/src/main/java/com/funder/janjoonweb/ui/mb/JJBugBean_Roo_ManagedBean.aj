// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.funder.janjoonweb.ui.mb;

import com.funder.janjoonweb.domain.JJBug;
import com.funder.janjoonweb.domain.JJBugService;
import com.funder.janjoonweb.domain.JJCategory;
import com.funder.janjoonweb.domain.JJCategoryService;
import com.funder.janjoonweb.domain.JJContact;
import com.funder.janjoonweb.domain.JJContactService;
import com.funder.janjoonweb.domain.JJCriticity;
import com.funder.janjoonweb.domain.JJCriticityService;
import com.funder.janjoonweb.domain.JJImportance;
import com.funder.janjoonweb.domain.JJImportanceService;
import com.funder.janjoonweb.domain.JJMessage;
import com.funder.janjoonweb.domain.JJProject;
import com.funder.janjoonweb.domain.JJProjectService;
import com.funder.janjoonweb.domain.JJRequirement;
import com.funder.janjoonweb.domain.JJRequirementService;
import com.funder.janjoonweb.domain.JJStatus;
import com.funder.janjoonweb.domain.JJStatusService;
import com.funder.janjoonweb.domain.JJTask;
import com.funder.janjoonweb.domain.JJVersion;
import com.funder.janjoonweb.domain.JJVersionService;
import com.funder.janjoonweb.domain.reference.JJRelationship;
import com.funder.janjoonweb.ui.mb.JJBugBean;
import com.funder.janjoonweb.ui.mb.converter.JJBugConverter;
import com.funder.janjoonweb.ui.mb.converter.JJCategoryConverter;
import com.funder.janjoonweb.ui.mb.converter.JJContactConverter;
import com.funder.janjoonweb.ui.mb.converter.JJCriticityConverter;
import com.funder.janjoonweb.ui.mb.converter.JJImportanceConverter;
import com.funder.janjoonweb.ui.mb.converter.JJProjectConverter;
import com.funder.janjoonweb.ui.mb.converter.JJRequirementConverter;
import com.funder.janjoonweb.ui.mb.converter.JJStatusConverter;
import com.funder.janjoonweb.ui.mb.converter.JJVersionConverter;
import com.funder.janjoonweb.ui.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect JJBugBean_Roo_ManagedBean {
    
    declare @type: JJBugBean: @ManagedBean(name = "jJBugBean");
    
    declare @type: JJBugBean: @SessionScoped;
    
    @Autowired
    JJBugService JJBugBean.jJBugService;
    
    @Autowired
    JJContactService JJBugBean.jJContactService;
    
    @Autowired
    JJProjectService JJBugBean.jJProjectService;
    
    @Autowired
    JJVersionService JJBugBean.jJVersionService;
    
    @Autowired
    JJCategoryService JJBugBean.jJCategoryService;
    
    @Autowired
    JJCriticityService JJBugBean.jJCriticityService;
    
    @Autowired
    JJImportanceService JJBugBean.jJImportanceService;
    
    @Autowired
    JJStatusService JJBugBean.jJStatusService;
    
    @Autowired
    JJRequirementService JJBugBean.jJRequirementService;
    
    private String JJBugBean.name = "JJBugs";
    
    private JJBug JJBugBean.JJBug_;
    
    private List<JJBug> JJBugBean.allJJBugs;
    
    private boolean JJBugBean.dataVisible = false;
    
    private List<String> JJBugBean.columns;
    
    private HtmlPanelGrid JJBugBean.createPanelGrid;
    
    private HtmlPanelGrid JJBugBean.editPanelGrid;
    
    private HtmlPanelGrid JJBugBean.viewPanelGrid;
    
    private boolean JJBugBean.createDialogVisible = false;
    
    private List<JJBug> JJBugBean.selectedBugs;
    
    private List<JJTask> JJBugBean.selectedTasks;
    
    private List<JJContact> JJBugBean.selectedAssignedTos;
    
    private List<JJMessage> JJBugBean.selectedMessages;
    
    @PostConstruct
    public void JJBugBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("creationDate");
        columns.add("updatedDate");
        columns.add("startDate");
    }
    
    public String JJBugBean.getName() {
        return name;
    }
    
    public List<String> JJBugBean.getColumns() {
        return columns;
    }
    
    public List<JJBug> JJBugBean.getAllJJBugs() {
        return allJJBugs;
    }
    
    public void JJBugBean.setAllJJBugs(List<JJBug> allJJBugs) {
        this.allJJBugs = allJJBugs;
    }
    
    public String JJBugBean.findAllJJBugs() {
        allJJBugs = jJBugService.findAllJJBugs();
        dataVisible = !allJJBugs.isEmpty();
        return null;
    }
    
    public boolean JJBugBean.isDataVisible() {
        return dataVisible;
    }
    
    public void JJBugBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid JJBugBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void JJBugBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid JJBugBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void JJBugBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid JJBugBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void JJBugBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid JJBugBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMaximum(25);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel descriptionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionCreateOutput.setFor("descriptionCreateInput");
        descriptionCreateOutput.setId("descriptionCreateOutput");
        descriptionCreateOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionCreateOutput);
        
        InputTextarea descriptionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionCreateInput.setId("descriptionCreateInput");
        descriptionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.description}", String.class));
        LengthValidator descriptionCreateInputValidator = new LengthValidator();
        descriptionCreateInputValidator.setMaximum(500);
        descriptionCreateInput.addValidator(descriptionCreateInputValidator);
        descriptionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionCreateInput);
        
        Message descriptionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionCreateInputMessage.setId("descriptionCreateInputMessage");
        descriptionCreateInputMessage.setFor("descriptionCreateInput");
        descriptionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionCreateInputMessage);
        
        OutputLabel creationDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateCreateOutput.setFor("creationDateCreateInput");
        creationDateCreateOutput.setId("creationDateCreateOutput");
        creationDateCreateOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateCreateOutput);
        
        Calendar creationDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateCreateInput.setId("creationDateCreateInput");
        creationDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.creationDate}", Date.class));
        creationDateCreateInput.setNavigator(true);
        creationDateCreateInput.setEffect("slideDown");
        creationDateCreateInput.setPattern("dd/MM/yyyy");
        creationDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateCreateInput);
        
        Message creationDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateCreateInputMessage.setId("creationDateCreateInputMessage");
        creationDateCreateInputMessage.setFor("creationDateCreateInput");
        creationDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateCreateInputMessage);
        
        OutputLabel createdByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByCreateOutput.setFor("createdByCreateInput");
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.createdBy}", JJContact.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByCreateInput.setConverter(new JJContactConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        OutputLabel updatedDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateCreateOutput.setFor("updatedDateCreateInput");
        updatedDateCreateOutput.setId("updatedDateCreateOutput");
        updatedDateCreateOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateCreateOutput);
        
        Calendar updatedDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateCreateInput.setId("updatedDateCreateInput");
        updatedDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.updatedDate}", Date.class));
        updatedDateCreateInput.setNavigator(true);
        updatedDateCreateInput.setEffect("slideDown");
        updatedDateCreateInput.setPattern("dd/MM/yyyy");
        updatedDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateCreateInput);
        
        Message updatedDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateCreateInputMessage.setId("updatedDateCreateInputMessage");
        updatedDateCreateInputMessage.setFor("updatedDateCreateInput");
        updatedDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateCreateInputMessage);
        
        OutputLabel updatedByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByCreateOutput.setFor("updatedByCreateInput");
        updatedByCreateOutput.setId("updatedByCreateOutput");
        updatedByCreateOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByCreateOutput);
        
        AutoComplete updatedByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByCreateInput.setId("updatedByCreateInput");
        updatedByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.updatedBy}", JJContact.class));
        updatedByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByCreateInput.setDropdown(true);
        updatedByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByCreateInput.setConverter(new JJContactConverter());
        updatedByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByCreateInput);
        
        Message updatedByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByCreateInputMessage.setId("updatedByCreateInputMessage");
        updatedByCreateInputMessage.setFor("updatedByCreateInput");
        updatedByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByCreateInputMessage);
        
        OutputLabel enabledCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledCreateOutput.setFor("enabledCreateInput");
        enabledCreateOutput.setId("enabledCreateOutput");
        enabledCreateOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledCreateOutput);
        
        SelectBooleanCheckbox enabledCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledCreateInput.setId("enabledCreateInput");
        enabledCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.enabled}", Boolean.class));
        enabledCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledCreateInput);
        
        Message enabledCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledCreateInputMessage.setId("enabledCreateInputMessage");
        enabledCreateInputMessage.setFor("enabledCreateInput");
        enabledCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledCreateInputMessage);
        
        OutputLabel projectCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        projectCreateOutput.setFor("projectCreateInput");
        projectCreateOutput.setId("projectCreateOutput");
        projectCreateOutput.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectCreateOutput);
        
        AutoComplete projectCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        projectCreateInput.setId("projectCreateInput");
        projectCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.project}", JJProject.class));
        projectCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeProject}", List.class, new Class[] { String.class }));
        projectCreateInput.setDropdown(true);
        projectCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "project", String.class));
        projectCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{project.name} #{project.description} #{project.creationDate} #{project.updatedDate}", String.class));
        projectCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{project}", JJProject.class));
        projectCreateInput.setConverter(new JJProjectConverter());
        projectCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(projectCreateInput);
        
        Message projectCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectCreateInputMessage.setId("projectCreateInputMessage");
        projectCreateInputMessage.setFor("projectCreateInput");
        projectCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectCreateInputMessage);
        
        OutputLabel startDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        startDateCreateOutput.setFor("startDateCreateInput");
        startDateCreateOutput.setId("startDateCreateOutput");
        startDateCreateOutput.setValue("Start Date:");
        htmlPanelGrid.getChildren().add(startDateCreateOutput);
        
        Calendar startDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        startDateCreateInput.setId("startDateCreateInput");
        startDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.startDate}", Date.class));
        startDateCreateInput.setNavigator(true);
        startDateCreateInput.setEffect("slideDown");
        startDateCreateInput.setPattern("dd/MM/yyyy");
        startDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(startDateCreateInput);
        
        Message startDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        startDateCreateInputMessage.setId("startDateCreateInputMessage");
        startDateCreateInputMessage.setFor("startDateCreateInput");
        startDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(startDateCreateInputMessage);
        
        OutputLabel endDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        endDateCreateOutput.setFor("endDateCreateInput");
        endDateCreateOutput.setId("endDateCreateOutput");
        endDateCreateOutput.setValue("End Date:");
        htmlPanelGrid.getChildren().add(endDateCreateOutput);
        
        Calendar endDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        endDateCreateInput.setId("endDateCreateInput");
        endDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.endDate}", Date.class));
        endDateCreateInput.setNavigator(true);
        endDateCreateInput.setEffect("slideDown");
        endDateCreateInput.setPattern("dd/MM/yyyy");
        endDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(endDateCreateInput);
        
        Message endDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        endDateCreateInputMessage.setId("endDateCreateInputMessage");
        endDateCreateInputMessage.setFor("endDateCreateInput");
        endDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(endDateCreateInputMessage);
        
        OutputLabel workloadCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadCreateOutput.setFor("workloadCreateInput");
        workloadCreateOutput.setId("workloadCreateOutput");
        workloadCreateOutput.setValue("Workload:");
        htmlPanelGrid.getChildren().add(workloadCreateOutput);
        
        Spinner workloadCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadCreateInput.setId("workloadCreateInput");
        workloadCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.workload}", Integer.class));
        workloadCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadCreateInput);
        
        Message workloadCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadCreateInputMessage.setId("workloadCreateInputMessage");
        workloadCreateInputMessage.setFor("workloadCreateInput");
        workloadCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadCreateInputMessage);
        
        OutputLabel jjversionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        jjversionCreateOutput.setFor("jjversionCreateInput");
        jjversionCreateOutput.setId("jjversionCreateOutput");
        jjversionCreateOutput.setValue("Jjversion:");
        htmlPanelGrid.getChildren().add(jjversionCreateOutput);
        
        AutoComplete jjversionCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        jjversionCreateInput.setId("jjversionCreateInput");
        jjversionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.jjversion}", JJVersion.class));
        jjversionCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeJjversion}", List.class, new Class[] { String.class }));
        jjversionCreateInput.setDropdown(true);
        jjversionCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jjversion", String.class));
        jjversionCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jjversion.name} #{jjversion.description} #{jjversion.creationDate} #{jjversion.updatedDate}", String.class));
        jjversionCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jjversion}", JJVersion.class));
        jjversionCreateInput.setConverter(new JJVersionConverter());
        jjversionCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(jjversionCreateInput);
        
        Message jjversionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        jjversionCreateInputMessage.setId("jjversionCreateInputMessage");
        jjversionCreateInputMessage.setFor("jjversionCreateInput");
        jjversionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(jjversionCreateInputMessage);
        
        OutputLabel categoryCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        categoryCreateOutput.setFor("categoryCreateInput");
        categoryCreateOutput.setId("categoryCreateOutput");
        categoryCreateOutput.setValue("Category:");
        htmlPanelGrid.getChildren().add(categoryCreateOutput);
        
        AutoComplete categoryCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoryCreateInput.setId("categoryCreateInput");
        categoryCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.category}", JJCategory.class));
        categoryCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeCategory}", List.class, new Class[] { String.class }));
        categoryCreateInput.setDropdown(true);
        categoryCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "category", String.class));
        categoryCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{category.name} #{category.description} #{category.creationDate} #{category.updatedDate}", String.class));
        categoryCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{category}", JJCategory.class));
        categoryCreateInput.setConverter(new JJCategoryConverter());
        categoryCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoryCreateInput);
        
        Message categoryCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoryCreateInputMessage.setId("categoryCreateInputMessage");
        categoryCreateInputMessage.setFor("categoryCreateInput");
        categoryCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoryCreateInputMessage);
        
        OutputLabel criticityCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        criticityCreateOutput.setFor("criticityCreateInput");
        criticityCreateOutput.setId("criticityCreateOutput");
        criticityCreateOutput.setValue("Criticity:");
        htmlPanelGrid.getChildren().add(criticityCreateOutput);
        
        AutoComplete criticityCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        criticityCreateInput.setId("criticityCreateInput");
        criticityCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.criticity}", JJCriticity.class));
        criticityCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeCriticity}", List.class, new Class[] { String.class }));
        criticityCreateInput.setDropdown(true);
        criticityCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "criticity", String.class));
        criticityCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{criticity.name} #{criticity.description} #{criticity.creationDate} #{criticity.updatedDate}", String.class));
        criticityCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{criticity}", JJCriticity.class));
        criticityCreateInput.setConverter(new JJCriticityConverter());
        criticityCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(criticityCreateInput);
        
        Message criticityCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        criticityCreateInputMessage.setId("criticityCreateInputMessage");
        criticityCreateInputMessage.setFor("criticityCreateInput");
        criticityCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(criticityCreateInputMessage);
        
        OutputLabel importanceCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        importanceCreateOutput.setFor("importanceCreateInput");
        importanceCreateOutput.setId("importanceCreateOutput");
        importanceCreateOutput.setValue("Importance:");
        htmlPanelGrid.getChildren().add(importanceCreateOutput);
        
        AutoComplete importanceCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        importanceCreateInput.setId("importanceCreateInput");
        importanceCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.importance}", JJImportance.class));
        importanceCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeImportance}", List.class, new Class[] { String.class }));
        importanceCreateInput.setDropdown(true);
        importanceCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "importance", String.class));
        importanceCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{importance.name} #{importance.description} #{importance.creationDate} #{importance.updatedDate}", String.class));
        importanceCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{importance}", JJImportance.class));
        importanceCreateInput.setConverter(new JJImportanceConverter());
        importanceCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(importanceCreateInput);
        
        Message importanceCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        importanceCreateInputMessage.setId("importanceCreateInputMessage");
        importanceCreateInputMessage.setFor("importanceCreateInput");
        importanceCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(importanceCreateInputMessage);
        
        OutputLabel statusCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusCreateOutput.setFor("statusCreateInput");
        statusCreateOutput.setId("statusCreateOutput");
        statusCreateOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusCreateOutput);
        
        AutoComplete statusCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        statusCreateInput.setId("statusCreateInput");
        statusCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.status}", JJStatus.class));
        statusCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeStatus}", List.class, new Class[] { String.class }));
        statusCreateInput.setDropdown(true);
        statusCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "status", String.class));
        statusCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{status.name} #{status.description} #{status.creationDate} #{status.updatedDate}", String.class));
        statusCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{status}", JJStatus.class));
        statusCreateInput.setConverter(new JJStatusConverter());
        statusCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(statusCreateInput);
        
        Message statusCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusCreateInputMessage.setId("statusCreateInputMessage");
        statusCreateInputMessage.setFor("statusCreateInput");
        statusCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusCreateInputMessage);
        
        OutputLabel relationCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        relationCreateOutput.setFor("relationCreateInput");
        relationCreateOutput.setId("relationCreateOutput");
        relationCreateOutput.setValue("Relation:");
        htmlPanelGrid.getChildren().add(relationCreateOutput);
        
        AutoComplete relationCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        relationCreateInput.setId("relationCreateInput");
        relationCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.relation}", JJRelationship.class));
        relationCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeRelation}", List.class, new Class[] { String.class }));
        relationCreateInput.setDropdown(true);
        relationCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(relationCreateInput);
        
        Message relationCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        relationCreateInputMessage.setId("relationCreateInputMessage");
        relationCreateInputMessage.setFor("relationCreateInput");
        relationCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(relationCreateInputMessage);
        
        OutputLabel requirementCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        requirementCreateOutput.setFor("requirementCreateInput");
        requirementCreateOutput.setId("requirementCreateOutput");
        requirementCreateOutput.setValue("Requirement:");
        htmlPanelGrid.getChildren().add(requirementCreateOutput);
        
        AutoComplete requirementCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        requirementCreateInput.setId("requirementCreateInput");
        requirementCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.requirement}", JJRequirement.class));
        requirementCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeRequirement}", List.class, new Class[] { String.class }));
        requirementCreateInput.setDropdown(true);
        requirementCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "requirement", String.class));
        requirementCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{requirement.name} #{requirement.description} #{requirement.creationDate} #{requirement.updatedDate}", String.class));
        requirementCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{requirement}", JJRequirement.class));
        requirementCreateInput.setConverter(new JJRequirementConverter());
        requirementCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(requirementCreateInput);
        
        Message requirementCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementCreateInputMessage.setId("requirementCreateInputMessage");
        requirementCreateInputMessage.setFor("requirementCreateInput");
        requirementCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementCreateInputMessage);
        
        OutputLabel bugUpCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        bugUpCreateOutput.setFor("bugUpCreateInput");
        bugUpCreateOutput.setId("bugUpCreateOutput");
        bugUpCreateOutput.setValue("Bug Up:");
        htmlPanelGrid.getChildren().add(bugUpCreateOutput);
        
        AutoComplete bugUpCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        bugUpCreateInput.setId("bugUpCreateInput");
        bugUpCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.bugUp}", JJBug.class));
        bugUpCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeBugUp}", List.class, new Class[] { String.class }));
        bugUpCreateInput.setDropdown(true);
        bugUpCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "bugUp", String.class));
        bugUpCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{bugUp.name} #{bugUp.description} #{bugUp.creationDate} #{bugUp.updatedDate}", String.class));
        bugUpCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{bugUp}", JJBug.class));
        bugUpCreateInput.setConverter(new JJBugConverter());
        bugUpCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(bugUpCreateInput);
        
        Message bugUpCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bugUpCreateInputMessage.setId("bugUpCreateInputMessage");
        bugUpCreateInputMessage.setFor("bugUpCreateInput");
        bugUpCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bugUpCreateInputMessage);
        
        HtmlOutputText bugsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugsCreateOutput.setId("bugsCreateOutput");
        bugsCreateOutput.setValue("Bugs:");
        htmlPanelGrid.getChildren().add(bugsCreateOutput);
        
        HtmlOutputText bugsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugsCreateInput.setId("bugsCreateInput");
        bugsCreateInput.setValue("This relationship is managed from the JJBug side");
        htmlPanelGrid.getChildren().add(bugsCreateInput);
        
        Message bugsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bugsCreateInputMessage.setId("bugsCreateInputMessage");
        bugsCreateInputMessage.setFor("bugsCreateInput");
        bugsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bugsCreateInputMessage);
        
        HtmlOutputText tasksCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksCreateOutput.setId("tasksCreateOutput");
        tasksCreateOutput.setValue("Tasks:");
        htmlPanelGrid.getChildren().add(tasksCreateOutput);
        
        HtmlOutputText tasksCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksCreateInput.setId("tasksCreateInput");
        tasksCreateInput.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(tasksCreateInput);
        
        Message tasksCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tasksCreateInputMessage.setId("tasksCreateInputMessage");
        tasksCreateInputMessage.setFor("tasksCreateInput");
        tasksCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tasksCreateInputMessage);
        
        HtmlOutputText assignedTosCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedTosCreateOutput.setId("assignedTosCreateOutput");
        assignedTosCreateOutput.setValue("Assigned Tos:");
        htmlPanelGrid.getChildren().add(assignedTosCreateOutput);
        
        HtmlOutputText assignedTosCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedTosCreateInput.setId("assignedTosCreateInput");
        assignedTosCreateInput.setValue("This relationship is managed from the JJContact side");
        htmlPanelGrid.getChildren().add(assignedTosCreateInput);
        
        Message assignedTosCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        assignedTosCreateInputMessage.setId("assignedTosCreateInputMessage");
        assignedTosCreateInputMessage.setFor("assignedTosCreateInput");
        assignedTosCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(assignedTosCreateInputMessage);
        
        HtmlOutputText messagesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesCreateOutput.setId("messagesCreateOutput");
        messagesCreateOutput.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesCreateOutput);
        
        HtmlOutputText messagesCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesCreateInput.setId("messagesCreateInput");
        messagesCreateInput.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesCreateInput);
        
        Message messagesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messagesCreateInputMessage.setId("messagesCreateInputMessage");
        messagesCreateInputMessage.setFor("messagesCreateInput");
        messagesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messagesCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJBugBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMaximum(25);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel descriptionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionEditOutput.setFor("descriptionEditInput");
        descriptionEditOutput.setId("descriptionEditOutput");
        descriptionEditOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionEditOutput);
        
        InputTextarea descriptionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionEditInput.setId("descriptionEditInput");
        descriptionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.description}", String.class));
        LengthValidator descriptionEditInputValidator = new LengthValidator();
        descriptionEditInputValidator.setMaximum(500);
        descriptionEditInput.addValidator(descriptionEditInputValidator);
        descriptionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionEditInput);
        
        Message descriptionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionEditInputMessage.setId("descriptionEditInputMessage");
        descriptionEditInputMessage.setFor("descriptionEditInput");
        descriptionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionEditInputMessage);
        
        OutputLabel creationDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateEditOutput.setFor("creationDateEditInput");
        creationDateEditOutput.setId("creationDateEditOutput");
        creationDateEditOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateEditOutput);
        
        Calendar creationDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateEditInput.setId("creationDateEditInput");
        creationDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.creationDate}", Date.class));
        creationDateEditInput.setNavigator(true);
        creationDateEditInput.setEffect("slideDown");
        creationDateEditInput.setPattern("dd/MM/yyyy");
        creationDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateEditInput);
        
        Message creationDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateEditInputMessage.setId("creationDateEditInputMessage");
        creationDateEditInputMessage.setFor("creationDateEditInput");
        creationDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateEditInputMessage);
        
        OutputLabel createdByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        createdByEditOutput.setFor("createdByEditInput");
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.createdBy}", JJContact.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.name} #{createdBy.description} #{createdBy.creationDate} #{createdBy.updatedDate}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", JJContact.class));
        createdByEditInput.setConverter(new JJContactConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        OutputLabel updatedDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedDateEditOutput.setFor("updatedDateEditInput");
        updatedDateEditOutput.setId("updatedDateEditOutput");
        updatedDateEditOutput.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateEditOutput);
        
        Calendar updatedDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedDateEditInput.setId("updatedDateEditInput");
        updatedDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.updatedDate}", Date.class));
        updatedDateEditInput.setNavigator(true);
        updatedDateEditInput.setEffect("slideDown");
        updatedDateEditInput.setPattern("dd/MM/yyyy");
        updatedDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedDateEditInput);
        
        Message updatedDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedDateEditInputMessage.setId("updatedDateEditInputMessage");
        updatedDateEditInputMessage.setFor("updatedDateEditInput");
        updatedDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedDateEditInputMessage);
        
        OutputLabel updatedByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updatedByEditOutput.setFor("updatedByEditInput");
        updatedByEditOutput.setId("updatedByEditOutput");
        updatedByEditOutput.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByEditOutput);
        
        AutoComplete updatedByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByEditInput.setId("updatedByEditInput");
        updatedByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.updatedBy}", JJContact.class));
        updatedByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByEditInput.setDropdown(true);
        updatedByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.name} #{updatedBy.description} #{updatedBy.creationDate} #{updatedBy.updatedDate}", String.class));
        updatedByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", JJContact.class));
        updatedByEditInput.setConverter(new JJContactConverter());
        updatedByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByEditInput);
        
        Message updatedByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByEditInputMessage.setId("updatedByEditInputMessage");
        updatedByEditInputMessage.setFor("updatedByEditInput");
        updatedByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByEditInputMessage);
        
        OutputLabel enabledEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        enabledEditOutput.setFor("enabledEditInput");
        enabledEditOutput.setId("enabledEditOutput");
        enabledEditOutput.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledEditOutput);
        
        SelectBooleanCheckbox enabledEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        enabledEditInput.setId("enabledEditInput");
        enabledEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.enabled}", Boolean.class));
        enabledEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(enabledEditInput);
        
        Message enabledEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        enabledEditInputMessage.setId("enabledEditInputMessage");
        enabledEditInputMessage.setFor("enabledEditInput");
        enabledEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(enabledEditInputMessage);
        
        OutputLabel projectEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        projectEditOutput.setFor("projectEditInput");
        projectEditOutput.setId("projectEditOutput");
        projectEditOutput.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectEditOutput);
        
        AutoComplete projectEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        projectEditInput.setId("projectEditInput");
        projectEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.project}", JJProject.class));
        projectEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeProject}", List.class, new Class[] { String.class }));
        projectEditInput.setDropdown(true);
        projectEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "project", String.class));
        projectEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{project.name} #{project.description} #{project.creationDate} #{project.updatedDate}", String.class));
        projectEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{project}", JJProject.class));
        projectEditInput.setConverter(new JJProjectConverter());
        projectEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(projectEditInput);
        
        Message projectEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectEditInputMessage.setId("projectEditInputMessage");
        projectEditInputMessage.setFor("projectEditInput");
        projectEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectEditInputMessage);
        
        OutputLabel startDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        startDateEditOutput.setFor("startDateEditInput");
        startDateEditOutput.setId("startDateEditOutput");
        startDateEditOutput.setValue("Start Date:");
        htmlPanelGrid.getChildren().add(startDateEditOutput);
        
        Calendar startDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        startDateEditInput.setId("startDateEditInput");
        startDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.startDate}", Date.class));
        startDateEditInput.setNavigator(true);
        startDateEditInput.setEffect("slideDown");
        startDateEditInput.setPattern("dd/MM/yyyy");
        startDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(startDateEditInput);
        
        Message startDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        startDateEditInputMessage.setId("startDateEditInputMessage");
        startDateEditInputMessage.setFor("startDateEditInput");
        startDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(startDateEditInputMessage);
        
        OutputLabel endDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        endDateEditOutput.setFor("endDateEditInput");
        endDateEditOutput.setId("endDateEditOutput");
        endDateEditOutput.setValue("End Date:");
        htmlPanelGrid.getChildren().add(endDateEditOutput);
        
        Calendar endDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        endDateEditInput.setId("endDateEditInput");
        endDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.endDate}", Date.class));
        endDateEditInput.setNavigator(true);
        endDateEditInput.setEffect("slideDown");
        endDateEditInput.setPattern("dd/MM/yyyy");
        endDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(endDateEditInput);
        
        Message endDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        endDateEditInputMessage.setId("endDateEditInputMessage");
        endDateEditInputMessage.setFor("endDateEditInput");
        endDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(endDateEditInputMessage);
        
        OutputLabel workloadEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workloadEditOutput.setFor("workloadEditInput");
        workloadEditOutput.setId("workloadEditOutput");
        workloadEditOutput.setValue("Workload:");
        htmlPanelGrid.getChildren().add(workloadEditOutput);
        
        Spinner workloadEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        workloadEditInput.setId("workloadEditInput");
        workloadEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.workload}", Integer.class));
        workloadEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(workloadEditInput);
        
        Message workloadEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workloadEditInputMessage.setId("workloadEditInputMessage");
        workloadEditInputMessage.setFor("workloadEditInput");
        workloadEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workloadEditInputMessage);
        
        OutputLabel jjversionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        jjversionEditOutput.setFor("jjversionEditInput");
        jjversionEditOutput.setId("jjversionEditOutput");
        jjversionEditOutput.setValue("Jjversion:");
        htmlPanelGrid.getChildren().add(jjversionEditOutput);
        
        AutoComplete jjversionEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        jjversionEditInput.setId("jjversionEditInput");
        jjversionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.jjversion}", JJVersion.class));
        jjversionEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeJjversion}", List.class, new Class[] { String.class }));
        jjversionEditInput.setDropdown(true);
        jjversionEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "jjversion", String.class));
        jjversionEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{jjversion.name} #{jjversion.description} #{jjversion.creationDate} #{jjversion.updatedDate}", String.class));
        jjversionEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{jjversion}", JJVersion.class));
        jjversionEditInput.setConverter(new JJVersionConverter());
        jjversionEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(jjversionEditInput);
        
        Message jjversionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        jjversionEditInputMessage.setId("jjversionEditInputMessage");
        jjversionEditInputMessage.setFor("jjversionEditInput");
        jjversionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(jjversionEditInputMessage);
        
        OutputLabel categoryEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        categoryEditOutput.setFor("categoryEditInput");
        categoryEditOutput.setId("categoryEditOutput");
        categoryEditOutput.setValue("Category:");
        htmlPanelGrid.getChildren().add(categoryEditOutput);
        
        AutoComplete categoryEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoryEditInput.setId("categoryEditInput");
        categoryEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.category}", JJCategory.class));
        categoryEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeCategory}", List.class, new Class[] { String.class }));
        categoryEditInput.setDropdown(true);
        categoryEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "category", String.class));
        categoryEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{category.name} #{category.description} #{category.creationDate} #{category.updatedDate}", String.class));
        categoryEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{category}", JJCategory.class));
        categoryEditInput.setConverter(new JJCategoryConverter());
        categoryEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoryEditInput);
        
        Message categoryEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoryEditInputMessage.setId("categoryEditInputMessage");
        categoryEditInputMessage.setFor("categoryEditInput");
        categoryEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoryEditInputMessage);
        
        OutputLabel criticityEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        criticityEditOutput.setFor("criticityEditInput");
        criticityEditOutput.setId("criticityEditOutput");
        criticityEditOutput.setValue("Criticity:");
        htmlPanelGrid.getChildren().add(criticityEditOutput);
        
        AutoComplete criticityEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        criticityEditInput.setId("criticityEditInput");
        criticityEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.criticity}", JJCriticity.class));
        criticityEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeCriticity}", List.class, new Class[] { String.class }));
        criticityEditInput.setDropdown(true);
        criticityEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "criticity", String.class));
        criticityEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{criticity.name} #{criticity.description} #{criticity.creationDate} #{criticity.updatedDate}", String.class));
        criticityEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{criticity}", JJCriticity.class));
        criticityEditInput.setConverter(new JJCriticityConverter());
        criticityEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(criticityEditInput);
        
        Message criticityEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        criticityEditInputMessage.setId("criticityEditInputMessage");
        criticityEditInputMessage.setFor("criticityEditInput");
        criticityEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(criticityEditInputMessage);
        
        OutputLabel importanceEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        importanceEditOutput.setFor("importanceEditInput");
        importanceEditOutput.setId("importanceEditOutput");
        importanceEditOutput.setValue("Importance:");
        htmlPanelGrid.getChildren().add(importanceEditOutput);
        
        AutoComplete importanceEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        importanceEditInput.setId("importanceEditInput");
        importanceEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.importance}", JJImportance.class));
        importanceEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeImportance}", List.class, new Class[] { String.class }));
        importanceEditInput.setDropdown(true);
        importanceEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "importance", String.class));
        importanceEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{importance.name} #{importance.description} #{importance.creationDate} #{importance.updatedDate}", String.class));
        importanceEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{importance}", JJImportance.class));
        importanceEditInput.setConverter(new JJImportanceConverter());
        importanceEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(importanceEditInput);
        
        Message importanceEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        importanceEditInputMessage.setId("importanceEditInputMessage");
        importanceEditInputMessage.setFor("importanceEditInput");
        importanceEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(importanceEditInputMessage);
        
        OutputLabel statusEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusEditOutput.setFor("statusEditInput");
        statusEditOutput.setId("statusEditOutput");
        statusEditOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusEditOutput);
        
        AutoComplete statusEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        statusEditInput.setId("statusEditInput");
        statusEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.status}", JJStatus.class));
        statusEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeStatus}", List.class, new Class[] { String.class }));
        statusEditInput.setDropdown(true);
        statusEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "status", String.class));
        statusEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{status.name} #{status.description} #{status.creationDate} #{status.updatedDate}", String.class));
        statusEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{status}", JJStatus.class));
        statusEditInput.setConverter(new JJStatusConverter());
        statusEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(statusEditInput);
        
        Message statusEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusEditInputMessage.setId("statusEditInputMessage");
        statusEditInputMessage.setFor("statusEditInput");
        statusEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusEditInputMessage);
        
        OutputLabel relationEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        relationEditOutput.setFor("relationEditInput");
        relationEditOutput.setId("relationEditOutput");
        relationEditOutput.setValue("Relation:");
        htmlPanelGrid.getChildren().add(relationEditOutput);
        
        AutoComplete relationEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        relationEditInput.setId("relationEditInput");
        relationEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.relation}", JJRelationship.class));
        relationEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeRelation}", List.class, new Class[] { String.class }));
        relationEditInput.setDropdown(true);
        relationEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(relationEditInput);
        
        Message relationEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        relationEditInputMessage.setId("relationEditInputMessage");
        relationEditInputMessage.setFor("relationEditInput");
        relationEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(relationEditInputMessage);
        
        OutputLabel requirementEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        requirementEditOutput.setFor("requirementEditInput");
        requirementEditOutput.setId("requirementEditOutput");
        requirementEditOutput.setValue("Requirement:");
        htmlPanelGrid.getChildren().add(requirementEditOutput);
        
        AutoComplete requirementEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        requirementEditInput.setId("requirementEditInput");
        requirementEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.requirement}", JJRequirement.class));
        requirementEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeRequirement}", List.class, new Class[] { String.class }));
        requirementEditInput.setDropdown(true);
        requirementEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "requirement", String.class));
        requirementEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{requirement.name} #{requirement.description} #{requirement.creationDate} #{requirement.updatedDate}", String.class));
        requirementEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{requirement}", JJRequirement.class));
        requirementEditInput.setConverter(new JJRequirementConverter());
        requirementEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(requirementEditInput);
        
        Message requirementEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        requirementEditInputMessage.setId("requirementEditInputMessage");
        requirementEditInputMessage.setFor("requirementEditInput");
        requirementEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(requirementEditInputMessage);
        
        OutputLabel bugUpEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        bugUpEditOutput.setFor("bugUpEditInput");
        bugUpEditOutput.setId("bugUpEditOutput");
        bugUpEditOutput.setValue("Bug Up:");
        htmlPanelGrid.getChildren().add(bugUpEditOutput);
        
        AutoComplete bugUpEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        bugUpEditInput.setId("bugUpEditInput");
        bugUpEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.bugUp}", JJBug.class));
        bugUpEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{jJBugBean.completeBugUp}", List.class, new Class[] { String.class }));
        bugUpEditInput.setDropdown(true);
        bugUpEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "bugUp", String.class));
        bugUpEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{bugUp.name} #{bugUp.description} #{bugUp.creationDate} #{bugUp.updatedDate}", String.class));
        bugUpEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{bugUp}", JJBug.class));
        bugUpEditInput.setConverter(new JJBugConverter());
        bugUpEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(bugUpEditInput);
        
        Message bugUpEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bugUpEditInputMessage.setId("bugUpEditInputMessage");
        bugUpEditInputMessage.setFor("bugUpEditInput");
        bugUpEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bugUpEditInputMessage);
        
        HtmlOutputText bugsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugsEditOutput.setId("bugsEditOutput");
        bugsEditOutput.setValue("Bugs:");
        htmlPanelGrid.getChildren().add(bugsEditOutput);
        
        HtmlOutputText bugsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugsEditInput.setId("bugsEditInput");
        bugsEditInput.setValue("This relationship is managed from the JJBug side");
        htmlPanelGrid.getChildren().add(bugsEditInput);
        
        Message bugsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bugsEditInputMessage.setId("bugsEditInputMessage");
        bugsEditInputMessage.setFor("bugsEditInput");
        bugsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bugsEditInputMessage);
        
        HtmlOutputText tasksEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksEditOutput.setId("tasksEditOutput");
        tasksEditOutput.setValue("Tasks:");
        htmlPanelGrid.getChildren().add(tasksEditOutput);
        
        HtmlOutputText tasksEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksEditInput.setId("tasksEditInput");
        tasksEditInput.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(tasksEditInput);
        
        Message tasksEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tasksEditInputMessage.setId("tasksEditInputMessage");
        tasksEditInputMessage.setFor("tasksEditInput");
        tasksEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tasksEditInputMessage);
        
        HtmlOutputText assignedTosEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedTosEditOutput.setId("assignedTosEditOutput");
        assignedTosEditOutput.setValue("Assigned Tos:");
        htmlPanelGrid.getChildren().add(assignedTosEditOutput);
        
        HtmlOutputText assignedTosEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedTosEditInput.setId("assignedTosEditInput");
        assignedTosEditInput.setValue("This relationship is managed from the JJContact side");
        htmlPanelGrid.getChildren().add(assignedTosEditInput);
        
        Message assignedTosEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        assignedTosEditInputMessage.setId("assignedTosEditInputMessage");
        assignedTosEditInputMessage.setFor("assignedTosEditInput");
        assignedTosEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(assignedTosEditInputMessage);
        
        HtmlOutputText messagesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesEditOutput.setId("messagesEditOutput");
        messagesEditOutput.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesEditOutput);
        
        HtmlOutputText messagesEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesEditInput.setId("messagesEditInput");
        messagesEditInput.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesEditInput);
        
        Message messagesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messagesEditInputMessage.setId("messagesEditInputMessage");
        messagesEditInputMessage.setFor("messagesEditInput");
        messagesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messagesEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid JJBugBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText descriptionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionLabel.setId("descriptionLabel");
        descriptionLabel.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionLabel);
        
        InputTextarea descriptionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionValue.setId("descriptionValue");
        descriptionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.description}", String.class));
        descriptionValue.setReadonly(true);
        descriptionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descriptionValue);
        
        HtmlOutputText creationDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateLabel.setId("creationDateLabel");
        creationDateLabel.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateLabel);
        
        HtmlOutputText creationDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.creationDate}", Date.class));
        DateTimeConverter creationDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationDateValueConverter.setPattern("dd/MM/yyyy");
        creationDateValue.setConverter(creationDateValueConverter);
        htmlPanelGrid.getChildren().add(creationDateValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.createdBy}", JJContact.class));
        createdByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        HtmlOutputText updatedDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateLabel.setId("updatedDateLabel");
        updatedDateLabel.setValue("Updated Date:");
        htmlPanelGrid.getChildren().add(updatedDateLabel);
        
        HtmlOutputText updatedDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.updatedDate}", Date.class));
        DateTimeConverter updatedDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updatedDateValueConverter.setPattern("dd/MM/yyyy");
        updatedDateValue.setConverter(updatedDateValueConverter);
        htmlPanelGrid.getChildren().add(updatedDateValue);
        
        HtmlOutputText updatedByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByLabel.setId("updatedByLabel");
        updatedByLabel.setValue("Updated By:");
        htmlPanelGrid.getChildren().add(updatedByLabel);
        
        HtmlOutputText updatedByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.updatedBy}", JJContact.class));
        updatedByValue.setConverter(new JJContactConverter());
        htmlPanelGrid.getChildren().add(updatedByValue);
        
        HtmlOutputText enabledLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledLabel.setId("enabledLabel");
        enabledLabel.setValue("Enabled:");
        htmlPanelGrid.getChildren().add(enabledLabel);
        
        HtmlOutputText enabledValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        enabledValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.enabled}", String.class));
        htmlPanelGrid.getChildren().add(enabledValue);
        
        HtmlOutputText projectLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectLabel.setId("projectLabel");
        projectLabel.setValue("Project:");
        htmlPanelGrid.getChildren().add(projectLabel);
        
        HtmlOutputText projectValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.project}", JJProject.class));
        projectValue.setConverter(new JJProjectConverter());
        htmlPanelGrid.getChildren().add(projectValue);
        
        HtmlOutputText startDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        startDateLabel.setId("startDateLabel");
        startDateLabel.setValue("Start Date:");
        htmlPanelGrid.getChildren().add(startDateLabel);
        
        HtmlOutputText startDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        startDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.startDate}", Date.class));
        DateTimeConverter startDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        startDateValueConverter.setPattern("dd/MM/yyyy");
        startDateValue.setConverter(startDateValueConverter);
        htmlPanelGrid.getChildren().add(startDateValue);
        
        HtmlOutputText endDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endDateLabel.setId("endDateLabel");
        endDateLabel.setValue("End Date:");
        htmlPanelGrid.getChildren().add(endDateLabel);
        
        HtmlOutputText endDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.endDate}", Date.class));
        DateTimeConverter endDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        endDateValueConverter.setPattern("dd/MM/yyyy");
        endDateValue.setConverter(endDateValueConverter);
        htmlPanelGrid.getChildren().add(endDateValue);
        
        HtmlOutputText workloadLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadLabel.setId("workloadLabel");
        workloadLabel.setValue("Workload:");
        htmlPanelGrid.getChildren().add(workloadLabel);
        
        HtmlOutputText workloadValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workloadValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.workload}", String.class));
        htmlPanelGrid.getChildren().add(workloadValue);
        
        HtmlOutputText jjversionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        jjversionLabel.setId("jjversionLabel");
        jjversionLabel.setValue("Jjversion:");
        htmlPanelGrid.getChildren().add(jjversionLabel);
        
        HtmlOutputText jjversionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        jjversionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.jjversion}", JJVersion.class));
        jjversionValue.setConverter(new JJVersionConverter());
        htmlPanelGrid.getChildren().add(jjversionValue);
        
        HtmlOutputText categoryLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoryLabel.setId("categoryLabel");
        categoryLabel.setValue("Category:");
        htmlPanelGrid.getChildren().add(categoryLabel);
        
        HtmlOutputText categoryValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoryValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.category}", JJCategory.class));
        categoryValue.setConverter(new JJCategoryConverter());
        htmlPanelGrid.getChildren().add(categoryValue);
        
        HtmlOutputText criticityLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        criticityLabel.setId("criticityLabel");
        criticityLabel.setValue("Criticity:");
        htmlPanelGrid.getChildren().add(criticityLabel);
        
        HtmlOutputText criticityValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        criticityValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.criticity}", JJCriticity.class));
        criticityValue.setConverter(new JJCriticityConverter());
        htmlPanelGrid.getChildren().add(criticityValue);
        
        HtmlOutputText importanceLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        importanceLabel.setId("importanceLabel");
        importanceLabel.setValue("Importance:");
        htmlPanelGrid.getChildren().add(importanceLabel);
        
        HtmlOutputText importanceValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        importanceValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.importance}", JJImportance.class));
        importanceValue.setConverter(new JJImportanceConverter());
        htmlPanelGrid.getChildren().add(importanceValue);
        
        HtmlOutputText statusLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusLabel.setId("statusLabel");
        statusLabel.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusLabel);
        
        HtmlOutputText statusValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.status}", JJStatus.class));
        statusValue.setConverter(new JJStatusConverter());
        htmlPanelGrid.getChildren().add(statusValue);
        
        HtmlOutputText relationLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        relationLabel.setId("relationLabel");
        relationLabel.setValue("Relation:");
        htmlPanelGrid.getChildren().add(relationLabel);
        
        HtmlOutputText relationValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        relationValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.relation}", String.class));
        htmlPanelGrid.getChildren().add(relationValue);
        
        HtmlOutputText requirementLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementLabel.setId("requirementLabel");
        requirementLabel.setValue("Requirement:");
        htmlPanelGrid.getChildren().add(requirementLabel);
        
        HtmlOutputText requirementValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        requirementValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.requirement}", JJRequirement.class));
        requirementValue.setConverter(new JJRequirementConverter());
        htmlPanelGrid.getChildren().add(requirementValue);
        
        HtmlOutputText bugUpLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugUpLabel.setId("bugUpLabel");
        bugUpLabel.setValue("Bug Up:");
        htmlPanelGrid.getChildren().add(bugUpLabel);
        
        HtmlOutputText bugUpValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugUpValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{jJBugBean.JJBug_.bugUp}", JJBug.class));
        bugUpValue.setConverter(new JJBugConverter());
        htmlPanelGrid.getChildren().add(bugUpValue);
        
        HtmlOutputText bugsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugsLabel.setId("bugsLabel");
        bugsLabel.setValue("Bugs:");
        htmlPanelGrid.getChildren().add(bugsLabel);
        
        HtmlOutputText bugsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bugsValue.setId("bugsValue");
        bugsValue.setValue("This relationship is managed from the JJBug side");
        htmlPanelGrid.getChildren().add(bugsValue);
        
        HtmlOutputText tasksLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksLabel.setId("tasksLabel");
        tasksLabel.setValue("Tasks:");
        htmlPanelGrid.getChildren().add(tasksLabel);
        
        HtmlOutputText tasksValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasksValue.setId("tasksValue");
        tasksValue.setValue("This relationship is managed from the JJTask side");
        htmlPanelGrid.getChildren().add(tasksValue);
        
        HtmlOutputText assignedTosLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedTosLabel.setId("assignedTosLabel");
        assignedTosLabel.setValue("Assigned Tos:");
        htmlPanelGrid.getChildren().add(assignedTosLabel);
        
        HtmlOutputText assignedTosValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        assignedTosValue.setId("assignedTosValue");
        assignedTosValue.setValue("This relationship is managed from the JJContact side");
        htmlPanelGrid.getChildren().add(assignedTosValue);
        
        HtmlOutputText messagesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesLabel.setId("messagesLabel");
        messagesLabel.setValue("Messages:");
        htmlPanelGrid.getChildren().add(messagesLabel);
        
        HtmlOutputText messagesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messagesValue.setId("messagesValue");
        messagesValue.setValue("This relationship is managed from the JJMessage side");
        htmlPanelGrid.getChildren().add(messagesValue);
        
        return htmlPanelGrid;
    }
    
    public JJBug JJBugBean.getJJBug_() {
        if (JJBug_ == null) {
            JJBug_ = new JJBug();
        }
        return JJBug_;
    }
    
    public void JJBugBean.setJJBug_(JJBug JJBug_) {
        this.JJBug_ = JJBug_;
    }
    
    public List<JJContact> JJBugBean.completeCreatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJContact> JJBugBean.completeUpdatedBy(String query) {
        List<JJContact> suggestions = new ArrayList<JJContact>();
        for (JJContact jJContact : jJContactService.findAllJJContacts()) {
            String jJContactStr = String.valueOf(jJContact.getName() +  " "  + jJContact.getDescription() +  " "  + jJContact.getCreationDate() +  " "  + jJContact.getUpdatedDate());
            if (jJContactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJContact);
            }
        }
        return suggestions;
    }
    
    public List<JJProject> JJBugBean.completeProject(String query) {
        List<JJProject> suggestions = new ArrayList<JJProject>();
        for (JJProject jJProject : jJProjectService.findAllJJProjects()) {
            String jJProjectStr = String.valueOf(jJProject.getName() +  " "  + jJProject.getDescription() +  " "  + jJProject.getCreationDate() +  " "  + jJProject.getUpdatedDate());
            if (jJProjectStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJProject);
            }
        }
        return suggestions;
    }
    
    public List<JJVersion> JJBugBean.completeJjversion(String query) {
        List<JJVersion> suggestions = new ArrayList<JJVersion>();
        for (JJVersion jJVersion : jJVersionService.findAllJJVersions()) {
            String jJVersionStr = String.valueOf(jJVersion.getName() +  " "  + jJVersion.getDescription() +  " "  + jJVersion.getCreationDate() +  " "  + jJVersion.getUpdatedDate());
            if (jJVersionStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJVersion);
            }
        }
        return suggestions;
    }
    
    public List<JJCategory> JJBugBean.completeCategory(String query) {
        List<JJCategory> suggestions = new ArrayList<JJCategory>();
        for (JJCategory jJCategory : jJCategoryService.findAllJJCategorys()) {
            String jJCategoryStr = String.valueOf(jJCategory.getName() +  " "  + jJCategory.getDescription() +  " "  + jJCategory.getCreationDate() +  " "  + jJCategory.getUpdatedDate());
            if (jJCategoryStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJCategory);
            }
        }
        return suggestions;
    }
    
    public List<JJCriticity> JJBugBean.completeCriticity(String query) {
        List<JJCriticity> suggestions = new ArrayList<JJCriticity>();
        for (JJCriticity jJCriticity : jJCriticityService.findAllJJCriticitys()) {
            String jJCriticityStr = String.valueOf(jJCriticity.getName() +  " "  + jJCriticity.getDescription() +  " "  + jJCriticity.getCreationDate() +  " "  + jJCriticity.getUpdatedDate());
            if (jJCriticityStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJCriticity);
            }
        }
        return suggestions;
    }
    
    public List<JJImportance> JJBugBean.completeImportance(String query) {
        List<JJImportance> suggestions = new ArrayList<JJImportance>();
        for (JJImportance jJImportance : jJImportanceService.findAllJJImportances()) {
            String jJImportanceStr = String.valueOf(jJImportance.getName() +  " "  + jJImportance.getDescription() +  " "  + jJImportance.getCreationDate() +  " "  + jJImportance.getUpdatedDate());
            if (jJImportanceStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJImportance);
            }
        }
        return suggestions;
    }
    
    public List<JJStatus> JJBugBean.completeStatus(String query) {
        List<JJStatus> suggestions = new ArrayList<JJStatus>();
        for (JJStatus jJStatus : jJStatusService.findAllJJStatuses()) {
            String jJStatusStr = String.valueOf(jJStatus.getName() +  " "  + jJStatus.getDescription() +  " "  + jJStatus.getCreationDate() +  " "  + jJStatus.getUpdatedDate());
            if (jJStatusStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJStatus);
            }
        }
        return suggestions;
    }
    
    public List<JJRelationship> JJBugBean.completeRelation(String query) {
        List<JJRelationship> suggestions = new ArrayList<JJRelationship>();
        for (JJRelationship jJRelationship : JJRelationship.values()) {
            if (jJRelationship.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJRelationship);
            }
        }
        return suggestions;
    }
    
    public List<JJRequirement> JJBugBean.completeRequirement(String query) {
        List<JJRequirement> suggestions = new ArrayList<JJRequirement>();
        for (JJRequirement jJRequirement : jJRequirementService.findAllJJRequirements()) {
            String jJRequirementStr = String.valueOf(jJRequirement.getName() +  " "  + jJRequirement.getDescription() +  " "  + jJRequirement.getCreationDate() +  " "  + jJRequirement.getUpdatedDate());
            if (jJRequirementStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJRequirement);
            }
        }
        return suggestions;
    }
    
    public List<JJBug> JJBugBean.completeBugUp(String query) {
        List<JJBug> suggestions = new ArrayList<JJBug>();
        for (JJBug jJBug : jJBugService.findAllJJBugs()) {
            String jJBugStr = String.valueOf(jJBug.getName() +  " "  + jJBug.getDescription() +  " "  + jJBug.getCreationDate() +  " "  + jJBug.getUpdatedDate());
            if (jJBugStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(jJBug);
            }
        }
        return suggestions;
    }
    
    public List<JJBug> JJBugBean.getSelectedBugs() {
        return selectedBugs;
    }
    
    public void JJBugBean.setSelectedBugs(List<JJBug> selectedBugs) {
        if (selectedBugs != null) {
            JJBug_.setBugs(new HashSet<JJBug>(selectedBugs));
        }
        this.selectedBugs = selectedBugs;
    }
    
    public List<JJTask> JJBugBean.getSelectedTasks() {
        return selectedTasks;
    }
    
    public void JJBugBean.setSelectedTasks(List<JJTask> selectedTasks) {
        if (selectedTasks != null) {
            JJBug_.setTasks(new HashSet<JJTask>(selectedTasks));
        }
        this.selectedTasks = selectedTasks;
    }
    
    public List<JJContact> JJBugBean.getSelectedAssignedTos() {
        return selectedAssignedTos;
    }
    
    public void JJBugBean.setSelectedAssignedTos(List<JJContact> selectedAssignedTos) {
        if (selectedAssignedTos != null) {
            JJBug_.setAssignedTos(new HashSet<JJContact>(selectedAssignedTos));
        }
        this.selectedAssignedTos = selectedAssignedTos;
    }
    
    public List<JJMessage> JJBugBean.getSelectedMessages() {
        return selectedMessages;
    }
    
    public void JJBugBean.setSelectedMessages(List<JJMessage> selectedMessages) {
        if (selectedMessages != null) {
            JJBug_.setMessages(new HashSet<JJMessage>(selectedMessages));
        }
        this.selectedMessages = selectedMessages;
    }
    
    public String JJBugBean.onEdit() {
        if (JJBug_ != null && JJBug_.getBugs() != null) {
            selectedBugs = new ArrayList<JJBug>(JJBug_.getBugs());
        }
        if (JJBug_ != null && JJBug_.getTasks() != null) {
            selectedTasks = new ArrayList<JJTask>(JJBug_.getTasks());
        }
        if (JJBug_ != null && JJBug_.getAssignedTos() != null) {
            selectedAssignedTos = new ArrayList<JJContact>(JJBug_.getAssignedTos());
        }
        if (JJBug_ != null && JJBug_.getMessages() != null) {
            selectedMessages = new ArrayList<JJMessage>(JJBug_.getMessages());
        }
        return null;
    }
    
    public boolean JJBugBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void JJBugBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String JJBugBean.displayList() {
        createDialogVisible = false;
        findAllJJBugs();
        return "JJBug_";
    }
    
    public String JJBugBean.displayCreateDialog() {
        JJBug_ = new JJBug();
        createDialogVisible = true;
        return "JJBug_";
    }
    
    public String JJBugBean.persist() {
        String message = "";
        if (JJBug_.getId() != null) {
            jJBugService.updateJJBug(JJBug_);
            message = "message_successfully_updated";
        } else {
            jJBugService.saveJJBug(JJBug_);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "JJBug");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJBugs();
    }
    
    public String JJBugBean.delete() {
        jJBugService.deleteJJBug(JJBug_);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "JJBug");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllJJBugs();
    }
    
    public void JJBugBean.reset() {
        JJBug_ = null;
        selectedBugs = null;
        selectedTasks = null;
        selectedAssignedTos = null;
        selectedMessages = null;
        createDialogVisible = false;
    }
    
    public void JJBugBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
